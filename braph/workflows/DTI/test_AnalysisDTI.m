% test AnalysisDTI
br1 = BrainRegion('BR1', 'brain region 1', 1, 11, 111);
br2 = BrainRegion('BR2', 'brain region 2', 2, 22, 222);
br3 = BrainRegion('BR3', 'brain region 3', 3, 33, 333);
br4 = BrainRegion('BR4', 'brain region 4', 4, 44, 444);
br5 = BrainRegion('BR5', 'brain region 5', 5, 55, 555);
atlas = BrainAtlas('brain atlas', {br1, br2, br3, br4, br5});

sub11 = SubjectDTI(atlas, 'SubjectID', '11', 'age', 20, 'DTI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub12 = SubjectDTI(atlas, 'SubjectID', '12', 'age', 20, 'DTI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub13 = SubjectDTI(atlas, 'SubjectID', '13', 'age', 20, 'DTI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub14 = SubjectDTI(atlas, 'SubjectID', '14', 'age', 20, 'DTI', .5 + .5 * rand(atlas.getBrainRegions().length()));
group1 = Group('SubjectDTI', {sub11, sub12, sub13, sub14}, 'GroupName', 'GroupTestDTI1');

sub21 = SubjectDTI(atlas, 'SubjectID', '21', 'age', 20, 'DTI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub22 = SubjectDTI(atlas, 'SubjectID', '22', 'age', 20, 'DTI', .5 + .5 * rand(atlas.getBrainRegions().length()));
sub23 = SubjectDTI(atlas, 'SubjectID', '23', 'age', 20, 'DTI', .5 + .5 * rand(atlas.getBrainRegions().length()));
group2 = Group('SubjectDTI', {sub21, sub22, sub23}, 'GroupName', 'GroupTestDTI2');

cohort = Cohort('Cohort DTI', 'SubjectDTI', atlas, {sub11, sub12, sub13, sub14, sub21, sub22, sub23});
cohort.getGroups().add(group1.getName(), group1)
cohort.getGroups().add(group2.getName(), group2)

measures = {'Assortativity', 'Degree', 'Distance'};

%% Test 1: Instantiation
analysis = AnalysisDTI(cohort, {}, {}, {}); %#ok<NASGU>

%% Test 2: Create correct ID
analysis = AnalysisDTI(cohort, {}, {}, {});

measurement_id = analysis.getMeasurementID('Degree', group1);
expected_value = [ ...
    tostring(analysis.getMeasurementClass()) ' ' ...
    tostring('Degree') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ...
    ];

assert(ischar(measurement_id), ...
    ['BRAPH:AnalysisDTI:getMeasurementID'], ...
    ['AnalysisDTI.getMeasurementID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(measurement_id, expected_value), ...
    ['BRAPH:AnalysisDTI:getMeasurementID'], ...
    ['AnalysisDTI.getMeasurementID() not creating correct ID']) %#ok<*NBRAK>

comparison_id = analysis.getComparisonID('Distance', {group1, group2});
expected_value = [ ...
    tostring(analysis.getComparisonClass()) ' ' ...
    tostring('Distance') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group2)) ...
    ];
assert(ischar(comparison_id), ...
    ['BRAPH:AnalysisDTI:getComparisonID'], ...
    ['AnalysisDTI.getComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(comparison_id, expected_value), ...
    ['BRAPH:AnalysisDTI:getComparisonID'], ...
    ['AnalysisDTI.getComparisonID() not creating correct ID']) %#ok<*NBRAK>

randomcomparison_id = analysis.getRandomComparisonID('PathLength', group1);
expected_value = [ ...
    tostring(analysis.getRandomComparisonClass()) ' ' ...
    tostring('PathLength') ' ' ...
    tostring(analysis.getCohort().getGroups().getIndex(group1)) ...
    ];
assert(ischar(randomcomparison_id), ...
    ['BRAPH:AnalysisDTI:getRandomComparisonID'], ...
    ['AnalysisDTI.getRandomComparisonID() not creating an ID']) %#ok<*NBRAK>
assert(isequal(randomcomparison_id, expected_value), ...
    ['BRAPH:AnalysisDTI:getRandomComparisonID'], ...
    ['AnalysisDTI.getRandomComparisonID() not creating correct ID']) %#ok<*NBRAK>

%% Test 3: Calculate Measurement
for i = 1:1:length(measures)
    measure = measures{i};
    analysis = AnalysisDTI(cohort, {}, {}, {});
    measurement = analysis.calculateMeasurement(measure, group1);
    
    assert(~isempty(measurement), ...
        ['BRAPH:AnalysisDTI:calculateMeasurement'], ...
        ['AnalysisDTI.calculateMeasurement() not working']) %#ok<*NBRAK>
    
    measurement_keys = analysis.getMeasurements().getKeys();
    
    for j = 1:1:numel(measurement_keys)
        calculated_measurement = analysis.getMeasurements().getValue(measurement_keys{j});
        calculated_value = calculated_measurement.getMeasureValues();
        calculted_average = calculated_measurement.getGroupAverageValue();
        
        if Measure.is_global(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                ['BRAPH:AnalysisDTI:calculateMeasurement'], ...
                ['AnalysisDTI.calculateMeasurement() not working for global']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber) & ...
                all(cellfun(@(x) isequal(size(x), [1, 1]), calculated_value)), ...
                ['BRAPH:AnalysisDTI:Instantiation'], ...
                ['AnalysisDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
            assert(isequal(size(calculted_average), [1 1]), ...
                ['BRAPH:AnalysisDTI:Instantiation'], ...
                ['AnalysisDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
            
        elseif Measure.is_nodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                ['BRAPH:AnalysisDTI:calculateMeasurement'], ...
                ['AnalysisDTI.calculateMeasurement() not working for nodal']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber) & ...
                all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), calculated_value)), ...
                ['BRAPH:AnalysisDTI:Instantiation'], ...
                ['AnalysisDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
            assert(isequal(size(calculted_average), [atlas.getBrainRegions().length(), 1]), ...
                ['BRAPH:AnalysisDTI:Instantiation'], ...
                ['AnalysisDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
            
        elseif Measure.is_binodal(measure)
            
            assert(isequal(calculated_measurement.getMeasureCode(), measure), ...
                ['BRAPH:AnalysisDTI:calculateMeasurement'], ...
                ['AnalysisDTI.calculateMeasurement() not working for binodal']) %#ok<*NBRAK>
            assert(iscell(calculated_value) & ...
                isequal(numel(calculated_value), group1.subjectnumber) & ...
                all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), calculated_value)), ...
                ['BRAPH:MeasurementDTI:Instantiation'], ...
                ['MeasurementDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
            assert(isequal(size(calculted_average), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), ...
                ['BRAPH:MeasurementDTI:Instantiation'], ...
                ['MeasurementDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        end
    end
end

%% Test 4: Compare
for i = 1:1:numel(measures)
    measure = measures{i};
    analysis = AnalysisDTI(cohort, {}, {}, {});
    number_of_permutations = 10;
    calculate_comparison = analysis.calculateComparison(measure, {group1, group2}, 'NumerOfPermutations', number_of_permutations);
    
    assert(~isempty(calculate_comparison), ...
        ['BRAPH:AnalysisDTI:calculateComparison'], ...
        ['AnalysisDTI.calculateComparison() not working']) %#ok<*NBRAK>
    
    assert(analysis.getComparisons().length() == 1, ...
        ['BRAPH:AnalysisDTI:calculateComparison'], ...
        ['AnalysisDTI.calculateComparison() not working'])
    
    comparison = analysis.getComparisons().getValue(1);
    comparison_values_1 = comparison.getGroupValue(1);
    comparison_values_2 = comparison.getGroupValue(2);
    comparison_average_1 = comparison.getGroupAverageValue(1);
    comparison_average_2 = comparison.getGroupAverageValue(2);
    comparison_difference = comparison.getDifference();
    comparison_all_differences = comparison.getAllDifferences();
    comparison_p1 = comparison.getP1();
    comparison_p2 = comparison.getP2();
    comparison_confidence_interval_min = comparison.getConfidenceIntervalMin();
    comparison_confidence_interval_max = comparison.getConfidenceIntervalMax();
    
    if Measure.is_global(measures{i})
        assert(iscell(comparison_values_1) & ...
            isequal(numel(comparison_values_1),group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_values_1)) & ...
            iscell(comparison_values_2) & ...
            isequal(numel(comparison_values_2), group2.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), comparison_values_2)), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
        assert(isequal(numel(comparison_average_1), 1) & ...
            isequal(numel(comparison_average_2), 1) & ...
            isequal(numel(comparison_difference), 1) & ...
            isequal(numel(comparison_all_differences), number_of_permutations) & ...
            isequal(numel(comparison_p1), 1) & ...
            isequal(numel(comparison_p2), 1) & ...
            isequal(numel(comparison_confidence_interval_min), 1) & ...
            isequal(numel(comparison_confidence_interval_max), 1), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
    elseif Measure.is_nodal(measures{i})
        assert(iscell(comparison_values_1) & ...
            isequal(numel(comparison_values_1),group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_values_1)) & ...
            iscell(comparison_values_2) & ...
            isequal(numel(comparison_values_2),group2.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), comparison_values_2)) , ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(comparison_average_1), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(comparison_average_2), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(comparison_difference), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(comparison_all_differences), [1, number_of_permutations]) & ...
            isequal(size(comparison_p1), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(comparison_p2), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(comparison_confidence_interval_min), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(comparison_confidence_interval_max), [atlas.getBrainRegions().length(), 1]), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
    elseif Measure.is_binodal(measures{i})
        assert(iscell(comparison_values_1) & ...
            isequal(numel(comparison_values_1),group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_values_1)) & ...
            iscell(comparison_values_2) & ...
            isequal(numel(comparison_values_2),group2.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), comparison_values_2)), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(comparison_average_1), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(comparison_average_2), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(comparison_difference), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(comparison_all_differences), [1, number_of_permutations]) & ...
            isequal(size(comparison_p1), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(comparison_p2), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(comparison_confidence_interval_min), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(comparison_confidence_interval_max), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
    end    
end

%% Test 5 RandomCompare
for i = 1:1:numel(measures)
    measure = measures{i};
    analysis = AnalysisDTI(cohort, {}, {}, {});
    number_of_permutations = 10;
    calculate_randomcomparison = analysis.calculateRandomComparison(measure, group1, 'NumerOfPermutations', number_of_permutations);
    
    assert(~isempty(calculate_randomcomparison), ...
        ['BRAPH:AnalysisDTI:calculateComparison'], ...
        ['AnalysisDTI.calculateComparison() not working']) %#ok<*NBRAK>
    
    assert(analysis.getRandomComparisons().length() == 1, ...
        ['BRAPH:AnalysisDTI:calculateRandomComparison'], ...
        ['AnalysisDTI.calculateRandomComparison() not working'])
    
    randomcomparison = analysis.getRandomComparisons().getValue(1);
    randomcomparison_values_1 = randomcomparison.getGroupValue();
    randomcomparison_values_2 = randomcomparison.getRandomValue();
    randomcomparison_average_1 = randomcomparison.getAverageValue();
    randomcomparison_average_2 = randomcomparison.getAverageRandomValue();
    randomcomparison_difference = randomcomparison.getDifference();
    randomcomparison_all_differences = randomcomparison.getAllDifferences();
    randomcomparison_p1 = randomcomparison.getP1();
    randomcomparison_p2 = randomcomparison.getP2();
    randomcomparison_confidence_interval_min = randomcomparison.getConfidenceIntervalMin();
    randomcomparison_confidence_interval_max = randomcomparison.getConfidenceIntervalMax();
    
    if Measure.is_global(measures{i})
        assert(iscell(randomcomparison_values_1) & ...
            isequal(numel(randomcomparison_values_1),group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), randomcomparison_values_1)) & ...
            iscell(randomcomparison_values_2) & ...
            isequal(numel(randomcomparison_values_2), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [1, 1]), randomcomparison_values_2)), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
        assert(isequal(numel(randomcomparison_average_1), 1) & ...
            isequal(numel(randomcomparison_average_2), 1) & ...
            isequal(numel(randomcomparison_difference), 1) & ...
            isequal(numel(randomcomparison_all_differences), number_of_permutations) & ...
            isequal(numel(randomcomparison_p1), 1) & ...
            isequal(numel(randomcomparison_p2), 1) & ...
            isequal(numel(randomcomparison_confidence_interval_min), 1) & ...
            isequal(numel(randomcomparison_confidence_interval_max), 1), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with global measures.']) %#ok<*NBRAK>
    elseif Measure.is_nodal(measures{i})
        assert(iscell(randomcomparison_values_1) & ...
            isequal(numel(randomcomparison_values_1), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), randomcomparison_values_1)) & ...
            iscell(randomcomparison_values_2) & ...
            isequal(numel(randomcomparison_values_2), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), randomcomparison_values_2)) , ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(randomcomparison_average_1), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(randomcomparison_average_2), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(randomcomparison_difference), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(randomcomparison_all_differences), [1, number_of_permutations]) & ...
            isequal(size(randomcomparison_p1), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(randomcomparison_p2), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(randomcomparison_confidence_interval_min), [atlas.getBrainRegions().length(), 1]) & ...
            isequal(size(randomcomparison_confidence_interval_max), [atlas.getBrainRegions().length(), 1]), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with nodal measures.']) %#ok<*NBRAK>
    elseif Measure.is_binodal(measures{i})
        assert(iscell(randomcomparison_values_1) & ...
            isequal(numel(randomcomparison_values_1), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), randomcomparison_values_1)) & ...
            iscell(randomcomparison_values_2) & ...
            isequal(numel(randomcomparison_values_2), group1.subjectnumber) & ...
            all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), randomcomparison_values_2)), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
        assert(isequal(size(randomcomparison_average_1), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(randomcomparison_average_2), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(randomcomparison_difference), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(randomcomparison_all_differences), [1, number_of_permutations]) & ...
            isequal(size(randomcomparison_p1), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(randomcomparison_p2), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(randomcomparison_confidence_interval_min), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]) & ...
            isequal(size(randomcomparison_confidence_interval_max), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), ...
            ['BRAPH:AnalysisDTI:Instantiation'], ...
            ['AnalysisDTI does not initialize correctly with binodal measures.']) %#ok<*NBRAK>
    end    
end
