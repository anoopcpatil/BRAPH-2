%TEST_COSMICRAYNOISEREMOVER

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	crnr = CosmicRayNoiseRemover();
	 
	% get('ELCLASS')
	if isa(CosmicRayNoiseRemover, 'ConcreteElement')
		assert(strcmp(CosmicRayNoiseRemover().get('ELCLASS'), 'CosmicRayNoiseRemover'), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover().get(''ELCLASS'') should return ''CosmicRayNoiseRemover''.')
	end
	 
	% getClass
	assert(strcmp(CosmicRayNoiseRemover.getClass(), 'CosmicRayNoiseRemover'), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.getClass() should return ''CosmicRayNoiseRemover''.')
	assert(strcmp(crnr.getClass(), 'CosmicRayNoiseRemover'), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'crnr.getClass() should return ''CosmicRayNoiseRemover''.')
	assert(strcmp(Element.getClass(crnr), 'CosmicRayNoiseRemover'), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(crnr) should return ''CosmicRayNoiseRemover''.')
	assert(strcmp(Element.getClass('CosmicRayNoiseRemover'), 'CosmicRayNoiseRemover'), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''CosmicRayNoiseRemover'') should return ''CosmicRayNoiseRemover''.')
	 
	% getSubclasses()
	assert(isequal(CosmicRayNoiseRemover.getSubclasses(), subclasses('CosmicRayNoiseRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.getSubclasses() should return the same result as subclasses(''CosmicRayNoiseRemover'', [], [], true).')
	assert(isequal(crnr.getSubclasses(), subclasses('CosmicRayNoiseRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''CosmicRayNoiseRemover'', [], [], true).')
	assert(isequal(Element.getSubclasses(crnr), subclasses('CosmicRayNoiseRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(crnr) should return the same result as subclasses(''CosmicRayNoiseRemover'', [], [], true).')
	assert(isequal(Element.getSubclasses('CosmicRayNoiseRemover'), subclasses('CosmicRayNoiseRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''CosmicRayNoiseRemover'') should return the same result as subclasses(''CosmicRayNoiseRemover'', [], [], true).')
	 
	% getProps()
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(CosmicRayNoiseRemover.getProps(), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.getProps() should return a row vector [1:1:N].')
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(crnr.getProps(), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'crnr.getProps() should return a row vector [1:1:N].')
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(Element.getProps(crnr), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(crnr) should return a row vector [1:1:N].')
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(Element.getProps('CosmicRayNoiseRemover'), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CosmicRayNoiseRemover'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) CosmicRayNoiseRemover.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.getProps(category) does not work.')
	tmp = cellfun(@(category) crnr.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'crnr.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(crnr, category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(crnr, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('CosmicRayNoiseRemover', category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayNoiseRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayNoiseRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CosmicRayNoiseRemover'', category) does not work.')
	 
	% getPropNumber()
	assert(CosmicRayNoiseRemover.getPropNumber() == length(CosmicRayNoiseRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.getPropNumber() should return the number of properties.')
	assert(crnr.getPropNumber() == length(CosmicRayNoiseRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'crnr.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(crnr) == length(CosmicRayNoiseRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(crnr) should return the number of properties.')
	assert(Element.getPropNumber('CosmicRayNoiseRemover') == length(CosmicRayNoiseRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CosmicRayNoiseRemover'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) CosmicRayNoiseRemover.getPropNumber(category), categories)) == CosmicRayNoiseRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) crnr.getPropNumber(category), categories)) == CosmicRayNoiseRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'crnr.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(crnr, category), categories)) == CosmicRayNoiseRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(crnr, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('CosmicRayNoiseRemover', category), categories)) == CosmicRayNoiseRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CosmicRayNoiseRemover'', category) does not work.')
	 
	% existsProp(prop)
	assert(~CosmicRayNoiseRemover.existsProp(NaN), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.existsProp(prop) does not work.')
	assert(~crnr.existsProp(NaN), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'crnr.existsProp(prop) does not work.')
	assert(~Element.existsProp(crnr, NaN), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(crnr, prop) does not work.')
	assert(~Element.existsProp('CosmicRayNoiseRemover', NaN), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''CosmicRayNoiseRemover'', prop) does not work.')
	 
	assert_with_error('CosmicRayNoiseRemover.existsProp(NaN)', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], crnr)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], crnr)
	assert_with_error('Element.existsProp(''CosmicRayNoiseRemover'', NaN)', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		assert(CosmicRayNoiseRemover.existsProp(prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.existsProp(prop) does not work.')
		assert(crnr.existsProp(prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.existsProp(prop) does not work.')
		assert(Element.existsProp(crnr, prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(crnr, prop) does not work.')
		assert(Element.existsProp('CosmicRayNoiseRemover', prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''CosmicRayNoiseRemover'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~CosmicRayNoiseRemover.existsTag(''), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.existsTag(tag) does not work.')
	assert(~crnr.existsTag(''), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'crnr.existsTag(tag) does not work.')
	assert(~Element.existsTag(crnr, ''), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(crnr, tag) does not work.')
	assert(~Element.existsTag('CosmicRayNoiseRemover', ''), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''CosmicRayNoiseRemover'', tag) does not work.')
	 
	assert_with_error('CosmicRayNoiseRemover.existsTag('''')', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], crnr)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], crnr)
	assert_with_error('Element.existsTag(''CosmicRayNoiseRemover'', '''')', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
		assert(CosmicRayNoiseRemover.existsTag(tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.existsTag(tag) does not work.')
		assert(crnr.existsTag(tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.existsTag(tag) does not work.')
		assert(Element.existsTag(crnr, tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(crnr, tga) does not work.')
		assert(Element.existsTag('CosmicRayNoiseRemover', tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''CosmicRayNoiseRemover'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		assert(CosmicRayNoiseRemover.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropProp(prop) does not work.')
		assert(crnr.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropProp(prop) does not work.')
		assert(Element.getPropProp(crnr, prop) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(crnr, prop) does not work.')
		assert(Element.getPropProp('CosmicRayNoiseRemover', prop) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CosmicRayNoiseRemover'', prop) does not work.')
	 
		tag = crnr.getPropTag(prop);
		assert(CosmicRayNoiseRemover.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropProp(tag) does not work.')
		assert(crnr.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropProp(tag) does not work.')
		assert(Element.getPropProp(crnr, tag) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(crnr, tag) does not work.')
		assert(Element.getPropProp('CosmicRayNoiseRemover', prop) == prop, ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CosmicRayNoiseRemover'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		assert(strcmp(CosmicRayNoiseRemover.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropTag(prop) does not work.')
		assert(strcmp(crnr.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(crnr, prop), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(crnr, prop) does not work.')
		assert(strcmp(Element.getPropTag('CosmicRayNoiseRemover', prop), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CosmicRayNoiseRemover'', prop) does not work.')
	 
		assert(strcmp(CosmicRayNoiseRemover.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropTag(tag) does not work.')
		assert(strcmp(crnr.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(crnr, tag), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(crnr, tag) does not work.')
		assert(strcmp(Element.getPropTag('CosmicRayNoiseRemover', prop), tag), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CosmicRayNoiseRemover'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		assert(Category.existsCategory(CosmicRayNoiseRemover.getPropCategory(prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(crnr.getPropCategory(prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crnr, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(crnr, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crnr, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CosmicRayNoiseRemover'', prop) does not work.')
	 
		assert(Category.existsCategory(CosmicRayNoiseRemover.getPropCategory(tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(crnr.getPropCategory(tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crnr, tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(crnr, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crnr, tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CosmicRayNoiseRemover'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		assert(Format.existsFormat(CosmicRayNoiseRemover.getPropFormat(prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(crnr.getPropFormat(prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crnr, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(crnr, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crnr, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CosmicRayNoiseRemover'', prop) does not work.')
	 
		assert(Format.existsFormat(CosmicRayNoiseRemover.getPropFormat(tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(crnr.getPropFormat(tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crnr, tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(crnr, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crnr, tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CosmicRayNoiseRemover'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		assert(ischar(CosmicRayNoiseRemover.getPropDescription(prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropDescription(prop) does not work.')
		assert(ischar(crnr.getPropDescription(prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(crnr, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(crnr, prop) does not work.')
		assert(ischar(Element.getPropDescription(crnr, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CosmicRayNoiseRemover'', prop) does not work.')
	 
		assert(ischar(CosmicRayNoiseRemover.getPropDescription(tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.getPropDescription(tag) does not work.')
		assert(ischar(crnr.getPropDescription(tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(crnr, tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(crnr, tag) does not work.')
		assert(ischar(Element.getPropDescription(crnr, tag)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CosmicRayNoiseRemover'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		settings = CosmicRayNoiseRemover.getPropSettings(prop);
		settings = crnr.getPropSettings(prop);
		settings = Element.getPropSettings(crnr, prop);
		settings = Element.getPropSettings('CosmicRayNoiseRemover', prop);
	 
		settings = CosmicRayNoiseRemover.getPropSettings(tag);
		settings = crnr.getPropSettings(tag);
		settings = Element.getPropSettings(crnr, tag);
		settings = Element.getPropSettings('CosmicRayNoiseRemover', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		default = CosmicRayNoiseRemover.getPropDefault(prop);
		default = crnr.getPropDefault(prop);
		default = Element.getPropDefault(crnr, prop);
		default = Element.getPropDefault('CosmicRayNoiseRemover', prop);
	 
		default = CosmicRayNoiseRemover.getPropDefault(tag);
		default = crnr.getPropDefault(tag);
		default = Element.getPropDefault(crnr, tag);
		default = Element.getPropDefault('CosmicRayNoiseRemover', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		conditioned_default = CosmicRayNoiseRemover.getPropDefaultConditioned(prop);
		conditioned_default = crnr.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(crnr, prop);
		conditioned_default = Element.getPropDefaultConditioned('CosmicRayNoiseRemover', prop);
	 
		conditioned_default = CosmicRayNoiseRemover.getPropDefaultConditioned(tag);
		conditioned_default = crnr.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(crnr, tag);
		conditioned_default = Element.getPropDefaultConditioned('CosmicRayNoiseRemover', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		tag = crnr.getPropTag(prop);
	 
		assert(~CosmicRayNoiseRemover.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.checkProp(prop, value) does not work.')
		assert(~crnr.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(crnr, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crnr, prop, value) does not work.')
		assert(~Element.checkProp('CosmicRayNoiseRemover', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayNoiseRemover'', prop, value) does not work.')
	 
		assert_with_error('CosmicRayNoiseRemover.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], prop, crnr)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], prop, crnr)
		assert_with_error('Element.checkProp(''CosmicRayNoiseRemover'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~CosmicRayNoiseRemover.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.checkProp(tag, value) does not work.')
		assert(~crnr.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(crnr, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crnr, tag, value) does not work.')
		assert(~Element.checkProp('CosmicRayNoiseRemover', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayNoiseRemover'', tag, value) does not work.')
	 
		assert_with_error('CosmicRayNoiseRemover.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], tag, crnr)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], tag, crnr)
		assert_with_error('Element.checkProp(''CosmicRayNoiseRemover'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(CosmicRayNoiseRemover.checkProp(prop, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.checkProp(prop, <conditioned default value>) does not work.')
		assert(crnr.checkProp(prop, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(crnr, prop, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crnr, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('CosmicRayNoiseRemover', prop, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayNoiseRemover'', prop, <conditioned default value>) does not work.')
	 
		assert(CosmicRayNoiseRemover.checkProp(tag, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.checkProp(tag, <conditioned default value>) does not work.')
		assert(crnr.checkProp(tag, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'crnr.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(crnr, tag, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crnr, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('CosmicRayNoiseRemover', tag, Element.getPropDefaultConditioned(CosmicRayNoiseRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayNoiseRemover'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.TEMPLATE), ...
		CosmicRayNoiseRemover.ID, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.ID), ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.RE_IN), ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.REPF) ...
		);
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					crnr.getr(prop) == CosmicRayNoiseRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayNoiseRemover.getCategoryName(CosmicRayNoiseRemover.getPropCategory(prop)) ', CosmicRayNoiseRemover.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayNoiseRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					crnr.getr(TAG) == CosmicRayNoiseRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayNoiseRemover.getCategoryName(CosmicRayNoiseRemover.getPropCategory(prop)) ', CosmicRayNoiseRemover.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayNoiseRemover.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(crnr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(crnr.getPropSettings(prop))
					assert( ...
						crnr.checkFormat(crnr.getPropFormat(prop), crnr.get(prop)), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						crnr.checkFormat(crnr.getPropFormat(prop), crnr.get(prop), crnr.getPropSettings(prop)), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					crnr.getr(prop) == CosmicRayNoiseRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayNoiseRemover.getCategoryName(CosmicRayNoiseRemover.getPropCategory(prop)) ', CosmicRayNoiseRemover.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayNoiseRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					crnr.getr(TAG) == CosmicRayNoiseRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayNoiseRemover.getCategoryName(CosmicRayNoiseRemover.getPropCategory(prop)) ', CosmicRayNoiseRemover.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayNoiseRemover.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':CosmicRayNoiseRemover']);
				assert( ...
					~isa(crnr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(crnr.getPropSettings(prop))
					assert( ...
						crnr.checkFormat(crnr.getPropFormat(prop), crnr.get(prop)), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						crnr.checkFormat(crnr.getPropFormat(prop), crnr.get(prop), crnr.getPropSettings(prop)), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(crnr.getr(prop), CosmicRayNoiseRemover.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by CosmicRayNoiseRemover.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CosmicRayNoiseRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(crnr.getr(TAG), CosmicRayNoiseRemover.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' TAG ') must be inizialized to its default value ' ...
					'given by CosmicRayNoiseRemover.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CosmicRayNoiseRemover.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.TEMPLATE), ...
		CosmicRayNoiseRemover.ID, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.ID), ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.RE_IN), ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.REPF) ...
		);
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(crnr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(crnr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(crnr.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(crnr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					crnr.checkFormat(crnr.getPropFormat(prop), crnr.getr(prop),crnr.getPropSettings(prop)), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':CosmicRayNoiseRemover']);
				assert( ...
					~isa(crnr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(crnr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':CosmicRayNoiseRemover']);
	% 			assert( ...
	% 				~isa(crnr.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
	% 				['CosmicRayNoiseRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(crnr.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
	% 				['CosmicRayNoiseRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				crnr.checkFormat(crnr.getPropFormat(prop), crnr.getr(prop),crnr.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
	% 				['CosmicRayNoiseRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':CosmicRayNoiseRemover']);
				assert( ...
					~isa(crnr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(crnr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(crnr.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(crnr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					crnr.checkFormat(crnr.getPropFormat(prop), crnr.getr(prop),crnr.getPropSettings(prop)), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if crnr.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:CosmicRayNoiseRemover');
					delete(ancestor(crnr.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(CosmicRayNoiseRemover.getProps(Category.RESULT))
		for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch CosmicRayNoiseRemover.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						crnr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~crnr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr = CosmicRayNoiseRemover();
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		assert( ...
			~crnr.isLocked(prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayNoiseRemover.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~crnr.isLocked(TAG), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayNoiseRemover.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	crnr.lock()
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					crnr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~crnr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr = CosmicRayNoiseRemover();
	 
	warning_backup = warning('off', 'BRAPH2:CosmicRayNoiseRemover');
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		crnr.lock(prop)
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					crnr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~crnr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr = CosmicRayNoiseRemover();
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		assert( ...
			crnr.isChecked(prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayNoiseRemover.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			crnr.isChecked(TAG), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayNoiseRemover.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	crnr.unchecked()
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		assert( ...
			~crnr.isChecked(prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayNoiseRemover.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	crnr.checked()
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		assert( ...
			crnr.isChecked(prop), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayNoiseRemover.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic CosmicRayNoiseRemover
	crnr_0 = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.TEMPLATE), ...
		CosmicRayNoiseRemover.ID, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.ID), ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.RE_IN), ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.REPF) ...
		);
	 
	% CosmicRayNoiseRemover with 1st callbacks
	crnr_1 = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, crnr_0.getCallback(4), ..., ...
		CosmicRayNoiseRemover.ID, crnr_0.getCallback(5), ..., ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, crnr_0.getCallback(9), ..., ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, crnr_0.getCallback(13) ... ...
		);
	 
	prop_number = CosmicRayNoiseRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(crnr_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(crnr_1.get(prop), crnr_0.get(prop)) && ~isa(crnr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(crnr_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CosmicRayNoiseRemover with 2nd callbacks
	crnr_2 = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, crnr_1.getCallback(4), ..., ...
		CosmicRayNoiseRemover.ID, crnr_1.getCallback(5), ..., ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, crnr_1.getCallback(9), ..., ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, crnr_1.getCallback(13) ... ...
		);
	 
	prop_number = CosmicRayNoiseRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(crnr_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(crnr_2.get(prop), crnr_0.get(prop)) && ~isa(crnr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(crnr_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CosmicRayNoiseRemover with 3rd callbacks
	crnr_3 = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, crnr_2.getCallback(4), ..., ...
		CosmicRayNoiseRemover.ID, crnr_2.getCallback(5), ..., ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, crnr_2.getCallback(9), ..., ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, crnr_2.getCallback(13) ... ...
		);
	 
	prop_number = CosmicRayNoiseRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(crnr_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(crnr_3.get(prop), crnr_0.get(prop)) && ~isa(crnr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(crnr_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	crnr = CosmicRayNoiseRemover();
	 
	crnr_copy = crnr.copy();
	 
	assert(crnr_copy ~= crnr, ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(crnr_copy, crnr), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		value = crnr.getr(prop);
		value_copy = crnr_copy.getr(prop);
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayNoiseRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayNoiseRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayNoiseRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					crnr_copy.isLocked(prop) == crnr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayNoiseRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					crnr_copy.isChecked(prop) == crnr.isChecked(prop), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayNoiseRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					crnr_copy.getPropSeed(prop) == crnr.getPropSeed(prop), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayNoiseRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	crnr = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.TEMPLATE), ...
		CosmicRayNoiseRemover.ID, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.ID), ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.RE_IN), ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.REPF) ...
		);
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		if CosmicRayNoiseRemover.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':CosmicRayNoiseRemover']);
			% crnr.memorize(prop);
			% warning(warning_backup)
		elseif CosmicRayNoiseRemover.getPropCategory(prop) == Category.EVANESCENT && crnr.getPropFormat(prop) == Format.HANDLE
			crnr.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:CosmicRayNoiseRemover');
			delete(ancestor(crnr.get(prop), 'figure'))
			warning(warning_backup)
		else
			crnr.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	crnr_copy = crnr.copy();
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		value = crnr.getr(prop);
		value_copy = crnr_copy.getr(prop);
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayNoiseRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayNoiseRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayNoiseRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						crnr_copy.isLocked(prop) == crnr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crnr_copy.isChecked(prop) == crnr.isChecked(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crnr_copy.getPropSeed(prop) == crnr.getPropSeed(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	crnr_0 = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.TEMPLATE), ...
		CosmicRayNoiseRemover.ID, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.ID), ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.RE_IN), ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.REPF) ...
		);
	 
	crnr = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, crnr_0.getCallback(4), ..., ...
		CosmicRayNoiseRemover.ID, crnr_0.getCallback(5), ..., ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, crnr_0.getCallback(9), ..., ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, crnr_0.getCallback(13) ... ...
		);
	 
	crnr_copy = crnr.copy();
	crnr_0_copy = crnr_copy.getr('ID').get('EL');
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
		value = crnr.getr(prop);
		value_copy = crnr_copy.getr(prop);
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayNoiseRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayNoiseRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayNoiseRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == crnr_0.getCallback(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The callback should be obtained from CosmicRayNoiseRemover.getCallback().' ...
						)
					assert( ...
						value_copy == crnr_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The callback should be obtained from CosmicRayNoiseRemover.getCallback().' ...
						)
				end
	 
					assert( ...
						crnr_copy.isLocked(prop) == crnr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crnr_copy.isChecked(prop) == crnr.isChecked(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crnr_copy.getPropSeed(prop) == crnr.getPropSeed(prop), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr_template = CosmicRayNoiseRemover();
	crnr = CosmicRayNoiseRemover('TEMPLATE', crnr_template);
	 
	for prop = 1:1:CosmicRayNoiseRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CosmicRayNoiseRemover.getPropTag(prop));
		switch CosmicRayNoiseRemover.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == CosmicRayNoiseRemover.TEMPLATE
					assert( ...
						isa(crnr.getr(prop), 'CosmicRayNoiseRemover'), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover TEMPLATE does not work. CosmicRayNoiseRemover.getr(''TEMPLATE'') should be a CosmicRayNoiseRemover element.' ...
						)
					assert( ...
						isa(crnr_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayNoiseRemover TEMPLATE does not work. CosmicRayNoiseRemover_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(crnr.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover TEMPLATE does not work. CosmicRayNoiseRemover.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						crnr.getr(prop).get('EL') == crnr_template && crnr.getr(prop).get('PROP') == prop && strcmp(crnr.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover TEMPLATE does not work. CosmicRayNoiseRemover.getr(' TAG ') should be a Callback to crnr_template.' TAG '.'] ...
						)
					assert( ...
						isa(crnr_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayNoiseRemover TEMPLATE does not work. CosmicRayNoiseRemover_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(crnr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover TEMPLATE does not work. CosmicRayNoiseRemover.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(crnr_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayNoiseRemover TEMPLATE does not work. CosmicRayNoiseRemover_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.TEMPLATE), ...
		CosmicRayNoiseRemover.ID, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.ID), ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.RE_IN), ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.REPF) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'cosmicraynoiseremover_to_be_erased.b2'];
	 
	Element.save(crnr, filename)
	 
	crnr_loaded = Element.load(filename);
	 
	assert( ...
		isequal(crnr.copy(), crnr_loaded), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.save(crnr) and/or CosmicRayNoiseRemover.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crnr = CosmicRayNoiseRemover( ...
		CosmicRayNoiseRemover.ELCLASS, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.NAME, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.DESCRIPTION, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.TEMPLATE, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.TEMPLATE), ...
		CosmicRayNoiseRemover.ID, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.ID), ...
		CosmicRayNoiseRemover.LABEL, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.LABEL), ...
		CosmicRayNoiseRemover.NOTES, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.NOTES), ...
		CosmicRayNoiseRemover.TOSTRING, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_IN, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.RE_IN), ...
		CosmicRayNoiseRemover.SP_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.SP_DICT_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.RE_OUT, CosmicRayNoiseRemover.getNoValue(), ...
		CosmicRayNoiseRemover.REPF, CosmicRayNoiseRemover.getPropDefault(CosmicRayNoiseRemover.REPF) ...
		);
	 
	[json, struct, el_list] = encodeJSON(crnr);
	[crnr_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(crnr_dec ~= crnr, ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayNoiseRemover.encodeJSON() or CosmicRayNoiseRemover.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) CosmicRayNoiseRemover.getPropFormat(prop), num2cell(CosmicRayNoiseRemover.getProps())) == Format.HANDLE) && all(cellfun(@(prop) CosmicRayNoiseRemover.getPropFormat(prop), num2cell(CosmicRayNoiseRemover.getProps())) == Format.NET)
		assert(isequal(crnr_dec, crnr), ...
			[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayNoiseRemover.encodeJSON() or CosmicRayNoiseRemover.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':CosmicRayNoiseRemover:' BRAPH2.FAIL_TEST], ...
		[' When testing CosmicRayNoiseRemover no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

