%TEST_BASELINEESTIMATOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	be = BaselineEstimator();
	 
	% get('ELCLASS')
	if isa(BaselineEstimator, 'ConcreteElement')
		assert(strcmp(BaselineEstimator().get('ELCLASS'), 'BaselineEstimator'), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator().get(''ELCLASS'') should return ''BaselineEstimator''.')
	end
	 
	% getClass
	assert(strcmp(BaselineEstimator.getClass(), 'BaselineEstimator'), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.getClass() should return ''BaselineEstimator''.')
	assert(strcmp(be.getClass(), 'BaselineEstimator'), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'be.getClass() should return ''BaselineEstimator''.')
	assert(strcmp(Element.getClass(be), 'BaselineEstimator'), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(be) should return ''BaselineEstimator''.')
	assert(strcmp(Element.getClass('BaselineEstimator'), 'BaselineEstimator'), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''BaselineEstimator'') should return ''BaselineEstimator''.')
	 
	% getSubclasses()
	assert(isequal(BaselineEstimator.getSubclasses(), subclasses('BaselineEstimator', [], [], true)), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.getSubclasses() should return the same result as subclasses(''BaselineEstimator'', [], [], true).')
	assert(isequal(be.getSubclasses(), subclasses('BaselineEstimator', [], [], true)), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''BaselineEstimator'', [], [], true).')
	assert(isequal(Element.getSubclasses(be), subclasses('BaselineEstimator', [], [], true)), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(be) should return the same result as subclasses(''BaselineEstimator'', [], [], true).')
	assert(isequal(Element.getSubclasses('BaselineEstimator'), subclasses('BaselineEstimator', [], [], true)), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''BaselineEstimator'') should return the same result as subclasses(''BaselineEstimator'', [], [], true).')
	 
	% getProps()
	assert(isempty(BaselineEstimator.getProps()) || isequal(BaselineEstimator.getProps(), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.getProps() should return a row vector [1:1:N].')
	assert(isempty(BaselineEstimator.getProps()) || isequal(be.getProps(), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'be.getProps() should return a row vector [1:1:N].')
	assert(isempty(BaselineEstimator.getProps()) || isequal(Element.getProps(be), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(be) should return a row vector [1:1:N].')
	assert(isempty(BaselineEstimator.getProps()) || isequal(Element.getProps('BaselineEstimator'), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BaselineEstimator'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) BaselineEstimator.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BaselineEstimator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.getProps(category) does not work.')
	tmp = cellfun(@(category) be.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BaselineEstimator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'be.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(be, category), categories, 'UniformOutput', false);
	assert(isempty(BaselineEstimator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(be, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('BaselineEstimator', category), categories, 'UniformOutput', false);
	assert(isempty(BaselineEstimator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineEstimator.getProps())), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BaselineEstimator'', category) does not work.')
	 
	% getPropNumber()
	assert(BaselineEstimator.getPropNumber() == length(BaselineEstimator.getProps()), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.getPropNumber() should return the number of properties.')
	assert(be.getPropNumber() == length(BaselineEstimator.getProps()), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'be.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(be) == length(BaselineEstimator.getProps()), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(be) should return the number of properties.')
	assert(Element.getPropNumber('BaselineEstimator') == length(BaselineEstimator.getProps()), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BaselineEstimator'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) BaselineEstimator.getPropNumber(category), categories)) == BaselineEstimator.getPropNumber(), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) be.getPropNumber(category), categories)) == BaselineEstimator.getPropNumber(), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'be.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(be, category), categories)) == BaselineEstimator.getPropNumber(), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(be, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('BaselineEstimator', category), categories)) == BaselineEstimator.getPropNumber(), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BaselineEstimator'', category) does not work.')
	 
	% existsProp(prop)
	assert(~BaselineEstimator.existsProp(NaN), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.existsProp(prop) does not work.')
	assert(~be.existsProp(NaN), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'be.existsProp(prop) does not work.')
	assert(~Element.existsProp(be, NaN), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(be, prop) does not work.')
	assert(~Element.existsProp('BaselineEstimator', NaN), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''BaselineEstimator'', prop) does not work.')
	 
	assert_with_error('BaselineEstimator.existsProp(NaN)', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], be)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], be)
	assert_with_error('Element.existsProp(''BaselineEstimator'', NaN)', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		assert(BaselineEstimator.existsProp(prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.existsProp(prop) does not work.')
		assert(be.existsProp(prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.existsProp(prop) does not work.')
		assert(Element.existsProp(be, prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(be, prop) does not work.')
		assert(Element.existsProp('BaselineEstimator', prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''BaselineEstimator'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~BaselineEstimator.existsTag(''), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.existsTag(tag) does not work.')
	assert(~be.existsTag(''), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'be.existsTag(tag) does not work.')
	assert(~Element.existsTag(be, ''), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(be, tag) does not work.')
	assert(~Element.existsTag('BaselineEstimator', ''), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''BaselineEstimator'', tag) does not work.')
	 
	assert_with_error('BaselineEstimator.existsTag('''')', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], be)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], be)
	assert_with_error('Element.existsTag(''BaselineEstimator'', '''')', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
		assert(BaselineEstimator.existsTag(tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.existsTag(tag) does not work.')
		assert(be.existsTag(tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.existsTag(tag) does not work.')
		assert(Element.existsTag(be, tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(be, tga) does not work.')
		assert(Element.existsTag('BaselineEstimator', tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''BaselineEstimator'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		assert(BaselineEstimator.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropProp(prop) does not work.')
		assert(be.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropProp(prop) does not work.')
		assert(Element.getPropProp(be, prop) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(be, prop) does not work.')
		assert(Element.getPropProp('BaselineEstimator', prop) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BaselineEstimator'', prop) does not work.')
	 
		tag = be.getPropTag(prop);
		assert(BaselineEstimator.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropProp(tag) does not work.')
		assert(be.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropProp(tag) does not work.')
		assert(Element.getPropProp(be, tag) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(be, tag) does not work.')
		assert(Element.getPropProp('BaselineEstimator', prop) == prop, ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BaselineEstimator'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		assert(strcmp(BaselineEstimator.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropTag(prop) does not work.')
		assert(strcmp(be.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(be, prop), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(be, prop) does not work.')
		assert(strcmp(Element.getPropTag('BaselineEstimator', prop), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BaselineEstimator'', prop) does not work.')
	 
		assert(strcmp(BaselineEstimator.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropTag(tag) does not work.')
		assert(strcmp(be.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(be, tag), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(be, tag) does not work.')
		assert(strcmp(Element.getPropTag('BaselineEstimator', prop), tag), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BaselineEstimator'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		assert(Category.existsCategory(BaselineEstimator.getPropCategory(prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(be.getPropCategory(prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(be, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(be, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(be, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BaselineEstimator'', prop) does not work.')
	 
		assert(Category.existsCategory(BaselineEstimator.getPropCategory(tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(be.getPropCategory(tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(be, tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(be, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(be, tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BaselineEstimator'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		assert(Format.existsFormat(BaselineEstimator.getPropFormat(prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(be.getPropFormat(prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(be, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(be, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(be, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BaselineEstimator'', prop) does not work.')
	 
		assert(Format.existsFormat(BaselineEstimator.getPropFormat(tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(be.getPropFormat(tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(be, tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(be, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(be, tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BaselineEstimator'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		assert(ischar(BaselineEstimator.getPropDescription(prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropDescription(prop) does not work.')
		assert(ischar(be.getPropDescription(prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(be, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(be, prop) does not work.')
		assert(ischar(Element.getPropDescription(be, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BaselineEstimator'', prop) does not work.')
	 
		assert(ischar(BaselineEstimator.getPropDescription(tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.getPropDescription(tag) does not work.')
		assert(ischar(be.getPropDescription(tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(be, tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(be, tag) does not work.')
		assert(ischar(Element.getPropDescription(be, tag)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BaselineEstimator'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		settings = BaselineEstimator.getPropSettings(prop);
		settings = be.getPropSettings(prop);
		settings = Element.getPropSettings(be, prop);
		settings = Element.getPropSettings('BaselineEstimator', prop);
	 
		settings = BaselineEstimator.getPropSettings(tag);
		settings = be.getPropSettings(tag);
		settings = Element.getPropSettings(be, tag);
		settings = Element.getPropSettings('BaselineEstimator', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		default = BaselineEstimator.getPropDefault(prop);
		default = be.getPropDefault(prop);
		default = Element.getPropDefault(be, prop);
		default = Element.getPropDefault('BaselineEstimator', prop);
	 
		default = BaselineEstimator.getPropDefault(tag);
		default = be.getPropDefault(tag);
		default = Element.getPropDefault(be, tag);
		default = Element.getPropDefault('BaselineEstimator', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		conditioned_default = BaselineEstimator.getPropDefaultConditioned(prop);
		conditioned_default = be.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(be, prop);
		conditioned_default = Element.getPropDefaultConditioned('BaselineEstimator', prop);
	 
		conditioned_default = BaselineEstimator.getPropDefaultConditioned(tag);
		conditioned_default = be.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(be, tag);
		conditioned_default = Element.getPropDefaultConditioned('BaselineEstimator', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:BaselineEstimator.getPropNumber()
		tag = be.getPropTag(prop);
	 
		assert(~BaselineEstimator.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.checkProp(prop, value) does not work.')
		assert(~be.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(be, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(be, prop, value) does not work.')
		assert(~Element.checkProp('BaselineEstimator', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineEstimator'', prop, value) does not work.')
	 
		assert_with_error('BaselineEstimator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], prop, be)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], prop, be)
		assert_with_error('Element.checkProp(''BaselineEstimator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~BaselineEstimator.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.checkProp(tag, value) does not work.')
		assert(~be.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(be, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(be, tag, value) does not work.')
		assert(~Element.checkProp('BaselineEstimator', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineEstimator'', tag, value) does not work.')
	 
		assert_with_error('BaselineEstimator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], tag, be)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], tag, be)
		assert_with_error('Element.checkProp(''BaselineEstimator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineEstimator:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(BaselineEstimator.checkProp(prop, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.checkProp(prop, <conditioned default value>) does not work.')
		assert(be.checkProp(prop, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(be, prop, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(be, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('BaselineEstimator', prop, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineEstimator'', prop, <conditioned default value>) does not work.')
	 
		assert(BaselineEstimator.checkProp(tag, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.checkProp(tag, <conditioned default value>) does not work.')
		assert(be.checkProp(tag, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'be.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(be, tag, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(be, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('BaselineEstimator', tag, Element.getPropDefaultConditioned(BaselineEstimator, prop)), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineEstimator'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, BaselineEstimator.getPropDefault(BaselineEstimator.TEMPLATE), ...
		BaselineEstimator.ID, BaselineEstimator.getPropDefault(BaselineEstimator.ID), ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, BaselineEstimator.getPropDefault(BaselineEstimator.RE_IN), ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, BaselineEstimator.getPropDefault(BaselineEstimator.REPF) ...
		);
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BaselineEstimator.getPropTag(prop));
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					be.getr(prop) == BaselineEstimator.getNoValue(), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineEstimator.getCategoryName(BaselineEstimator.getPropCategory(prop)) ', BaselineEstimator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineEstimator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					be.getr(TAG) == BaselineEstimator.getNoValue(), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineEstimator.getCategoryName(BaselineEstimator.getPropCategory(prop)) ', BaselineEstimator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineEstimator.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(be.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(be.getPropSettings(prop))
					assert( ...
						be.checkFormat(be.getPropFormat(prop), be.get(prop)), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						be.checkFormat(be.getPropFormat(prop), be.get(prop), be.getPropSettings(prop)), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					be.getr(prop) == BaselineEstimator.getNoValue(), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineEstimator.getCategoryName(BaselineEstimator.getPropCategory(prop)) ', BaselineEstimator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineEstimator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					be.getr(TAG) == BaselineEstimator.getNoValue(), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineEstimator.getCategoryName(BaselineEstimator.getPropCategory(prop)) ', BaselineEstimator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineEstimator.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':BaselineEstimator']);
				assert( ...
					~isa(be.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(be.getPropSettings(prop))
					assert( ...
						be.checkFormat(be.getPropFormat(prop), be.get(prop)), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						be.checkFormat(be.getPropFormat(prop), be.get(prop), be.getPropSettings(prop)), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(be.getr(prop), BaselineEstimator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by BaselineEstimator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BaselineEstimator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(be.getr(TAG), BaselineEstimator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' TAG ') must be inizialized to its default value ' ...
					'given by BaselineEstimator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BaselineEstimator.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, BaselineEstimator.getPropDefault(BaselineEstimator.TEMPLATE), ...
		BaselineEstimator.ID, BaselineEstimator.getPropDefault(BaselineEstimator.ID), ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, BaselineEstimator.getPropDefault(BaselineEstimator.RE_IN), ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, BaselineEstimator.getPropDefault(BaselineEstimator.REPF) ...
		);
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BaselineEstimator.getPropTag(prop));
		switch BaselineEstimator.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(be.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(be.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(be.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(be.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					be.checkFormat(be.getPropFormat(prop), be.getr(prop),be.getPropSettings(prop)), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':BaselineEstimator']);
				assert( ...
					~isa(be.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(be.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':BaselineEstimator']);
	% 			assert( ...
	% 				~isa(be.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
	% 				['BaselineEstimator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(be.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
	% 				['BaselineEstimator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				be.checkFormat(be.getPropFormat(prop), be.getr(prop),be.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
	% 				['BaselineEstimator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':BaselineEstimator']);
				assert( ...
					~isa(be.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(be.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(be.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(be.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					be.checkFormat(be.getPropFormat(prop), be.getr(prop),be.getPropSettings(prop)), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if be.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:BaselineEstimator');
					delete(ancestor(be.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(BaselineEstimator.getProps(Category.RESULT))
		for prop = 1:1:BaselineEstimator.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch BaselineEstimator.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						be.isLocked(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~be.isLocked(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be = BaselineEstimator();
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		TAG = upper(BaselineEstimator.getPropTag(prop));
		assert( ...
			~be.isLocked(prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			['BaselineEstimator.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~be.isLocked(TAG), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			['BaselineEstimator.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	be.lock()
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					be.isLocked(prop), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~be.isLocked(prop), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be = BaselineEstimator();
	 
	warning_backup = warning('off', 'BRAPH2:BaselineEstimator');
	for prop = 1:1:BaselineEstimator.getPropNumber()
		be.lock(prop)
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					be.isLocked(prop), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~be.isLocked(prop), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be = BaselineEstimator();
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		TAG = upper(BaselineEstimator.getPropTag(prop));
		assert( ...
			be.isChecked(prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			['BaselineEstimator.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			be.isChecked(TAG), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			['BaselineEstimator.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	be.unchecked()
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		assert( ...
			~be.isChecked(prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			['BaselineEstimator.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	be.checked()
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		assert( ...
			be.isChecked(prop), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			['BaselineEstimator.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic BaselineEstimator
	be_0 = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, BaselineEstimator.getPropDefault(BaselineEstimator.TEMPLATE), ...
		BaselineEstimator.ID, BaselineEstimator.getPropDefault(BaselineEstimator.ID), ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, BaselineEstimator.getPropDefault(BaselineEstimator.RE_IN), ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, BaselineEstimator.getPropDefault(BaselineEstimator.REPF) ...
		);
	 
	% BaselineEstimator with 1st callbacks
	be_1 = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, be_0.getCallback(4), ..., ...
		BaselineEstimator.ID, be_0.getCallback(5), ..., ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, be_0.getCallback(9), ..., ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, be_0.getCallback(13) ... ...
		);
	 
	prop_number = BaselineEstimator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselineEstimator.getPropTag(prop));
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(be_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(be_1.get(prop), be_0.get(prop)) && ~isa(be_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(be_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BaselineEstimator with 2nd callbacks
	be_2 = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, be_1.getCallback(4), ..., ...
		BaselineEstimator.ID, be_1.getCallback(5), ..., ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, be_1.getCallback(9), ..., ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, be_1.getCallback(13) ... ...
		);
	 
	prop_number = BaselineEstimator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselineEstimator.getPropTag(prop));
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(be_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(be_2.get(prop), be_0.get(prop)) && ~isa(be_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(be_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BaselineEstimator with 3rd callbacks
	be_3 = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, be_2.getCallback(4), ..., ...
		BaselineEstimator.ID, be_2.getCallback(5), ..., ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, be_2.getCallback(9), ..., ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, be_2.getCallback(13) ... ...
		);
	 
	prop_number = BaselineEstimator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselineEstimator.getPropTag(prop));
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(be_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(be_3.get(prop), be_0.get(prop)) && ~isa(be_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(be_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	be = BaselineEstimator();
	 
	be_copy = be.copy();
	 
	assert(be_copy ~= be, ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(be_copy, be), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		value = be.getr(prop);
		value_copy = be_copy.getr(prop);
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					'BaselineEstimator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
							'BaselineEstimator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
							'BaselineEstimator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					be_copy.isLocked(prop) == be.isLocked(prop), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					'BaselineEstimator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					be_copy.isChecked(prop) == be.isChecked(prop), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					'BaselineEstimator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					be_copy.getPropSeed(prop) == be.getPropSeed(prop), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					'BaselineEstimator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	be = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, BaselineEstimator.getPropDefault(BaselineEstimator.TEMPLATE), ...
		BaselineEstimator.ID, BaselineEstimator.getPropDefault(BaselineEstimator.ID), ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, BaselineEstimator.getPropDefault(BaselineEstimator.RE_IN), ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, BaselineEstimator.getPropDefault(BaselineEstimator.REPF) ...
		);
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		if BaselineEstimator.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':BaselineEstimator']);
			% be.memorize(prop);
			% warning(warning_backup)
		elseif BaselineEstimator.getPropCategory(prop) == Category.EVANESCENT && be.getPropFormat(prop) == Format.HANDLE
			be.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:BaselineEstimator');
			delete(ancestor(be.get(prop), 'figure'))
			warning(warning_backup)
		else
			be.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	be_copy = be.copy();
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		value = be.getr(prop);
		value_copy = be_copy.getr(prop);
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					'BaselineEstimator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
							'BaselineEstimator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
							'BaselineEstimator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						be_copy.isLocked(prop) == be.isLocked(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						be_copy.isChecked(prop) == be.isChecked(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						be_copy.getPropSeed(prop) == be.getPropSeed(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	be_0 = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, BaselineEstimator.getPropDefault(BaselineEstimator.TEMPLATE), ...
		BaselineEstimator.ID, BaselineEstimator.getPropDefault(BaselineEstimator.ID), ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, BaselineEstimator.getPropDefault(BaselineEstimator.RE_IN), ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, BaselineEstimator.getPropDefault(BaselineEstimator.REPF) ...
		);
	 
	be = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, be_0.getCallback(4), ..., ...
		BaselineEstimator.ID, be_0.getCallback(5), ..., ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, be_0.getCallback(9), ..., ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, be_0.getCallback(13) ... ...
		);
	 
	be_copy = be.copy();
	be_0_copy = be_copy.getr('ID').get('EL');
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
		value = be.getr(prop);
		value_copy = be_copy.getr(prop);
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					'BaselineEstimator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
							'BaselineEstimator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
							'BaselineEstimator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == be_0.getCallback(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The callback should be obtained from BaselineEstimator.getCallback().' ...
						)
					assert( ...
						value_copy == be_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The callback should be obtained from BaselineEstimator.getCallback().' ...
						)
				end
	 
					assert( ...
						be_copy.isLocked(prop) == be.isLocked(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						be_copy.isChecked(prop) == be.isChecked(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						be_copy.getPropSeed(prop) == be.getPropSeed(prop), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be_template = BaselineEstimator();
	be = BaselineEstimator('TEMPLATE', be_template);
	 
	for prop = 1:1:BaselineEstimator.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BaselineEstimator.getPropTag(prop));
		switch BaselineEstimator.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == BaselineEstimator.TEMPLATE
					assert( ...
						isa(be.getr(prop), 'BaselineEstimator'), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator TEMPLATE does not work. BaselineEstimator.getr(''TEMPLATE'') should be a BaselineEstimator element.' ...
						)
					assert( ...
						isa(be_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						'BaselineEstimator TEMPLATE does not work. BaselineEstimator_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(be.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator TEMPLATE does not work. BaselineEstimator.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						be.getr(prop).get('EL') == be_template && be.getr(prop).get('PROP') == prop && strcmp(be.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator TEMPLATE does not work. BaselineEstimator.getr(' TAG ') should be a Callback to be_template.' TAG '.'] ...
						)
					assert( ...
						isa(be_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
						['BaselineEstimator TEMPLATE does not work. BaselineEstimator_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(be.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator TEMPLATE does not work. BaselineEstimator.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(be_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
					['BaselineEstimator TEMPLATE does not work. BaselineEstimator_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, BaselineEstimator.getPropDefault(BaselineEstimator.TEMPLATE), ...
		BaselineEstimator.ID, BaselineEstimator.getPropDefault(BaselineEstimator.ID), ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, BaselineEstimator.getPropDefault(BaselineEstimator.RE_IN), ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, BaselineEstimator.getPropDefault(BaselineEstimator.REPF) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'baselineestimator_to_be_erased.b2'];
	 
	Element.save(be, filename)
	 
	be_loaded = Element.load(filename);
	 
	assert( ...
		isequal(be.copy(), be_loaded), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.save(be) and/or BaselineEstimator.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	be = BaselineEstimator( ...
		BaselineEstimator.ELCLASS, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.NAME, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.DESCRIPTION, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.TEMPLATE, BaselineEstimator.getPropDefault(BaselineEstimator.TEMPLATE), ...
		BaselineEstimator.ID, BaselineEstimator.getPropDefault(BaselineEstimator.ID), ...
		BaselineEstimator.LABEL, BaselineEstimator.getPropDefault(BaselineEstimator.LABEL), ...
		BaselineEstimator.NOTES, BaselineEstimator.getPropDefault(BaselineEstimator.NOTES), ...
		BaselineEstimator.TOSTRING, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_IN, BaselineEstimator.getPropDefault(BaselineEstimator.RE_IN), ...
		BaselineEstimator.SP_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.SP_DICT_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.RE_OUT, BaselineEstimator.getNoValue(), ...
		BaselineEstimator.REPF, BaselineEstimator.getPropDefault(BaselineEstimator.REPF) ...
		);
	 
	[json, struct, el_list] = encodeJSON(be);
	[be_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(be_dec ~= be, ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		'BaselineEstimator.encodeJSON() or BaselineEstimator.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) BaselineEstimator.getPropFormat(prop), num2cell(BaselineEstimator.getProps())) == Format.HANDLE) && all(cellfun(@(prop) BaselineEstimator.getPropFormat(prop), num2cell(BaselineEstimator.getProps())) == Format.NET)
		assert(isequal(be_dec, be), ...
			[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
			'BaselineEstimator.encodeJSON() or BaselineEstimator.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':BaselineEstimator:' BRAPH2.FAIL_TEST], ...
		[' When testing BaselineEstimator no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

