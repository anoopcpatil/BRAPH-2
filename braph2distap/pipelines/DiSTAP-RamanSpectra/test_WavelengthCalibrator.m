%TEST_WAVELENGTHCALIBRATOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	wc = WavelengthCalibrator();
	 
	% get('ELCLASS')
	if isa(WavelengthCalibrator, 'ConcreteElement')
		assert(strcmp(WavelengthCalibrator().get('ELCLASS'), 'WavelengthCalibrator'), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator().get(''ELCLASS'') should return ''WavelengthCalibrator''.')
	end
	 
	% getClass
	assert(strcmp(WavelengthCalibrator.getClass(), 'WavelengthCalibrator'), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.getClass() should return ''WavelengthCalibrator''.')
	assert(strcmp(wc.getClass(), 'WavelengthCalibrator'), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'wc.getClass() should return ''WavelengthCalibrator''.')
	assert(strcmp(Element.getClass(wc), 'WavelengthCalibrator'), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(wc) should return ''WavelengthCalibrator''.')
	assert(strcmp(Element.getClass('WavelengthCalibrator'), 'WavelengthCalibrator'), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''WavelengthCalibrator'') should return ''WavelengthCalibrator''.')
	 
	% getSubclasses()
	assert(isequal(WavelengthCalibrator.getSubclasses(), subclasses('WavelengthCalibrator', [], [], true)), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.getSubclasses() should return the same result as subclasses(''WavelengthCalibrator'', [], [], true).')
	assert(isequal(wc.getSubclasses(), subclasses('WavelengthCalibrator', [], [], true)), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''WavelengthCalibrator'', [], [], true).')
	assert(isequal(Element.getSubclasses(wc), subclasses('WavelengthCalibrator', [], [], true)), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(wc) should return the same result as subclasses(''WavelengthCalibrator'', [], [], true).')
	assert(isequal(Element.getSubclasses('WavelengthCalibrator'), subclasses('WavelengthCalibrator', [], [], true)), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''WavelengthCalibrator'') should return the same result as subclasses(''WavelengthCalibrator'', [], [], true).')
	 
	% getProps()
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(WavelengthCalibrator.getProps(), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.getProps() should return a row vector [1:1:N].')
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(wc.getProps(), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'wc.getProps() should return a row vector [1:1:N].')
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(Element.getProps(wc), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(wc) should return a row vector [1:1:N].')
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(Element.getProps('WavelengthCalibrator'), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''WavelengthCalibrator'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) WavelengthCalibrator.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.getProps(category) does not work.')
	tmp = cellfun(@(category) wc.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'wc.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(wc, category), categories, 'UniformOutput', false);
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(wc, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('WavelengthCalibrator', category), categories, 'UniformOutput', false);
	assert(isempty(WavelengthCalibrator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(WavelengthCalibrator.getProps())), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''WavelengthCalibrator'', category) does not work.')
	 
	% getPropNumber()
	assert(WavelengthCalibrator.getPropNumber() == length(WavelengthCalibrator.getProps()), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.getPropNumber() should return the number of properties.')
	assert(wc.getPropNumber() == length(WavelengthCalibrator.getProps()), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'wc.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(wc) == length(WavelengthCalibrator.getProps()), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(wc) should return the number of properties.')
	assert(Element.getPropNumber('WavelengthCalibrator') == length(WavelengthCalibrator.getProps()), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''WavelengthCalibrator'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) WavelengthCalibrator.getPropNumber(category), categories)) == WavelengthCalibrator.getPropNumber(), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) wc.getPropNumber(category), categories)) == WavelengthCalibrator.getPropNumber(), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'wc.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(wc, category), categories)) == WavelengthCalibrator.getPropNumber(), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(wc, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('WavelengthCalibrator', category), categories)) == WavelengthCalibrator.getPropNumber(), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''WavelengthCalibrator'', category) does not work.')
	 
	% existsProp(prop)
	assert(~WavelengthCalibrator.existsProp(NaN), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.existsProp(prop) does not work.')
	assert(~wc.existsProp(NaN), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'wc.existsProp(prop) does not work.')
	assert(~Element.existsProp(wc, NaN), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(wc, prop) does not work.')
	assert(~Element.existsProp('WavelengthCalibrator', NaN), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''WavelengthCalibrator'', prop) does not work.')
	 
	assert_with_error('WavelengthCalibrator.existsProp(NaN)', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], wc)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], wc)
	assert_with_error('Element.existsProp(''WavelengthCalibrator'', NaN)', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		assert(WavelengthCalibrator.existsProp(prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.existsProp(prop) does not work.')
		assert(wc.existsProp(prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.existsProp(prop) does not work.')
		assert(Element.existsProp(wc, prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(wc, prop) does not work.')
		assert(Element.existsProp('WavelengthCalibrator', prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''WavelengthCalibrator'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~WavelengthCalibrator.existsTag(''), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.existsTag(tag) does not work.')
	assert(~wc.existsTag(''), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'wc.existsTag(tag) does not work.')
	assert(~Element.existsTag(wc, ''), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(wc, tag) does not work.')
	assert(~Element.existsTag('WavelengthCalibrator', ''), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''WavelengthCalibrator'', tag) does not work.')
	 
	assert_with_error('WavelengthCalibrator.existsTag('''')', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], wc)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], wc)
	assert_with_error('Element.existsTag(''WavelengthCalibrator'', '''')', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
		assert(WavelengthCalibrator.existsTag(tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.existsTag(tag) does not work.')
		assert(wc.existsTag(tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.existsTag(tag) does not work.')
		assert(Element.existsTag(wc, tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(wc, tga) does not work.')
		assert(Element.existsTag('WavelengthCalibrator', tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''WavelengthCalibrator'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		assert(WavelengthCalibrator.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropProp(prop) does not work.')
		assert(wc.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropProp(prop) does not work.')
		assert(Element.getPropProp(wc, prop) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(wc, prop) does not work.')
		assert(Element.getPropProp('WavelengthCalibrator', prop) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''WavelengthCalibrator'', prop) does not work.')
	 
		tag = wc.getPropTag(prop);
		assert(WavelengthCalibrator.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropProp(tag) does not work.')
		assert(wc.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropProp(tag) does not work.')
		assert(Element.getPropProp(wc, tag) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(wc, tag) does not work.')
		assert(Element.getPropProp('WavelengthCalibrator', prop) == prop, ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''WavelengthCalibrator'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		assert(strcmp(WavelengthCalibrator.getPropTag(prop), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropTag(prop) does not work.')
		assert(strcmp(wc.getPropTag(prop), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(wc, prop), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(wc, prop) does not work.')
		assert(strcmp(Element.getPropTag('WavelengthCalibrator', prop), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''WavelengthCalibrator'', prop) does not work.')
	 
		assert(strcmp(WavelengthCalibrator.getPropTag(tag), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropTag(tag) does not work.')
		assert(strcmp(wc.getPropTag(tag), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(wc, tag), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(wc, tag) does not work.')
		assert(strcmp(Element.getPropTag('WavelengthCalibrator', prop), tag), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''WavelengthCalibrator'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		assert(Category.existsCategory(WavelengthCalibrator.getPropCategory(prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(wc.getPropCategory(prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(wc, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(wc, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(wc, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''WavelengthCalibrator'', prop) does not work.')
	 
		assert(Category.existsCategory(WavelengthCalibrator.getPropCategory(tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(wc.getPropCategory(tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(wc, tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(wc, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(wc, tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''WavelengthCalibrator'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		assert(Format.existsFormat(WavelengthCalibrator.getPropFormat(prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(wc.getPropFormat(prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(wc, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(wc, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(wc, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''WavelengthCalibrator'', prop) does not work.')
	 
		assert(Format.existsFormat(WavelengthCalibrator.getPropFormat(tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(wc.getPropFormat(tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(wc, tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(wc, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(wc, tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''WavelengthCalibrator'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		assert(ischar(WavelengthCalibrator.getPropDescription(prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropDescription(prop) does not work.')
		assert(ischar(wc.getPropDescription(prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(wc, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(wc, prop) does not work.')
		assert(ischar(Element.getPropDescription(wc, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''WavelengthCalibrator'', prop) does not work.')
	 
		assert(ischar(WavelengthCalibrator.getPropDescription(tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.getPropDescription(tag) does not work.')
		assert(ischar(wc.getPropDescription(tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(wc, tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(wc, tag) does not work.')
		assert(ischar(Element.getPropDescription(wc, tag)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''WavelengthCalibrator'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		settings = WavelengthCalibrator.getPropSettings(prop);
		settings = wc.getPropSettings(prop);
		settings = Element.getPropSettings(wc, prop);
		settings = Element.getPropSettings('WavelengthCalibrator', prop);
	 
		settings = WavelengthCalibrator.getPropSettings(tag);
		settings = wc.getPropSettings(tag);
		settings = Element.getPropSettings(wc, tag);
		settings = Element.getPropSettings('WavelengthCalibrator', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		default = WavelengthCalibrator.getPropDefault(prop);
		default = wc.getPropDefault(prop);
		default = Element.getPropDefault(wc, prop);
		default = Element.getPropDefault('WavelengthCalibrator', prop);
	 
		default = WavelengthCalibrator.getPropDefault(tag);
		default = wc.getPropDefault(tag);
		default = Element.getPropDefault(wc, tag);
		default = Element.getPropDefault('WavelengthCalibrator', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		conditioned_default = WavelengthCalibrator.getPropDefaultConditioned(prop);
		conditioned_default = wc.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(wc, prop);
		conditioned_default = Element.getPropDefaultConditioned('WavelengthCalibrator', prop);
	 
		conditioned_default = WavelengthCalibrator.getPropDefaultConditioned(tag);
		conditioned_default = wc.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(wc, tag);
		conditioned_default = Element.getPropDefaultConditioned('WavelengthCalibrator', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		tag = wc.getPropTag(prop);
	 
		assert(~WavelengthCalibrator.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.checkProp(prop, value) does not work.')
		assert(~wc.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(wc, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(wc, prop, value) does not work.')
		assert(~Element.checkProp('WavelengthCalibrator', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''WavelengthCalibrator'', prop, value) does not work.')
	 
		assert_with_error('WavelengthCalibrator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], prop, wc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], prop, wc)
		assert_with_error('Element.checkProp(''WavelengthCalibrator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~WavelengthCalibrator.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.checkProp(tag, value) does not work.')
		assert(~wc.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(wc, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(wc, tag, value) does not work.')
		assert(~Element.checkProp('WavelengthCalibrator', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''WavelengthCalibrator'', tag, value) does not work.')
	 
		assert_with_error('WavelengthCalibrator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], tag, wc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], tag, wc)
		assert_with_error('Element.checkProp(''WavelengthCalibrator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(WavelengthCalibrator.checkProp(prop, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.checkProp(prop, <conditioned default value>) does not work.')
		assert(wc.checkProp(prop, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(wc, prop, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(wc, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('WavelengthCalibrator', prop, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''WavelengthCalibrator'', prop, <conditioned default value>) does not work.')
	 
		assert(WavelengthCalibrator.checkProp(tag, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.checkProp(tag, <conditioned default value>) does not work.')
		assert(wc.checkProp(tag, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'wc.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(wc, tag, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(wc, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('WavelengthCalibrator', tag, Element.getPropDefaultConditioned(WavelengthCalibrator, prop)), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''WavelengthCalibrator'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.TEMPLATE), ...
		WavelengthCalibrator.ID, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.ID), ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.RE_IN), ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.REPF), ...
		WavelengthCalibrator.PIXEL_1, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_1), ...
		WavelengthCalibrator.PIXEL_2, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_2), ...
		WavelengthCalibrator.PIXEL_3, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_3), ...
		WavelengthCalibrator.PIXEL_4, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_4) ...
		);
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
	 
		% excluded props
		if any(prop == [WavelengthCalibrator.TEMPLATE WavelengthCalibrator.REPF])
			continue
		end
	 
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					wc.getr(prop) == WavelengthCalibrator.getNoValue(), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['Being a ' WavelengthCalibrator.getCategoryName(WavelengthCalibrator.getPropCategory(prop)) ', WavelengthCalibrator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in WavelengthCalibrator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					wc.getr(TAG) == WavelengthCalibrator.getNoValue(), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['Being a ' WavelengthCalibrator.getCategoryName(WavelengthCalibrator.getPropCategory(prop)) ', WavelengthCalibrator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in WavelengthCalibrator.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(wc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(wc.getPropSettings(prop))
					assert( ...
						wc.checkFormat(wc.getPropFormat(prop), wc.get(prop)), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						wc.checkFormat(wc.getPropFormat(prop), wc.get(prop), wc.getPropSettings(prop)), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					wc.getr(prop) == WavelengthCalibrator.getNoValue(), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['Being a ' WavelengthCalibrator.getCategoryName(WavelengthCalibrator.getPropCategory(prop)) ', WavelengthCalibrator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in WavelengthCalibrator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					wc.getr(TAG) == WavelengthCalibrator.getNoValue(), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['Being a ' WavelengthCalibrator.getCategoryName(WavelengthCalibrator.getPropCategory(prop)) ', WavelengthCalibrator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in WavelengthCalibrator.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':WavelengthCalibrator']);
				assert( ...
					~isa(wc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(wc.getPropSettings(prop))
					assert( ...
						wc.checkFormat(wc.getPropFormat(prop), wc.get(prop)), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						wc.checkFormat(wc.getPropFormat(prop), wc.get(prop), wc.getPropSettings(prop)), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(wc.getr(prop), WavelengthCalibrator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by WavelengthCalibrator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in WavelengthCalibrator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(wc.getr(TAG), WavelengthCalibrator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' TAG ') must be inizialized to its default value ' ...
					'given by WavelengthCalibrator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in WavelengthCalibrator.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.TEMPLATE), ...
		WavelengthCalibrator.ID, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.ID), ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.RE_IN), ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.REPF), ...
		WavelengthCalibrator.PIXEL_1, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_1), ...
		WavelengthCalibrator.PIXEL_2, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_2), ...
		WavelengthCalibrator.PIXEL_3, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_3), ...
		WavelengthCalibrator.PIXEL_4, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_4) ...
		);
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
	 
		% excluded props
		if any(prop == [WavelengthCalibrator.TEMPLATE WavelengthCalibrator.REPF])
			continue
		end
	 
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		switch WavelengthCalibrator.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(wc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(wc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(wc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(wc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					wc.checkFormat(wc.getPropFormat(prop), wc.getr(prop),wc.getPropSettings(prop)), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':WavelengthCalibrator']);
				assert( ...
					~isa(wc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(wc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':WavelengthCalibrator']);
	% 			assert( ...
	% 				~isa(wc.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
	% 				['WavelengthCalibrator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(wc.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
	% 				['WavelengthCalibrator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				wc.checkFormat(wc.getPropFormat(prop), wc.getr(prop),wc.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
	% 				['WavelengthCalibrator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':WavelengthCalibrator']);
				assert( ...
					~isa(wc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(wc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(wc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(wc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					wc.checkFormat(wc.getPropFormat(prop), wc.getr(prop),wc.getPropSettings(prop)), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if wc.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:WavelengthCalibrator');
					delete(ancestor(wc.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(WavelengthCalibrator.getProps(Category.RESULT))
		for prop = 1:1:WavelengthCalibrator.getPropNumber()
	 
			% excluded props
			if any(prop == [WavelengthCalibrator.TEMPLATE WavelengthCalibrator.REPF])
				continue
			end
	 
			switch WavelengthCalibrator.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						wc.isLocked(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~wc.isLocked(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc = WavelengthCalibrator();
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		assert( ...
			~wc.isLocked(prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			['WavelengthCalibrator.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~wc.isLocked(TAG), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			['WavelengthCalibrator.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	wc.lock()
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					wc.isLocked(prop), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~wc.isLocked(prop), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc = WavelengthCalibrator();
	 
	warning_backup = warning('off', 'BRAPH2:WavelengthCalibrator');
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		wc.lock(prop)
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					wc.isLocked(prop), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~wc.isLocked(prop), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc = WavelengthCalibrator();
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		assert( ...
			wc.isChecked(prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			['WavelengthCalibrator.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			wc.isChecked(TAG), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			['WavelengthCalibrator.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	wc.unchecked()
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		assert( ...
			~wc.isChecked(prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			['WavelengthCalibrator.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	wc.checked()
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		assert( ...
			wc.isChecked(prop), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			['WavelengthCalibrator.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic WavelengthCalibrator
	wc_0 = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.TEMPLATE), ...
		WavelengthCalibrator.ID, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.ID), ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.RE_IN), ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.REPF), ...
		WavelengthCalibrator.PIXEL_1, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_1), ...
		WavelengthCalibrator.PIXEL_2, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_2), ...
		WavelengthCalibrator.PIXEL_3, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_3), ...
		WavelengthCalibrator.PIXEL_4, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_4) ...
		);
	 
	% WavelengthCalibrator with 1st callbacks
	wc_1 = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, wc_0.getCallback(4), ..., ...
		WavelengthCalibrator.ID, wc_0.getCallback(5), ..., ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, wc_0.getCallback(9), ..., ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, wc_0.getCallback(13), ..., ...
		WavelengthCalibrator.PIXEL_1, wc_0.getCallback(14), ..., ...
		WavelengthCalibrator.PIXEL_2, wc_0.getCallback(15), ..., ...
		WavelengthCalibrator.PIXEL_3, wc_0.getCallback(16), ..., ...
		WavelengthCalibrator.PIXEL_4, wc_0.getCallback(17) ... ...
		);
	 
	prop_number = WavelengthCalibrator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(wc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(wc_1.get(prop), wc_0.get(prop)) && ~isa(wc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(wc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% WavelengthCalibrator with 2nd callbacks
	wc_2 = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, wc_1.getCallback(4), ..., ...
		WavelengthCalibrator.ID, wc_1.getCallback(5), ..., ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, wc_1.getCallback(9), ..., ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, wc_1.getCallback(13), ..., ...
		WavelengthCalibrator.PIXEL_1, wc_1.getCallback(14), ..., ...
		WavelengthCalibrator.PIXEL_2, wc_1.getCallback(15), ..., ...
		WavelengthCalibrator.PIXEL_3, wc_1.getCallback(16), ..., ...
		WavelengthCalibrator.PIXEL_4, wc_1.getCallback(17) ... ...
		);
	 
	prop_number = WavelengthCalibrator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(wc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(wc_2.get(prop), wc_0.get(prop)) && ~isa(wc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(wc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% WavelengthCalibrator with 3rd callbacks
	wc_3 = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, wc_2.getCallback(4), ..., ...
		WavelengthCalibrator.ID, wc_2.getCallback(5), ..., ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, wc_2.getCallback(9), ..., ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, wc_2.getCallback(13), ..., ...
		WavelengthCalibrator.PIXEL_1, wc_2.getCallback(14), ..., ...
		WavelengthCalibrator.PIXEL_2, wc_2.getCallback(15), ..., ...
		WavelengthCalibrator.PIXEL_3, wc_2.getCallback(16), ..., ...
		WavelengthCalibrator.PIXEL_4, wc_2.getCallback(17) ... ...
		);
	 
	prop_number = WavelengthCalibrator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(wc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(wc_3.get(prop), wc_0.get(prop)) && ~isa(wc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(wc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	wc = WavelengthCalibrator();
	 
	wc_copy = wc.copy();
	 
	assert(wc_copy ~= wc, ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(wc_copy, wc), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		value = wc.getr(prop);
		value_copy = wc_copy.getr(prop);
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					'WavelengthCalibrator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
							'WavelengthCalibrator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
							'WavelengthCalibrator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					wc_copy.isLocked(prop) == wc.isLocked(prop), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					'WavelengthCalibrator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					wc_copy.isChecked(prop) == wc.isChecked(prop), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					'WavelengthCalibrator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					wc_copy.getPropSeed(prop) == wc.getPropSeed(prop), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					'WavelengthCalibrator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	wc = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.TEMPLATE), ...
		WavelengthCalibrator.ID, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.ID), ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.RE_IN), ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.REPF), ...
		WavelengthCalibrator.PIXEL_1, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_1), ...
		WavelengthCalibrator.PIXEL_2, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_2), ...
		WavelengthCalibrator.PIXEL_3, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_3), ...
		WavelengthCalibrator.PIXEL_4, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_4) ...
		);
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		if WavelengthCalibrator.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':WavelengthCalibrator']);
			% wc.memorize(prop);
			% warning(warning_backup)
		elseif WavelengthCalibrator.getPropCategory(prop) == Category.EVANESCENT && wc.getPropFormat(prop) == Format.HANDLE
			wc.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:WavelengthCalibrator');
			delete(ancestor(wc.get(prop), 'figure'))
			warning(warning_backup)
		else
			wc.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	wc_copy = wc.copy();
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		value = wc.getr(prop);
		value_copy = wc_copy.getr(prop);
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					'WavelengthCalibrator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
							'WavelengthCalibrator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
							'WavelengthCalibrator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						wc_copy.isLocked(prop) == wc.isLocked(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						wc_copy.isChecked(prop) == wc.isChecked(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						wc_copy.getPropSeed(prop) == wc.getPropSeed(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	wc_0 = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.TEMPLATE), ...
		WavelengthCalibrator.ID, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.ID), ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.RE_IN), ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.REPF), ...
		WavelengthCalibrator.PIXEL_1, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_1), ...
		WavelengthCalibrator.PIXEL_2, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_2), ...
		WavelengthCalibrator.PIXEL_3, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_3), ...
		WavelengthCalibrator.PIXEL_4, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_4) ...
		);
	 
	wc = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, wc_0.getCallback(4), ..., ...
		WavelengthCalibrator.ID, wc_0.getCallback(5), ..., ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, wc_0.getCallback(9), ..., ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, wc_0.getCallback(13), ..., ...
		WavelengthCalibrator.PIXEL_1, wc_0.getCallback(14), ..., ...
		WavelengthCalibrator.PIXEL_2, wc_0.getCallback(15), ..., ...
		WavelengthCalibrator.PIXEL_3, wc_0.getCallback(16), ..., ...
		WavelengthCalibrator.PIXEL_4, wc_0.getCallback(17) ... ...
		);
	 
	wc_copy = wc.copy();
	wc_0_copy = wc_copy.getr('ID').get('EL');
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
		value = wc.getr(prop);
		value_copy = wc_copy.getr(prop);
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					'WavelengthCalibrator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
							'WavelengthCalibrator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
							'WavelengthCalibrator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == wc_0.getCallback(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The callback should be obtained from WavelengthCalibrator.getCallback().' ...
						)
					assert( ...
						value_copy == wc_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The callback should be obtained from WavelengthCalibrator.getCallback().' ...
						)
				end
	 
					assert( ...
						wc_copy.isLocked(prop) == wc.isLocked(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						wc_copy.isChecked(prop) == wc.isChecked(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						wc_copy.getPropSeed(prop) == wc.getPropSeed(prop), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc_template = WavelengthCalibrator();
	wc = WavelengthCalibrator('TEMPLATE', wc_template);
	 
	for prop = 1:1:WavelengthCalibrator.getPropNumber()
	 
		% excluded props
		if any(prop == [WavelengthCalibrator.TEMPLATE WavelengthCalibrator.REPF])
			continue
		end
	 
		TAG = upper(WavelengthCalibrator.getPropTag(prop));
		switch WavelengthCalibrator.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == WavelengthCalibrator.TEMPLATE
					assert( ...
						isa(wc.getr(prop), 'WavelengthCalibrator'), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator TEMPLATE does not work. WavelengthCalibrator.getr(''TEMPLATE'') should be a WavelengthCalibrator element.' ...
						)
					assert( ...
						isa(wc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						'WavelengthCalibrator TEMPLATE does not work. WavelengthCalibrator_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(wc.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator TEMPLATE does not work. WavelengthCalibrator.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						wc.getr(prop).get('EL') == wc_template && wc.getr(prop).get('PROP') == prop && strcmp(wc.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator TEMPLATE does not work. WavelengthCalibrator.getr(' TAG ') should be a Callback to wc_template.' TAG '.'] ...
						)
					assert( ...
						isa(wc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
						['WavelengthCalibrator TEMPLATE does not work. WavelengthCalibrator_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(wc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator TEMPLATE does not work. WavelengthCalibrator.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(wc_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
					['WavelengthCalibrator TEMPLATE does not work. WavelengthCalibrator_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.TEMPLATE), ...
		WavelengthCalibrator.ID, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.ID), ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.RE_IN), ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.REPF), ...
		WavelengthCalibrator.PIXEL_1, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_1), ...
		WavelengthCalibrator.PIXEL_2, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_2), ...
		WavelengthCalibrator.PIXEL_3, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_3), ...
		WavelengthCalibrator.PIXEL_4, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_4) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'wavelengthcalibrator_to_be_erased.b2'];
	 
	Element.save(wc, filename)
	 
	wc_loaded = Element.load(filename);
	 
	assert( ...
		isequal(wc.copy(), wc_loaded), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.save(wc) and/or WavelengthCalibrator.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	wc = WavelengthCalibrator( ...
		WavelengthCalibrator.ELCLASS, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.NAME, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.DESCRIPTION, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.TEMPLATE, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.TEMPLATE), ...
		WavelengthCalibrator.ID, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.ID), ...
		WavelengthCalibrator.LABEL, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.LABEL), ...
		WavelengthCalibrator.NOTES, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.NOTES), ...
		WavelengthCalibrator.TOSTRING, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_IN, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.RE_IN), ...
		WavelengthCalibrator.SP_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.SP_DICT_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.RE_OUT, WavelengthCalibrator.getNoValue(), ...
		WavelengthCalibrator.REPF, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.REPF), ...
		WavelengthCalibrator.PIXEL_1, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_1), ...
		WavelengthCalibrator.PIXEL_2, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_2), ...
		WavelengthCalibrator.PIXEL_3, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_3), ...
		WavelengthCalibrator.PIXEL_4, WavelengthCalibrator.getPropDefault(WavelengthCalibrator.PIXEL_4) ...
		);
	 
	[json, struct, el_list] = encodeJSON(wc);
	[wc_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(wc_dec ~= wc, ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		'WavelengthCalibrator.encodeJSON() or WavelengthCalibrator.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) WavelengthCalibrator.getPropFormat(prop), num2cell(WavelengthCalibrator.getProps())) == Format.HANDLE) && all(cellfun(@(prop) WavelengthCalibrator.getPropFormat(prop), num2cell(WavelengthCalibrator.getProps())) == Format.NET)
		assert(isequal(wc_dec, wc), ...
			[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
			'WavelengthCalibrator.encodeJSON() or WavelengthCalibrator.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':WavelengthCalibrator:' BRAPH2.FAIL_TEST], ...
		[' When testing WavelengthCalibrator no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

