%TEST_RAMANEXPERIMENT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	re = RamanExperiment();
	 
	% get('ELCLASS')
	if isa(RamanExperiment, 'ConcreteElement')
		assert(strcmp(RamanExperiment().get('ELCLASS'), 'RamanExperiment'), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment().get(''ELCLASS'') should return ''RamanExperiment''.')
	end
	 
	% getClass
	assert(strcmp(RamanExperiment.getClass(), 'RamanExperiment'), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.getClass() should return ''RamanExperiment''.')
	assert(strcmp(re.getClass(), 'RamanExperiment'), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		're.getClass() should return ''RamanExperiment''.')
	assert(strcmp(Element.getClass(re), 'RamanExperiment'), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(re) should return ''RamanExperiment''.')
	assert(strcmp(Element.getClass('RamanExperiment'), 'RamanExperiment'), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''RamanExperiment'') should return ''RamanExperiment''.')
	 
	% getSubclasses()
	assert(isequal(RamanExperiment.getSubclasses(), subclasses('RamanExperiment', [], [], true)), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.getSubclasses() should return the same result as subclasses(''RamanExperiment'', [], [], true).')
	assert(isequal(re.getSubclasses(), subclasses('RamanExperiment', [], [], true)), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''RamanExperiment'', [], [], true).')
	assert(isequal(Element.getSubclasses(re), subclasses('RamanExperiment', [], [], true)), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(re) should return the same result as subclasses(''RamanExperiment'', [], [], true).')
	assert(isequal(Element.getSubclasses('RamanExperiment'), subclasses('RamanExperiment', [], [], true)), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''RamanExperiment'') should return the same result as subclasses(''RamanExperiment'', [], [], true).')
	 
	% getProps()
	assert(isempty(RamanExperiment.getProps()) || isequal(RamanExperiment.getProps(), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.getProps() should return a row vector [1:1:N].')
	assert(isempty(RamanExperiment.getProps()) || isequal(re.getProps(), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		're.getProps() should return a row vector [1:1:N].')
	assert(isempty(RamanExperiment.getProps()) || isequal(Element.getProps(re), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(re) should return a row vector [1:1:N].')
	assert(isempty(RamanExperiment.getProps()) || isequal(Element.getProps('RamanExperiment'), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''RamanExperiment'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) RamanExperiment.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(RamanExperiment.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.getProps(category) does not work.')
	tmp = cellfun(@(category) re.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(RamanExperiment.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		're.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(re, category), categories, 'UniformOutput', false);
	assert(isempty(RamanExperiment.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(re, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('RamanExperiment', category), categories, 'UniformOutput', false);
	assert(isempty(RamanExperiment.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(RamanExperiment.getProps())), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''RamanExperiment'', category) does not work.')
	 
	% getPropNumber()
	assert(RamanExperiment.getPropNumber() == length(RamanExperiment.getProps()), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.getPropNumber() should return the number of properties.')
	assert(re.getPropNumber() == length(RamanExperiment.getProps()), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		're.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(re) == length(RamanExperiment.getProps()), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(re) should return the number of properties.')
	assert(Element.getPropNumber('RamanExperiment') == length(RamanExperiment.getProps()), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''RamanExperiment'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) RamanExperiment.getPropNumber(category), categories)) == RamanExperiment.getPropNumber(), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) re.getPropNumber(category), categories)) == RamanExperiment.getPropNumber(), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		're.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(re, category), categories)) == RamanExperiment.getPropNumber(), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(re, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('RamanExperiment', category), categories)) == RamanExperiment.getPropNumber(), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''RamanExperiment'', category) does not work.')
	 
	% existsProp(prop)
	assert(~RamanExperiment.existsProp(NaN), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.existsProp(prop) does not work.')
	assert(~re.existsProp(NaN), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		're.existsProp(prop) does not work.')
	assert(~Element.existsProp(re, NaN), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(re, prop) does not work.')
	assert(~Element.existsProp('RamanExperiment', NaN), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''RamanExperiment'', prop) does not work.')
	 
	assert_with_error('RamanExperiment.existsProp(NaN)', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], re)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], re)
	assert_with_error('Element.existsProp(''RamanExperiment'', NaN)', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		assert(RamanExperiment.existsProp(prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.existsProp(prop) does not work.')
		assert(re.existsProp(prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.existsProp(prop) does not work.')
		assert(Element.existsProp(re, prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(re, prop) does not work.')
		assert(Element.existsProp('RamanExperiment', prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''RamanExperiment'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~RamanExperiment.existsTag(''), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.existsTag(tag) does not work.')
	assert(~re.existsTag(''), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		're.existsTag(tag) does not work.')
	assert(~Element.existsTag(re, ''), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(re, tag) does not work.')
	assert(~Element.existsTag('RamanExperiment', ''), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''RamanExperiment'', tag) does not work.')
	 
	assert_with_error('RamanExperiment.existsTag('''')', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], re)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], re)
	assert_with_error('Element.existsTag(''RamanExperiment'', '''')', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
		assert(RamanExperiment.existsTag(tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.existsTag(tag) does not work.')
		assert(re.existsTag(tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.existsTag(tag) does not work.')
		assert(Element.existsTag(re, tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(re, tga) does not work.')
		assert(Element.existsTag('RamanExperiment', tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''RamanExperiment'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		assert(RamanExperiment.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropProp(prop) does not work.')
		assert(re.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropProp(prop) does not work.')
		assert(Element.getPropProp(re, prop) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(re, prop) does not work.')
		assert(Element.getPropProp('RamanExperiment', prop) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''RamanExperiment'', prop) does not work.')
	 
		tag = re.getPropTag(prop);
		assert(RamanExperiment.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropProp(tag) does not work.')
		assert(re.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropProp(tag) does not work.')
		assert(Element.getPropProp(re, tag) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(re, tag) does not work.')
		assert(Element.getPropProp('RamanExperiment', prop) == prop, ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''RamanExperiment'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		assert(strcmp(RamanExperiment.getPropTag(prop), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropTag(prop) does not work.')
		assert(strcmp(re.getPropTag(prop), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(re, prop), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(re, prop) does not work.')
		assert(strcmp(Element.getPropTag('RamanExperiment', prop), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''RamanExperiment'', prop) does not work.')
	 
		assert(strcmp(RamanExperiment.getPropTag(tag), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropTag(tag) does not work.')
		assert(strcmp(re.getPropTag(tag), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(re, tag), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(re, tag) does not work.')
		assert(strcmp(Element.getPropTag('RamanExperiment', prop), tag), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''RamanExperiment'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		assert(Category.existsCategory(RamanExperiment.getPropCategory(prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(re.getPropCategory(prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(re, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(re, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(re, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''RamanExperiment'', prop) does not work.')
	 
		assert(Category.existsCategory(RamanExperiment.getPropCategory(tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(re.getPropCategory(tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(re, tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(re, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(re, tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''RamanExperiment'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		assert(Format.existsFormat(RamanExperiment.getPropFormat(prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(re.getPropFormat(prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(re, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(re, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(re, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''RamanExperiment'', prop) does not work.')
	 
		assert(Format.existsFormat(RamanExperiment.getPropFormat(tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(re.getPropFormat(tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(re, tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(re, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(re, tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''RamanExperiment'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		assert(ischar(RamanExperiment.getPropDescription(prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropDescription(prop) does not work.')
		assert(ischar(re.getPropDescription(prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(re, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(re, prop) does not work.')
		assert(ischar(Element.getPropDescription(re, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''RamanExperiment'', prop) does not work.')
	 
		assert(ischar(RamanExperiment.getPropDescription(tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.getPropDescription(tag) does not work.')
		assert(ischar(re.getPropDescription(tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(re, tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(re, tag) does not work.')
		assert(ischar(Element.getPropDescription(re, tag)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''RamanExperiment'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		settings = RamanExperiment.getPropSettings(prop);
		settings = re.getPropSettings(prop);
		settings = Element.getPropSettings(re, prop);
		settings = Element.getPropSettings('RamanExperiment', prop);
	 
		settings = RamanExperiment.getPropSettings(tag);
		settings = re.getPropSettings(tag);
		settings = Element.getPropSettings(re, tag);
		settings = Element.getPropSettings('RamanExperiment', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		default = RamanExperiment.getPropDefault(prop);
		default = re.getPropDefault(prop);
		default = Element.getPropDefault(re, prop);
		default = Element.getPropDefault('RamanExperiment', prop);
	 
		default = RamanExperiment.getPropDefault(tag);
		default = re.getPropDefault(tag);
		default = Element.getPropDefault(re, tag);
		default = Element.getPropDefault('RamanExperiment', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		conditioned_default = RamanExperiment.getPropDefaultConditioned(prop);
		conditioned_default = re.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(re, prop);
		conditioned_default = Element.getPropDefaultConditioned('RamanExperiment', prop);
	 
		conditioned_default = RamanExperiment.getPropDefaultConditioned(tag);
		conditioned_default = re.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(re, tag);
		conditioned_default = Element.getPropDefaultConditioned('RamanExperiment', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:RamanExperiment.getPropNumber()
		tag = re.getPropTag(prop);
	 
		assert(~RamanExperiment.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.checkProp(prop, value) does not work.')
		assert(~re.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(re, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(re, prop, value) does not work.')
		assert(~Element.checkProp('RamanExperiment', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''RamanExperiment'', prop, value) does not work.')
	 
		assert_with_error('RamanExperiment.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], prop, re)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], prop, re)
		assert_with_error('Element.checkProp(''RamanExperiment'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~RamanExperiment.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.checkProp(tag, value) does not work.')
		assert(~re.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(re, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(re, tag, value) does not work.')
		assert(~Element.checkProp('RamanExperiment', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''RamanExperiment'', tag, value) does not work.')
	 
		assert_with_error('RamanExperiment.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], tag, re)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], tag, re)
		assert_with_error('Element.checkProp(''RamanExperiment'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':RamanExperiment:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(RamanExperiment.checkProp(prop, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.checkProp(prop, <conditioned default value>) does not work.')
		assert(re.checkProp(prop, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(re, prop, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(re, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('RamanExperiment', prop, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''RamanExperiment'', prop, <conditioned default value>) does not work.')
	 
		assert(RamanExperiment.checkProp(tag, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.checkProp(tag, <conditioned default value>) does not work.')
		assert(re.checkProp(tag, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			're.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(re, tag, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(re, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('RamanExperiment', tag, Element.getPropDefaultConditioned(RamanExperiment, prop)), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''RamanExperiment'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, RamanExperiment.getPropDefault(RamanExperiment.TEMPLATE), ...
		RamanExperiment.ID, RamanExperiment.getPropDefault(RamanExperiment.ID), ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, RamanExperiment.getPropDefault(RamanExperiment.SP_DICT), ...
		RamanExperiment.RESEARCHER, RamanExperiment.getPropDefault(RamanExperiment.RESEARCHER), ...
		RamanExperiment.DATE, RamanExperiment.getPropDefault(RamanExperiment.DATE), ...
		RamanExperiment.PLANT_NAME, RamanExperiment.getPropDefault(RamanExperiment.PLANT_NAME), ...
		RamanExperiment.PLANT_TYPE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE), ...
		RamanExperiment.PLANT_TYPE_COMMENT, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE_COMMENT), ...
		RamanExperiment.PLANT_AGE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_AGE), ...
		RamanExperiment.LEAF_NUMBER, RamanExperiment.getPropDefault(RamanExperiment.LEAF_NUMBER), ...
		RamanExperiment.GROWTH_MEDIUM, RamanExperiment.getPropDefault(RamanExperiment.GROWTH_MEDIUM), ...
		RamanExperiment.STRESS_TYPE, RamanExperiment.getPropDefault(RamanExperiment.STRESS_TYPE), ...
		RamanExperiment.SETUP, RamanExperiment.getPropDefault(RamanExperiment.SETUP), ...
		RamanExperiment.LASER_WAVELENGTH, RamanExperiment.getPropDefault(RamanExperiment.LASER_WAVELENGTH), ...
		RamanExperiment.LASER_POWER, RamanExperiment.getPropDefault(RamanExperiment.LASER_POWER), ...
		RamanExperiment.ACQUISITION_TIME, RamanExperiment.getPropDefault(RamanExperiment.ACQUISITION_TIME) ...
		);
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(RamanExperiment.getPropTag(prop));
		switch RamanExperiment.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					re.getr(prop) == RamanExperiment.getNoValue(), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['Being a ' RamanExperiment.getCategoryName(RamanExperiment.getPropCategory(prop)) ', RamanExperiment.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in RamanExperiment.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					re.getr(TAG) == RamanExperiment.getNoValue(), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['Being a ' RamanExperiment.getCategoryName(RamanExperiment.getPropCategory(prop)) ', RamanExperiment.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in RamanExperiment.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(re.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(re.getPropSettings(prop))
					assert( ...
						re.checkFormat(re.getPropFormat(prop), re.get(prop)), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						re.checkFormat(re.getPropFormat(prop), re.get(prop), re.getPropSettings(prop)), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					re.getr(prop) == RamanExperiment.getNoValue(), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['Being a ' RamanExperiment.getCategoryName(RamanExperiment.getPropCategory(prop)) ', RamanExperiment.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in RamanExperiment.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					re.getr(TAG) == RamanExperiment.getNoValue(), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['Being a ' RamanExperiment.getCategoryName(RamanExperiment.getPropCategory(prop)) ', RamanExperiment.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in RamanExperiment.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':RamanExperiment']);
				assert( ...
					~isa(re.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(re.getPropSettings(prop))
					assert( ...
						re.checkFormat(re.getPropFormat(prop), re.get(prop)), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						re.checkFormat(re.getPropFormat(prop), re.get(prop), re.getPropSettings(prop)), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(re.getr(prop), RamanExperiment.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by RamanExperiment.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in RamanExperiment.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(re.getr(TAG), RamanExperiment.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' TAG ') must be inizialized to its default value ' ...
					'given by RamanExperiment.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in RamanExperiment.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, RamanExperiment.getPropDefault(RamanExperiment.TEMPLATE), ...
		RamanExperiment.ID, RamanExperiment.getPropDefault(RamanExperiment.ID), ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, RamanExperiment.getPropDefault(RamanExperiment.SP_DICT), ...
		RamanExperiment.RESEARCHER, RamanExperiment.getPropDefault(RamanExperiment.RESEARCHER), ...
		RamanExperiment.DATE, RamanExperiment.getPropDefault(RamanExperiment.DATE), ...
		RamanExperiment.PLANT_NAME, RamanExperiment.getPropDefault(RamanExperiment.PLANT_NAME), ...
		RamanExperiment.PLANT_TYPE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE), ...
		RamanExperiment.PLANT_TYPE_COMMENT, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE_COMMENT), ...
		RamanExperiment.PLANT_AGE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_AGE), ...
		RamanExperiment.LEAF_NUMBER, RamanExperiment.getPropDefault(RamanExperiment.LEAF_NUMBER), ...
		RamanExperiment.GROWTH_MEDIUM, RamanExperiment.getPropDefault(RamanExperiment.GROWTH_MEDIUM), ...
		RamanExperiment.STRESS_TYPE, RamanExperiment.getPropDefault(RamanExperiment.STRESS_TYPE), ...
		RamanExperiment.SETUP, RamanExperiment.getPropDefault(RamanExperiment.SETUP), ...
		RamanExperiment.LASER_WAVELENGTH, RamanExperiment.getPropDefault(RamanExperiment.LASER_WAVELENGTH), ...
		RamanExperiment.LASER_POWER, RamanExperiment.getPropDefault(RamanExperiment.LASER_POWER), ...
		RamanExperiment.ACQUISITION_TIME, RamanExperiment.getPropDefault(RamanExperiment.ACQUISITION_TIME) ...
		);
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(RamanExperiment.getPropTag(prop));
		switch RamanExperiment.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(re.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(re.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(re.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(re.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					re.checkFormat(re.getPropFormat(prop), re.getr(prop),re.getPropSettings(prop)), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':RamanExperiment']);
				assert( ...
					~isa(re.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(re.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':RamanExperiment']);
	% 			assert( ...
	% 				~isa(re.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
	% 				['RamanExperiment.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(re.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
	% 				['RamanExperiment.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				re.checkFormat(re.getPropFormat(prop), re.getr(prop),re.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
	% 				['RamanExperiment.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':RamanExperiment']);
				assert( ...
					~isa(re.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(re.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(re.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(re.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					re.checkFormat(re.getPropFormat(prop), re.getr(prop),re.getPropSettings(prop)), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if re.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:RamanExperiment');
					delete(ancestor(re.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(RamanExperiment.getProps(Category.RESULT))
		for prop = 1:1:RamanExperiment.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch RamanExperiment.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						re.isLocked(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~re.isLocked(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re = RamanExperiment();
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		TAG = upper(RamanExperiment.getPropTag(prop));
		assert( ...
			~re.isLocked(prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			['RamanExperiment.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~re.isLocked(TAG), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			['RamanExperiment.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	re.lock()
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		switch RamanExperiment.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					re.isLocked(prop), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~re.isLocked(prop), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re = RamanExperiment();
	 
	warning_backup = warning('off', 'BRAPH2:RamanExperiment');
	for prop = 1:1:RamanExperiment.getPropNumber()
		re.lock(prop)
		switch RamanExperiment.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					re.isLocked(prop), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~re.isLocked(prop), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re = RamanExperiment();
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		TAG = upper(RamanExperiment.getPropTag(prop));
		assert( ...
			re.isChecked(prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			['RamanExperiment.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			re.isChecked(TAG), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			['RamanExperiment.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	re.unchecked()
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		assert( ...
			~re.isChecked(prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			['RamanExperiment.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	re.checked()
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		assert( ...
			re.isChecked(prop), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			['RamanExperiment.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic RamanExperiment
	re_0 = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, RamanExperiment.getPropDefault(RamanExperiment.TEMPLATE), ...
		RamanExperiment.ID, RamanExperiment.getPropDefault(RamanExperiment.ID), ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, RamanExperiment.getPropDefault(RamanExperiment.SP_DICT), ...
		RamanExperiment.RESEARCHER, RamanExperiment.getPropDefault(RamanExperiment.RESEARCHER), ...
		RamanExperiment.DATE, RamanExperiment.getPropDefault(RamanExperiment.DATE), ...
		RamanExperiment.PLANT_NAME, RamanExperiment.getPropDefault(RamanExperiment.PLANT_NAME), ...
		RamanExperiment.PLANT_TYPE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE), ...
		RamanExperiment.PLANT_TYPE_COMMENT, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE_COMMENT), ...
		RamanExperiment.PLANT_AGE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_AGE), ...
		RamanExperiment.LEAF_NUMBER, RamanExperiment.getPropDefault(RamanExperiment.LEAF_NUMBER), ...
		RamanExperiment.GROWTH_MEDIUM, RamanExperiment.getPropDefault(RamanExperiment.GROWTH_MEDIUM), ...
		RamanExperiment.STRESS_TYPE, RamanExperiment.getPropDefault(RamanExperiment.STRESS_TYPE), ...
		RamanExperiment.SETUP, RamanExperiment.getPropDefault(RamanExperiment.SETUP), ...
		RamanExperiment.LASER_WAVELENGTH, RamanExperiment.getPropDefault(RamanExperiment.LASER_WAVELENGTH), ...
		RamanExperiment.LASER_POWER, RamanExperiment.getPropDefault(RamanExperiment.LASER_POWER), ...
		RamanExperiment.ACQUISITION_TIME, RamanExperiment.getPropDefault(RamanExperiment.ACQUISITION_TIME) ...
		);
	 
	% RamanExperiment with 1st callbacks
	re_1 = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, re_0.getCallback(4), ..., ...
		RamanExperiment.ID, re_0.getCallback(5), ..., ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, re_0.getCallback(9), ..., ...
		RamanExperiment.RESEARCHER, re_0.getCallback(10), ..., ...
		RamanExperiment.DATE, re_0.getCallback(11), ..., ...
		RamanExperiment.PLANT_NAME, re_0.getCallback(12), ..., ...
		RamanExperiment.PLANT_TYPE, re_0.getCallback(13), ..., ...
		RamanExperiment.PLANT_TYPE_COMMENT, re_0.getCallback(14), ..., ...
		RamanExperiment.PLANT_AGE, re_0.getCallback(15), ..., ...
		RamanExperiment.LEAF_NUMBER, re_0.getCallback(16), ..., ...
		RamanExperiment.GROWTH_MEDIUM, re_0.getCallback(17), ..., ...
		RamanExperiment.STRESS_TYPE, re_0.getCallback(18), ..., ...
		RamanExperiment.SETUP, re_0.getCallback(19), ..., ...
		RamanExperiment.LASER_WAVELENGTH, re_0.getCallback(20), ..., ...
		RamanExperiment.LASER_POWER, re_0.getCallback(21), ..., ...
		RamanExperiment.ACQUISITION_TIME, re_0.getCallback(22) ... ...
		);
	 
	prop_number = RamanExperiment.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(RamanExperiment.getPropTag(prop));
		switch RamanExperiment.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(re_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(re_1.get(prop), re_0.get(prop)) && ~isa(re_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(re_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% RamanExperiment with 2nd callbacks
	re_2 = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, re_1.getCallback(4), ..., ...
		RamanExperiment.ID, re_1.getCallback(5), ..., ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, re_1.getCallback(9), ..., ...
		RamanExperiment.RESEARCHER, re_1.getCallback(10), ..., ...
		RamanExperiment.DATE, re_1.getCallback(11), ..., ...
		RamanExperiment.PLANT_NAME, re_1.getCallback(12), ..., ...
		RamanExperiment.PLANT_TYPE, re_1.getCallback(13), ..., ...
		RamanExperiment.PLANT_TYPE_COMMENT, re_1.getCallback(14), ..., ...
		RamanExperiment.PLANT_AGE, re_1.getCallback(15), ..., ...
		RamanExperiment.LEAF_NUMBER, re_1.getCallback(16), ..., ...
		RamanExperiment.GROWTH_MEDIUM, re_1.getCallback(17), ..., ...
		RamanExperiment.STRESS_TYPE, re_1.getCallback(18), ..., ...
		RamanExperiment.SETUP, re_1.getCallback(19), ..., ...
		RamanExperiment.LASER_WAVELENGTH, re_1.getCallback(20), ..., ...
		RamanExperiment.LASER_POWER, re_1.getCallback(21), ..., ...
		RamanExperiment.ACQUISITION_TIME, re_1.getCallback(22) ... ...
		);
	 
	prop_number = RamanExperiment.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(RamanExperiment.getPropTag(prop));
		switch RamanExperiment.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(re_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(re_2.get(prop), re_0.get(prop)) && ~isa(re_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(re_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% RamanExperiment with 3rd callbacks
	re_3 = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, re_2.getCallback(4), ..., ...
		RamanExperiment.ID, re_2.getCallback(5), ..., ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, re_2.getCallback(9), ..., ...
		RamanExperiment.RESEARCHER, re_2.getCallback(10), ..., ...
		RamanExperiment.DATE, re_2.getCallback(11), ..., ...
		RamanExperiment.PLANT_NAME, re_2.getCallback(12), ..., ...
		RamanExperiment.PLANT_TYPE, re_2.getCallback(13), ..., ...
		RamanExperiment.PLANT_TYPE_COMMENT, re_2.getCallback(14), ..., ...
		RamanExperiment.PLANT_AGE, re_2.getCallback(15), ..., ...
		RamanExperiment.LEAF_NUMBER, re_2.getCallback(16), ..., ...
		RamanExperiment.GROWTH_MEDIUM, re_2.getCallback(17), ..., ...
		RamanExperiment.STRESS_TYPE, re_2.getCallback(18), ..., ...
		RamanExperiment.SETUP, re_2.getCallback(19), ..., ...
		RamanExperiment.LASER_WAVELENGTH, re_2.getCallback(20), ..., ...
		RamanExperiment.LASER_POWER, re_2.getCallback(21), ..., ...
		RamanExperiment.ACQUISITION_TIME, re_2.getCallback(22) ... ...
		);
	 
	prop_number = RamanExperiment.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(RamanExperiment.getPropTag(prop));
		switch RamanExperiment.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(re_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(re_3.get(prop), re_0.get(prop)) && ~isa(re_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(re_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	re = RamanExperiment();
	 
	re_copy = re.copy();
	 
	assert(re_copy ~= re, ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(re_copy, re), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		value = re.getr(prop);
		value_copy = re_copy.getr(prop);
		switch RamanExperiment.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					'RamanExperiment.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
							'RamanExperiment.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
							'RamanExperiment.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					re_copy.isLocked(prop) == re.isLocked(prop), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					'RamanExperiment.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					re_copy.isChecked(prop) == re.isChecked(prop), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					'RamanExperiment.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					re_copy.getPropSeed(prop) == re.getPropSeed(prop), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					'RamanExperiment.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	re = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, RamanExperiment.getPropDefault(RamanExperiment.TEMPLATE), ...
		RamanExperiment.ID, RamanExperiment.getPropDefault(RamanExperiment.ID), ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, RamanExperiment.getPropDefault(RamanExperiment.SP_DICT), ...
		RamanExperiment.RESEARCHER, RamanExperiment.getPropDefault(RamanExperiment.RESEARCHER), ...
		RamanExperiment.DATE, RamanExperiment.getPropDefault(RamanExperiment.DATE), ...
		RamanExperiment.PLANT_NAME, RamanExperiment.getPropDefault(RamanExperiment.PLANT_NAME), ...
		RamanExperiment.PLANT_TYPE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE), ...
		RamanExperiment.PLANT_TYPE_COMMENT, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE_COMMENT), ...
		RamanExperiment.PLANT_AGE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_AGE), ...
		RamanExperiment.LEAF_NUMBER, RamanExperiment.getPropDefault(RamanExperiment.LEAF_NUMBER), ...
		RamanExperiment.GROWTH_MEDIUM, RamanExperiment.getPropDefault(RamanExperiment.GROWTH_MEDIUM), ...
		RamanExperiment.STRESS_TYPE, RamanExperiment.getPropDefault(RamanExperiment.STRESS_TYPE), ...
		RamanExperiment.SETUP, RamanExperiment.getPropDefault(RamanExperiment.SETUP), ...
		RamanExperiment.LASER_WAVELENGTH, RamanExperiment.getPropDefault(RamanExperiment.LASER_WAVELENGTH), ...
		RamanExperiment.LASER_POWER, RamanExperiment.getPropDefault(RamanExperiment.LASER_POWER), ...
		RamanExperiment.ACQUISITION_TIME, RamanExperiment.getPropDefault(RamanExperiment.ACQUISITION_TIME) ...
		);
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		if RamanExperiment.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':RamanExperiment']);
			% re.memorize(prop);
			% warning(warning_backup)
		elseif RamanExperiment.getPropCategory(prop) == Category.EVANESCENT && re.getPropFormat(prop) == Format.HANDLE
			re.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:RamanExperiment');
			delete(ancestor(re.get(prop), 'figure'))
			warning(warning_backup)
		else
			re.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	re_copy = re.copy();
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		value = re.getr(prop);
		value_copy = re_copy.getr(prop);
		switch RamanExperiment.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					'RamanExperiment.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
							'RamanExperiment.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
							'RamanExperiment.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						re_copy.isLocked(prop) == re.isLocked(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						re_copy.isChecked(prop) == re.isChecked(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						re_copy.getPropSeed(prop) == re.getPropSeed(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	re_0 = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, RamanExperiment.getPropDefault(RamanExperiment.TEMPLATE), ...
		RamanExperiment.ID, RamanExperiment.getPropDefault(RamanExperiment.ID), ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, RamanExperiment.getPropDefault(RamanExperiment.SP_DICT), ...
		RamanExperiment.RESEARCHER, RamanExperiment.getPropDefault(RamanExperiment.RESEARCHER), ...
		RamanExperiment.DATE, RamanExperiment.getPropDefault(RamanExperiment.DATE), ...
		RamanExperiment.PLANT_NAME, RamanExperiment.getPropDefault(RamanExperiment.PLANT_NAME), ...
		RamanExperiment.PLANT_TYPE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE), ...
		RamanExperiment.PLANT_TYPE_COMMENT, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE_COMMENT), ...
		RamanExperiment.PLANT_AGE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_AGE), ...
		RamanExperiment.LEAF_NUMBER, RamanExperiment.getPropDefault(RamanExperiment.LEAF_NUMBER), ...
		RamanExperiment.GROWTH_MEDIUM, RamanExperiment.getPropDefault(RamanExperiment.GROWTH_MEDIUM), ...
		RamanExperiment.STRESS_TYPE, RamanExperiment.getPropDefault(RamanExperiment.STRESS_TYPE), ...
		RamanExperiment.SETUP, RamanExperiment.getPropDefault(RamanExperiment.SETUP), ...
		RamanExperiment.LASER_WAVELENGTH, RamanExperiment.getPropDefault(RamanExperiment.LASER_WAVELENGTH), ...
		RamanExperiment.LASER_POWER, RamanExperiment.getPropDefault(RamanExperiment.LASER_POWER), ...
		RamanExperiment.ACQUISITION_TIME, RamanExperiment.getPropDefault(RamanExperiment.ACQUISITION_TIME) ...
		);
	 
	re = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, re_0.getCallback(4), ..., ...
		RamanExperiment.ID, re_0.getCallback(5), ..., ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, re_0.getCallback(9), ..., ...
		RamanExperiment.RESEARCHER, re_0.getCallback(10), ..., ...
		RamanExperiment.DATE, re_0.getCallback(11), ..., ...
		RamanExperiment.PLANT_NAME, re_0.getCallback(12), ..., ...
		RamanExperiment.PLANT_TYPE, re_0.getCallback(13), ..., ...
		RamanExperiment.PLANT_TYPE_COMMENT, re_0.getCallback(14), ..., ...
		RamanExperiment.PLANT_AGE, re_0.getCallback(15), ..., ...
		RamanExperiment.LEAF_NUMBER, re_0.getCallback(16), ..., ...
		RamanExperiment.GROWTH_MEDIUM, re_0.getCallback(17), ..., ...
		RamanExperiment.STRESS_TYPE, re_0.getCallback(18), ..., ...
		RamanExperiment.SETUP, re_0.getCallback(19), ..., ...
		RamanExperiment.LASER_WAVELENGTH, re_0.getCallback(20), ..., ...
		RamanExperiment.LASER_POWER, re_0.getCallback(21), ..., ...
		RamanExperiment.ACQUISITION_TIME, re_0.getCallback(22) ... ...
		);
	 
	re_copy = re.copy();
	re_0_copy = re_copy.getr('ID').get('EL');
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
		value = re.getr(prop);
		value_copy = re_copy.getr(prop);
		switch RamanExperiment.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					'RamanExperiment.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
							'RamanExperiment.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
							'RamanExperiment.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == re_0.getCallback(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The callback should be obtained from RamanExperiment.getCallback().' ...
						)
					assert( ...
						value_copy == re_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The callback should be obtained from RamanExperiment.getCallback().' ...
						)
				end
	 
					assert( ...
						re_copy.isLocked(prop) == re.isLocked(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						re_copy.isChecked(prop) == re.isChecked(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						re_copy.getPropSeed(prop) == re.getPropSeed(prop), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re_template = RamanExperiment();
	re = RamanExperiment('TEMPLATE', re_template);
	 
	for prop = 1:1:RamanExperiment.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(RamanExperiment.getPropTag(prop));
		switch RamanExperiment.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == RamanExperiment.TEMPLATE
					assert( ...
						isa(re.getr(prop), 'RamanExperiment'), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment TEMPLATE does not work. RamanExperiment.getr(''TEMPLATE'') should be a RamanExperiment element.' ...
						)
					assert( ...
						isa(re_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						'RamanExperiment TEMPLATE does not work. RamanExperiment_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(re.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment TEMPLATE does not work. RamanExperiment.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						re.getr(prop).get('EL') == re_template && re.getr(prop).get('PROP') == prop && strcmp(re.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment TEMPLATE does not work. RamanExperiment.getr(' TAG ') should be a Callback to re_template.' TAG '.'] ...
						)
					assert( ...
						isa(re_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
						['RamanExperiment TEMPLATE does not work. RamanExperiment_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(re.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment TEMPLATE does not work. RamanExperiment.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(re_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
					['RamanExperiment TEMPLATE does not work. RamanExperiment_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, RamanExperiment.getPropDefault(RamanExperiment.TEMPLATE), ...
		RamanExperiment.ID, RamanExperiment.getPropDefault(RamanExperiment.ID), ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, RamanExperiment.getPropDefault(RamanExperiment.SP_DICT), ...
		RamanExperiment.RESEARCHER, RamanExperiment.getPropDefault(RamanExperiment.RESEARCHER), ...
		RamanExperiment.DATE, RamanExperiment.getPropDefault(RamanExperiment.DATE), ...
		RamanExperiment.PLANT_NAME, RamanExperiment.getPropDefault(RamanExperiment.PLANT_NAME), ...
		RamanExperiment.PLANT_TYPE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE), ...
		RamanExperiment.PLANT_TYPE_COMMENT, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE_COMMENT), ...
		RamanExperiment.PLANT_AGE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_AGE), ...
		RamanExperiment.LEAF_NUMBER, RamanExperiment.getPropDefault(RamanExperiment.LEAF_NUMBER), ...
		RamanExperiment.GROWTH_MEDIUM, RamanExperiment.getPropDefault(RamanExperiment.GROWTH_MEDIUM), ...
		RamanExperiment.STRESS_TYPE, RamanExperiment.getPropDefault(RamanExperiment.STRESS_TYPE), ...
		RamanExperiment.SETUP, RamanExperiment.getPropDefault(RamanExperiment.SETUP), ...
		RamanExperiment.LASER_WAVELENGTH, RamanExperiment.getPropDefault(RamanExperiment.LASER_WAVELENGTH), ...
		RamanExperiment.LASER_POWER, RamanExperiment.getPropDefault(RamanExperiment.LASER_POWER), ...
		RamanExperiment.ACQUISITION_TIME, RamanExperiment.getPropDefault(RamanExperiment.ACQUISITION_TIME) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'ramanexperiment_to_be_erased.b2'];
	 
	Element.save(re, filename)
	 
	re_loaded = Element.load(filename);
	 
	assert( ...
		isequal(re.copy(), re_loaded), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.save(re) and/or RamanExperiment.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	re = RamanExperiment( ...
		RamanExperiment.ELCLASS, RamanExperiment.getNoValue(), ...
		RamanExperiment.NAME, RamanExperiment.getNoValue(), ...
		RamanExperiment.DESCRIPTION, RamanExperiment.getNoValue(), ...
		RamanExperiment.TEMPLATE, RamanExperiment.getPropDefault(RamanExperiment.TEMPLATE), ...
		RamanExperiment.ID, RamanExperiment.getPropDefault(RamanExperiment.ID), ...
		RamanExperiment.LABEL, RamanExperiment.getPropDefault(RamanExperiment.LABEL), ...
		RamanExperiment.NOTES, RamanExperiment.getPropDefault(RamanExperiment.NOTES), ...
		RamanExperiment.TOSTRING, RamanExperiment.getNoValue(), ...
		RamanExperiment.SP_DICT, RamanExperiment.getPropDefault(RamanExperiment.SP_DICT), ...
		RamanExperiment.RESEARCHER, RamanExperiment.getPropDefault(RamanExperiment.RESEARCHER), ...
		RamanExperiment.DATE, RamanExperiment.getPropDefault(RamanExperiment.DATE), ...
		RamanExperiment.PLANT_NAME, RamanExperiment.getPropDefault(RamanExperiment.PLANT_NAME), ...
		RamanExperiment.PLANT_TYPE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE), ...
		RamanExperiment.PLANT_TYPE_COMMENT, RamanExperiment.getPropDefault(RamanExperiment.PLANT_TYPE_COMMENT), ...
		RamanExperiment.PLANT_AGE, RamanExperiment.getPropDefault(RamanExperiment.PLANT_AGE), ...
		RamanExperiment.LEAF_NUMBER, RamanExperiment.getPropDefault(RamanExperiment.LEAF_NUMBER), ...
		RamanExperiment.GROWTH_MEDIUM, RamanExperiment.getPropDefault(RamanExperiment.GROWTH_MEDIUM), ...
		RamanExperiment.STRESS_TYPE, RamanExperiment.getPropDefault(RamanExperiment.STRESS_TYPE), ...
		RamanExperiment.SETUP, RamanExperiment.getPropDefault(RamanExperiment.SETUP), ...
		RamanExperiment.LASER_WAVELENGTH, RamanExperiment.getPropDefault(RamanExperiment.LASER_WAVELENGTH), ...
		RamanExperiment.LASER_POWER, RamanExperiment.getPropDefault(RamanExperiment.LASER_POWER), ...
		RamanExperiment.ACQUISITION_TIME, RamanExperiment.getPropDefault(RamanExperiment.ACQUISITION_TIME) ...
		);
	 
	[json, struct, el_list] = encodeJSON(re);
	[re_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(re_dec ~= re, ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		'RamanExperiment.encodeJSON() or RamanExperiment.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) RamanExperiment.getPropFormat(prop), num2cell(RamanExperiment.getProps())) == Format.HANDLE) && all(cellfun(@(prop) RamanExperiment.getPropFormat(prop), num2cell(RamanExperiment.getProps())) == Format.NET)
		assert(isequal(re_dec, re), ...
			[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
			'RamanExperiment.encodeJSON() or RamanExperiment.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':RamanExperiment:' BRAPH2.FAIL_TEST], ...
		[' When testing RamanExperiment no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

