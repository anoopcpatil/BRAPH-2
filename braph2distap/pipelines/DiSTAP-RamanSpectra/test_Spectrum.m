%TEST_SPECTRUM

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	sp = Spectrum();
	 
	% get('ELCLASS')
	if isa(Spectrum, 'ConcreteElement')
		assert(strcmp(Spectrum().get('ELCLASS'), 'Spectrum'), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum().get(''ELCLASS'') should return ''Spectrum''.')
	end
	 
	% getClass
	assert(strcmp(Spectrum.getClass(), 'Spectrum'), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.getClass() should return ''Spectrum''.')
	assert(strcmp(sp.getClass(), 'Spectrum'), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'sp.getClass() should return ''Spectrum''.')
	assert(strcmp(Element.getClass(sp), 'Spectrum'), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(sp) should return ''Spectrum''.')
	assert(strcmp(Element.getClass('Spectrum'), 'Spectrum'), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''Spectrum'') should return ''Spectrum''.')
	 
	% getSubclasses()
	assert(isequal(Spectrum.getSubclasses(), subclasses('Spectrum', [], [], true)), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.getSubclasses() should return the same result as subclasses(''Spectrum'', [], [], true).')
	assert(isequal(sp.getSubclasses(), subclasses('Spectrum', [], [], true)), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''Spectrum'', [], [], true).')
	assert(isequal(Element.getSubclasses(sp), subclasses('Spectrum', [], [], true)), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(sp) should return the same result as subclasses(''Spectrum'', [], [], true).')
	assert(isequal(Element.getSubclasses('Spectrum'), subclasses('Spectrum', [], [], true)), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''Spectrum'') should return the same result as subclasses(''Spectrum'', [], [], true).')
	 
	% getProps()
	assert(isempty(Spectrum.getProps()) || isequal(Spectrum.getProps(), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.getProps() should return a row vector [1:1:N].')
	assert(isempty(Spectrum.getProps()) || isequal(sp.getProps(), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'sp.getProps() should return a row vector [1:1:N].')
	assert(isempty(Spectrum.getProps()) || isequal(Element.getProps(sp), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sp) should return a row vector [1:1:N].')
	assert(isempty(Spectrum.getProps()) || isequal(Element.getProps('Spectrum'), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Spectrum'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) Spectrum.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Spectrum.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.getProps(category) does not work.')
	tmp = cellfun(@(category) sp.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Spectrum.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'sp.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(sp, category), categories, 'UniformOutput', false);
	assert(isempty(Spectrum.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sp, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('Spectrum', category), categories, 'UniformOutput', false);
	assert(isempty(Spectrum.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Spectrum.getProps())), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Spectrum'', category) does not work.')
	 
	% getPropNumber()
	assert(Spectrum.getPropNumber() == length(Spectrum.getProps()), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.getPropNumber() should return the number of properties.')
	assert(sp.getPropNumber() == length(Spectrum.getProps()), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'sp.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(sp) == length(Spectrum.getProps()), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sp) should return the number of properties.')
	assert(Element.getPropNumber('Spectrum') == length(Spectrum.getProps()), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Spectrum'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) Spectrum.getPropNumber(category), categories)) == Spectrum.getPropNumber(), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) sp.getPropNumber(category), categories)) == Spectrum.getPropNumber(), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'sp.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(sp, category), categories)) == Spectrum.getPropNumber(), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sp, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('Spectrum', category), categories)) == Spectrum.getPropNumber(), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Spectrum'', category) does not work.')
	 
	% existsProp(prop)
	assert(~Spectrum.existsProp(NaN), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.existsProp(prop) does not work.')
	assert(~sp.existsProp(NaN), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'sp.existsProp(prop) does not work.')
	assert(~Element.existsProp(sp, NaN), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(sp, prop) does not work.')
	assert(~Element.existsProp('Spectrum', NaN), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''Spectrum'', prop) does not work.')
	 
	assert_with_error('Spectrum.existsProp(NaN)', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], sp)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], sp)
	assert_with_error('Element.existsProp(''Spectrum'', NaN)', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Spectrum.getPropNumber()
		assert(Spectrum.existsProp(prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.existsProp(prop) does not work.')
		assert(sp.existsProp(prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.existsProp(prop) does not work.')
		assert(Element.existsProp(sp, prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(sp, prop) does not work.')
		assert(Element.existsProp('Spectrum', prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''Spectrum'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~Spectrum.existsTag(''), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.existsTag(tag) does not work.')
	assert(~sp.existsTag(''), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'sp.existsTag(tag) does not work.')
	assert(~Element.existsTag(sp, ''), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(sp, tag) does not work.')
	assert(~Element.existsTag('Spectrum', ''), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''Spectrum'', tag) does not work.')
	 
	assert_with_error('Spectrum.existsTag('''')', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], sp)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], sp)
	assert_with_error('Element.existsTag(''Spectrum'', '''')', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
		assert(Spectrum.existsTag(tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.existsTag(tag) does not work.')
		assert(sp.existsTag(tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.existsTag(tag) does not work.')
		assert(Element.existsTag(sp, tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(sp, tga) does not work.')
		assert(Element.existsTag('Spectrum', tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''Spectrum'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		assert(Spectrum.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropProp(prop) does not work.')
		assert(sp.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropProp(prop) does not work.')
		assert(Element.getPropProp(sp, prop) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sp, prop) does not work.')
		assert(Element.getPropProp('Spectrum', prop) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Spectrum'', prop) does not work.')
	 
		tag = sp.getPropTag(prop);
		assert(Spectrum.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropProp(tag) does not work.')
		assert(sp.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropProp(tag) does not work.')
		assert(Element.getPropProp(sp, tag) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sp, tag) does not work.')
		assert(Element.getPropProp('Spectrum', prop) == prop, ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Spectrum'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		assert(strcmp(Spectrum.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropTag(prop) does not work.')
		assert(strcmp(sp.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(sp, prop), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sp, prop) does not work.')
		assert(strcmp(Element.getPropTag('Spectrum', prop), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Spectrum'', prop) does not work.')
	 
		assert(strcmp(Spectrum.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropTag(tag) does not work.')
		assert(strcmp(sp.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(sp, tag), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sp, tag) does not work.')
		assert(strcmp(Element.getPropTag('Spectrum', prop), tag), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Spectrum'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		assert(Category.existsCategory(Spectrum.getPropCategory(prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(sp.getPropCategory(prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sp, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sp, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sp, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Spectrum'', prop) does not work.')
	 
		assert(Category.existsCategory(Spectrum.getPropCategory(tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(sp.getPropCategory(tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sp, tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sp, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sp, tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Spectrum'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		assert(Format.existsFormat(Spectrum.getPropFormat(prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(sp.getPropFormat(prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sp, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sp, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sp, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Spectrum'', prop) does not work.')
	 
		assert(Format.existsFormat(Spectrum.getPropFormat(tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(sp.getPropFormat(tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sp, tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sp, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sp, tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Spectrum'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		assert(ischar(Spectrum.getPropDescription(prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropDescription(prop) does not work.')
		assert(ischar(sp.getPropDescription(prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(sp, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sp, prop) does not work.')
		assert(ischar(Element.getPropDescription(sp, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Spectrum'', prop) does not work.')
	 
		assert(ischar(Spectrum.getPropDescription(tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.getPropDescription(tag) does not work.')
		assert(ischar(sp.getPropDescription(tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(sp, tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sp, tag) does not work.')
		assert(ischar(Element.getPropDescription(sp, tag)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Spectrum'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		settings = Spectrum.getPropSettings(prop);
		settings = sp.getPropSettings(prop);
		settings = Element.getPropSettings(sp, prop);
		settings = Element.getPropSettings('Spectrum', prop);
	 
		settings = Spectrum.getPropSettings(tag);
		settings = sp.getPropSettings(tag);
		settings = Element.getPropSettings(sp, tag);
		settings = Element.getPropSettings('Spectrum', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		default = Spectrum.getPropDefault(prop);
		default = sp.getPropDefault(prop);
		default = Element.getPropDefault(sp, prop);
		default = Element.getPropDefault('Spectrum', prop);
	 
		default = Spectrum.getPropDefault(tag);
		default = sp.getPropDefault(tag);
		default = Element.getPropDefault(sp, tag);
		default = Element.getPropDefault('Spectrum', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		conditioned_default = Spectrum.getPropDefaultConditioned(prop);
		conditioned_default = sp.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(sp, prop);
		conditioned_default = Element.getPropDefaultConditioned('Spectrum', prop);
	 
		conditioned_default = Spectrum.getPropDefaultConditioned(tag);
		conditioned_default = sp.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(sp, tag);
		conditioned_default = Element.getPropDefaultConditioned('Spectrum', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:Spectrum.getPropNumber()
		tag = sp.getPropTag(prop);
	 
		assert(~Spectrum.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.checkProp(prop, value) does not work.')
		assert(~sp.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(sp, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sp, prop, value) does not work.')
		assert(~Element.checkProp('Spectrum', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Spectrum'', prop, value) does not work.')
	 
		assert_with_error('Spectrum.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], prop, sp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], prop, sp)
		assert_with_error('Element.checkProp(''Spectrum'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~Spectrum.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.checkProp(tag, value) does not work.')
		assert(~sp.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(sp, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sp, tag, value) does not work.')
		assert(~Element.checkProp('Spectrum', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Spectrum'', tag, value) does not work.')
	 
		assert_with_error('Spectrum.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], tag, sp)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], tag, sp)
		assert_with_error('Element.checkProp(''Spectrum'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Spectrum:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(Spectrum.checkProp(prop, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.checkProp(prop, <conditioned default value>) does not work.')
		assert(sp.checkProp(prop, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(sp, prop, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sp, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('Spectrum', prop, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Spectrum'', prop, <conditioned default value>) does not work.')
	 
		assert(Spectrum.checkProp(tag, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.checkProp(tag, <conditioned default value>) does not work.')
		assert(sp.checkProp(tag, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'sp.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(sp, tag, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sp, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('Spectrum', tag, Element.getPropDefaultConditioned(Spectrum, prop)), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Spectrum'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, Spectrum.getPropDefault(Spectrum.TEMPLATE), ...
		Spectrum.ID, Spectrum.getPropDefault(Spectrum.ID), ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, Spectrum.getPropDefault(Spectrum.CALIBRATION), ...
		Spectrum.RESEARCHER, Spectrum.getPropDefault(Spectrum.RESEARCHER), ...
		Spectrum.DATE, Spectrum.getPropDefault(Spectrum.DATE), ...
		Spectrum.PLANT_NAME, Spectrum.getPropDefault(Spectrum.PLANT_NAME), ...
		Spectrum.PLANT_TYPE, Spectrum.getPropDefault(Spectrum.PLANT_TYPE), ...
		Spectrum.PLANT_TYPE_COMMENT, Spectrum.getPropDefault(Spectrum.PLANT_TYPE_COMMENT), ...
		Spectrum.PLANT_AGE, Spectrum.getPropDefault(Spectrum.PLANT_AGE), ...
		Spectrum.LEAF_NUMBER, Spectrum.getPropDefault(Spectrum.LEAF_NUMBER), ...
		Spectrum.GROWTH_MEDIUM, Spectrum.getPropDefault(Spectrum.GROWTH_MEDIUM), ...
		Spectrum.STRESS_TYPE, Spectrum.getPropDefault(Spectrum.STRESS_TYPE), ...
		Spectrum.SETUP, Spectrum.getPropDefault(Spectrum.SETUP), ...
		Spectrum.LASER_WAVELENGTH, Spectrum.getPropDefault(Spectrum.LASER_WAVELENGTH), ...
		Spectrum.LASER_POWER, Spectrum.getPropDefault(Spectrum.LASER_POWER), ...
		Spectrum.ACQUISITION_TIME, Spectrum.getPropDefault(Spectrum.ACQUISITION_TIME), ...
		Spectrum.WAVELENGTH, Spectrum.getPropDefault(Spectrum.WAVELENGTH), ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, Spectrum.getPropDefault(Spectrum.INTENSITIES), ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	for prop = 1:1:Spectrum.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Spectrum.getPropTag(prop));
		switch Spectrum.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					sp.getr(prop) == Spectrum.getNoValue(), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Being a ' Spectrum.getCategoryName(Spectrum.getPropCategory(prop)) ', Spectrum.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Spectrum.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sp.getr(TAG) == Spectrum.getNoValue(), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Being a ' Spectrum.getCategoryName(Spectrum.getPropCategory(prop)) ', Spectrum.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Spectrum.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(sp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sp.getPropSettings(prop))
					assert( ...
						sp.checkFormat(sp.getPropFormat(prop), sp.get(prop)), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sp.checkFormat(sp.getPropFormat(prop), sp.get(prop), sp.getPropSettings(prop)), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					sp.getr(prop) == Spectrum.getNoValue(), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Being a ' Spectrum.getCategoryName(Spectrum.getPropCategory(prop)) ', Spectrum.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Spectrum.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sp.getr(TAG) == Spectrum.getNoValue(), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Being a ' Spectrum.getCategoryName(Spectrum.getPropCategory(prop)) ', Spectrum.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Spectrum.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':Spectrum']);
				assert( ...
					~isa(sp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sp.getPropSettings(prop))
					assert( ...
						sp.checkFormat(sp.getPropFormat(prop), sp.get(prop)), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sp.checkFormat(sp.getPropFormat(prop), sp.get(prop), sp.getPropSettings(prop)), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(sp.getr(prop), Spectrum.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by Spectrum.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Spectrum.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(sp.getr(TAG), Spectrum.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' TAG ') must be inizialized to its default value ' ...
					'given by Spectrum.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Spectrum.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, Spectrum.getPropDefault(Spectrum.TEMPLATE), ...
		Spectrum.ID, Spectrum.getPropDefault(Spectrum.ID), ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, Spectrum.getPropDefault(Spectrum.CALIBRATION), ...
		Spectrum.RESEARCHER, Spectrum.getPropDefault(Spectrum.RESEARCHER), ...
		Spectrum.DATE, Spectrum.getPropDefault(Spectrum.DATE), ...
		Spectrum.PLANT_NAME, Spectrum.getPropDefault(Spectrum.PLANT_NAME), ...
		Spectrum.PLANT_TYPE, Spectrum.getPropDefault(Spectrum.PLANT_TYPE), ...
		Spectrum.PLANT_TYPE_COMMENT, Spectrum.getPropDefault(Spectrum.PLANT_TYPE_COMMENT), ...
		Spectrum.PLANT_AGE, Spectrum.getPropDefault(Spectrum.PLANT_AGE), ...
		Spectrum.LEAF_NUMBER, Spectrum.getPropDefault(Spectrum.LEAF_NUMBER), ...
		Spectrum.GROWTH_MEDIUM, Spectrum.getPropDefault(Spectrum.GROWTH_MEDIUM), ...
		Spectrum.STRESS_TYPE, Spectrum.getPropDefault(Spectrum.STRESS_TYPE), ...
		Spectrum.SETUP, Spectrum.getPropDefault(Spectrum.SETUP), ...
		Spectrum.LASER_WAVELENGTH, Spectrum.getPropDefault(Spectrum.LASER_WAVELENGTH), ...
		Spectrum.LASER_POWER, Spectrum.getPropDefault(Spectrum.LASER_POWER), ...
		Spectrum.ACQUISITION_TIME, Spectrum.getPropDefault(Spectrum.ACQUISITION_TIME), ...
		Spectrum.WAVELENGTH, Spectrum.getPropDefault(Spectrum.WAVELENGTH), ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, Spectrum.getPropDefault(Spectrum.INTENSITIES), ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	for prop = 1:1:Spectrum.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Spectrum.getPropTag(prop));
		switch Spectrum.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(sp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sp.checkFormat(sp.getPropFormat(prop), sp.getr(prop),sp.getPropSettings(prop)), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':Spectrum']);
				assert( ...
					~isa(sp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':Spectrum']);
	% 			assert( ...
	% 				~isa(sp.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
	% 				['Spectrum.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(sp.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
	% 				['Spectrum.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				sp.checkFormat(sp.getPropFormat(prop), sp.getr(prop),sp.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
	% 				['Spectrum.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':Spectrum']);
				assert( ...
					~isa(sp.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(sp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sp.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sp.checkFormat(sp.getPropFormat(prop), sp.getr(prop),sp.getPropSettings(prop)), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if sp.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:Spectrum');
					delete(ancestor(sp.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(Spectrum.getProps(Category.RESULT))
		for prop = 1:1:Spectrum.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch Spectrum.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						sp.isLocked(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~sp.isLocked(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp = Spectrum();
	 
	for prop = 1:1:Spectrum.getPropNumber()
		TAG = upper(Spectrum.getPropTag(prop));
		assert( ...
			~sp.isLocked(prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			['Spectrum.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~sp.isLocked(TAG), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			['Spectrum.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	sp.lock()
	 
	for prop = 1:1:Spectrum.getPropNumber()
		switch Spectrum.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					sp.isLocked(prop), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~sp.isLocked(prop), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp = Spectrum();
	 
	warning_backup = warning('off', 'BRAPH2:Spectrum');
	for prop = 1:1:Spectrum.getPropNumber()
		sp.lock(prop)
		switch Spectrum.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					sp.isLocked(prop), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~sp.isLocked(prop), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp = Spectrum();
	 
	for prop = 1:1:Spectrum.getPropNumber()
		TAG = upper(Spectrum.getPropTag(prop));
		assert( ...
			sp.isChecked(prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			['Spectrum.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			sp.isChecked(TAG), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			['Spectrum.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	sp.unchecked()
	 
	for prop = 1:1:Spectrum.getPropNumber()
		assert( ...
			~sp.isChecked(prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			['Spectrum.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	sp.checked()
	 
	for prop = 1:1:Spectrum.getPropNumber()
		assert( ...
			sp.isChecked(prop), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			['Spectrum.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic Spectrum
	sp_0 = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, Spectrum.getPropDefault(Spectrum.TEMPLATE), ...
		Spectrum.ID, Spectrum.getPropDefault(Spectrum.ID), ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, Spectrum.getPropDefault(Spectrum.CALIBRATION), ...
		Spectrum.RESEARCHER, Spectrum.getPropDefault(Spectrum.RESEARCHER), ...
		Spectrum.DATE, Spectrum.getPropDefault(Spectrum.DATE), ...
		Spectrum.PLANT_NAME, Spectrum.getPropDefault(Spectrum.PLANT_NAME), ...
		Spectrum.PLANT_TYPE, Spectrum.getPropDefault(Spectrum.PLANT_TYPE), ...
		Spectrum.PLANT_TYPE_COMMENT, Spectrum.getPropDefault(Spectrum.PLANT_TYPE_COMMENT), ...
		Spectrum.PLANT_AGE, Spectrum.getPropDefault(Spectrum.PLANT_AGE), ...
		Spectrum.LEAF_NUMBER, Spectrum.getPropDefault(Spectrum.LEAF_NUMBER), ...
		Spectrum.GROWTH_MEDIUM, Spectrum.getPropDefault(Spectrum.GROWTH_MEDIUM), ...
		Spectrum.STRESS_TYPE, Spectrum.getPropDefault(Spectrum.STRESS_TYPE), ...
		Spectrum.SETUP, Spectrum.getPropDefault(Spectrum.SETUP), ...
		Spectrum.LASER_WAVELENGTH, Spectrum.getPropDefault(Spectrum.LASER_WAVELENGTH), ...
		Spectrum.LASER_POWER, Spectrum.getPropDefault(Spectrum.LASER_POWER), ...
		Spectrum.ACQUISITION_TIME, Spectrum.getPropDefault(Spectrum.ACQUISITION_TIME), ...
		Spectrum.WAVELENGTH, Spectrum.getPropDefault(Spectrum.WAVELENGTH), ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, Spectrum.getPropDefault(Spectrum.INTENSITIES), ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	% Spectrum with 1st callbacks
	sp_1 = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, sp_0.getCallback(4), ..., ...
		Spectrum.ID, sp_0.getCallback(5), ..., ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, sp_0.getCallback(9), ..., ...
		Spectrum.RESEARCHER, sp_0.getCallback(10), ..., ...
		Spectrum.DATE, sp_0.getCallback(11), ..., ...
		Spectrum.PLANT_NAME, sp_0.getCallback(12), ..., ...
		Spectrum.PLANT_TYPE, sp_0.getCallback(13), ..., ...
		Spectrum.PLANT_TYPE_COMMENT, sp_0.getCallback(14), ..., ...
		Spectrum.PLANT_AGE, sp_0.getCallback(15), ..., ...
		Spectrum.LEAF_NUMBER, sp_0.getCallback(16), ..., ...
		Spectrum.GROWTH_MEDIUM, sp_0.getCallback(17), ..., ...
		Spectrum.STRESS_TYPE, sp_0.getCallback(18), ..., ...
		Spectrum.SETUP, sp_0.getCallback(19), ..., ...
		Spectrum.LASER_WAVELENGTH, sp_0.getCallback(20), ..., ...
		Spectrum.LASER_POWER, sp_0.getCallback(21), ..., ...
		Spectrum.ACQUISITION_TIME, sp_0.getCallback(22), ..., ...
		Spectrum.WAVELENGTH, sp_0.getCallback(23), ..., ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, sp_0.getCallback(25), ..., ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	prop_number = Spectrum.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Spectrum.getPropTag(prop));
		switch Spectrum.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sp_1.get(prop), sp_0.get(prop)) && ~isa(sp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sp_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Spectrum with 2nd callbacks
	sp_2 = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, sp_1.getCallback(4), ..., ...
		Spectrum.ID, sp_1.getCallback(5), ..., ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, sp_1.getCallback(9), ..., ...
		Spectrum.RESEARCHER, sp_1.getCallback(10), ..., ...
		Spectrum.DATE, sp_1.getCallback(11), ..., ...
		Spectrum.PLANT_NAME, sp_1.getCallback(12), ..., ...
		Spectrum.PLANT_TYPE, sp_1.getCallback(13), ..., ...
		Spectrum.PLANT_TYPE_COMMENT, sp_1.getCallback(14), ..., ...
		Spectrum.PLANT_AGE, sp_1.getCallback(15), ..., ...
		Spectrum.LEAF_NUMBER, sp_1.getCallback(16), ..., ...
		Spectrum.GROWTH_MEDIUM, sp_1.getCallback(17), ..., ...
		Spectrum.STRESS_TYPE, sp_1.getCallback(18), ..., ...
		Spectrum.SETUP, sp_1.getCallback(19), ..., ...
		Spectrum.LASER_WAVELENGTH, sp_1.getCallback(20), ..., ...
		Spectrum.LASER_POWER, sp_1.getCallback(21), ..., ...
		Spectrum.ACQUISITION_TIME, sp_1.getCallback(22), ..., ...
		Spectrum.WAVELENGTH, sp_1.getCallback(23), ..., ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, sp_1.getCallback(25), ..., ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	prop_number = Spectrum.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Spectrum.getPropTag(prop));
		switch Spectrum.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sp_2.get(prop), sp_0.get(prop)) && ~isa(sp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sp_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Spectrum with 3rd callbacks
	sp_3 = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, sp_2.getCallback(4), ..., ...
		Spectrum.ID, sp_2.getCallback(5), ..., ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, sp_2.getCallback(9), ..., ...
		Spectrum.RESEARCHER, sp_2.getCallback(10), ..., ...
		Spectrum.DATE, sp_2.getCallback(11), ..., ...
		Spectrum.PLANT_NAME, sp_2.getCallback(12), ..., ...
		Spectrum.PLANT_TYPE, sp_2.getCallback(13), ..., ...
		Spectrum.PLANT_TYPE_COMMENT, sp_2.getCallback(14), ..., ...
		Spectrum.PLANT_AGE, sp_2.getCallback(15), ..., ...
		Spectrum.LEAF_NUMBER, sp_2.getCallback(16), ..., ...
		Spectrum.GROWTH_MEDIUM, sp_2.getCallback(17), ..., ...
		Spectrum.STRESS_TYPE, sp_2.getCallback(18), ..., ...
		Spectrum.SETUP, sp_2.getCallback(19), ..., ...
		Spectrum.LASER_WAVELENGTH, sp_2.getCallback(20), ..., ...
		Spectrum.LASER_POWER, sp_2.getCallback(21), ..., ...
		Spectrum.ACQUISITION_TIME, sp_2.getCallback(22), ..., ...
		Spectrum.WAVELENGTH, sp_2.getCallback(23), ..., ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, sp_2.getCallback(25), ..., ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	prop_number = Spectrum.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Spectrum.getPropTag(prop));
		switch Spectrum.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sp_3.get(prop), sp_0.get(prop)) && ~isa(sp_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sp_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	sp = Spectrum();
	 
	sp_copy = sp.copy();
	 
	assert(sp_copy ~= sp, ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(sp_copy, sp), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:Spectrum.getPropNumber()
		value = sp.getr(prop);
		value_copy = sp_copy.getr(prop);
		switch Spectrum.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					'Spectrum.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
							'Spectrum.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
							'Spectrum.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					sp_copy.isLocked(prop) == sp.isLocked(prop), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					'Spectrum.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sp_copy.isChecked(prop) == sp.isChecked(prop), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					'Spectrum.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sp_copy.getPropSeed(prop) == sp.getPropSeed(prop), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					'Spectrum.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	sp = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, Spectrum.getPropDefault(Spectrum.TEMPLATE), ...
		Spectrum.ID, Spectrum.getPropDefault(Spectrum.ID), ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, Spectrum.getPropDefault(Spectrum.CALIBRATION), ...
		Spectrum.RESEARCHER, Spectrum.getPropDefault(Spectrum.RESEARCHER), ...
		Spectrum.DATE, Spectrum.getPropDefault(Spectrum.DATE), ...
		Spectrum.PLANT_NAME, Spectrum.getPropDefault(Spectrum.PLANT_NAME), ...
		Spectrum.PLANT_TYPE, Spectrum.getPropDefault(Spectrum.PLANT_TYPE), ...
		Spectrum.PLANT_TYPE_COMMENT, Spectrum.getPropDefault(Spectrum.PLANT_TYPE_COMMENT), ...
		Spectrum.PLANT_AGE, Spectrum.getPropDefault(Spectrum.PLANT_AGE), ...
		Spectrum.LEAF_NUMBER, Spectrum.getPropDefault(Spectrum.LEAF_NUMBER), ...
		Spectrum.GROWTH_MEDIUM, Spectrum.getPropDefault(Spectrum.GROWTH_MEDIUM), ...
		Spectrum.STRESS_TYPE, Spectrum.getPropDefault(Spectrum.STRESS_TYPE), ...
		Spectrum.SETUP, Spectrum.getPropDefault(Spectrum.SETUP), ...
		Spectrum.LASER_WAVELENGTH, Spectrum.getPropDefault(Spectrum.LASER_WAVELENGTH), ...
		Spectrum.LASER_POWER, Spectrum.getPropDefault(Spectrum.LASER_POWER), ...
		Spectrum.ACQUISITION_TIME, Spectrum.getPropDefault(Spectrum.ACQUISITION_TIME), ...
		Spectrum.WAVELENGTH, Spectrum.getPropDefault(Spectrum.WAVELENGTH), ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, Spectrum.getPropDefault(Spectrum.INTENSITIES), ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	for prop = 1:1:Spectrum.getPropNumber()
		if Spectrum.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':Spectrum']);
			% sp.memorize(prop);
			% warning(warning_backup)
		elseif Spectrum.getPropCategory(prop) == Category.EVANESCENT && sp.getPropFormat(prop) == Format.HANDLE
			sp.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:Spectrum');
			delete(ancestor(sp.get(prop), 'figure'))
			warning(warning_backup)
		else
			sp.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	sp_copy = sp.copy();
	 
	for prop = 1:1:Spectrum.getPropNumber()
		value = sp.getr(prop);
		value_copy = sp_copy.getr(prop);
		switch Spectrum.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					'Spectrum.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
							'Spectrum.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
							'Spectrum.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						sp_copy.isLocked(prop) == sp.isLocked(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sp_copy.isChecked(prop) == sp.isChecked(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sp_copy.getPropSeed(prop) == sp.getPropSeed(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	sp_0 = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, Spectrum.getPropDefault(Spectrum.TEMPLATE), ...
		Spectrum.ID, Spectrum.getPropDefault(Spectrum.ID), ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, Spectrum.getPropDefault(Spectrum.CALIBRATION), ...
		Spectrum.RESEARCHER, Spectrum.getPropDefault(Spectrum.RESEARCHER), ...
		Spectrum.DATE, Spectrum.getPropDefault(Spectrum.DATE), ...
		Spectrum.PLANT_NAME, Spectrum.getPropDefault(Spectrum.PLANT_NAME), ...
		Spectrum.PLANT_TYPE, Spectrum.getPropDefault(Spectrum.PLANT_TYPE), ...
		Spectrum.PLANT_TYPE_COMMENT, Spectrum.getPropDefault(Spectrum.PLANT_TYPE_COMMENT), ...
		Spectrum.PLANT_AGE, Spectrum.getPropDefault(Spectrum.PLANT_AGE), ...
		Spectrum.LEAF_NUMBER, Spectrum.getPropDefault(Spectrum.LEAF_NUMBER), ...
		Spectrum.GROWTH_MEDIUM, Spectrum.getPropDefault(Spectrum.GROWTH_MEDIUM), ...
		Spectrum.STRESS_TYPE, Spectrum.getPropDefault(Spectrum.STRESS_TYPE), ...
		Spectrum.SETUP, Spectrum.getPropDefault(Spectrum.SETUP), ...
		Spectrum.LASER_WAVELENGTH, Spectrum.getPropDefault(Spectrum.LASER_WAVELENGTH), ...
		Spectrum.LASER_POWER, Spectrum.getPropDefault(Spectrum.LASER_POWER), ...
		Spectrum.ACQUISITION_TIME, Spectrum.getPropDefault(Spectrum.ACQUISITION_TIME), ...
		Spectrum.WAVELENGTH, Spectrum.getPropDefault(Spectrum.WAVELENGTH), ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, Spectrum.getPropDefault(Spectrum.INTENSITIES), ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	sp = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, sp_0.getCallback(4), ..., ...
		Spectrum.ID, sp_0.getCallback(5), ..., ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, sp_0.getCallback(9), ..., ...
		Spectrum.RESEARCHER, sp_0.getCallback(10), ..., ...
		Spectrum.DATE, sp_0.getCallback(11), ..., ...
		Spectrum.PLANT_NAME, sp_0.getCallback(12), ..., ...
		Spectrum.PLANT_TYPE, sp_0.getCallback(13), ..., ...
		Spectrum.PLANT_TYPE_COMMENT, sp_0.getCallback(14), ..., ...
		Spectrum.PLANT_AGE, sp_0.getCallback(15), ..., ...
		Spectrum.LEAF_NUMBER, sp_0.getCallback(16), ..., ...
		Spectrum.GROWTH_MEDIUM, sp_0.getCallback(17), ..., ...
		Spectrum.STRESS_TYPE, sp_0.getCallback(18), ..., ...
		Spectrum.SETUP, sp_0.getCallback(19), ..., ...
		Spectrum.LASER_WAVELENGTH, sp_0.getCallback(20), ..., ...
		Spectrum.LASER_POWER, sp_0.getCallback(21), ..., ...
		Spectrum.ACQUISITION_TIME, sp_0.getCallback(22), ..., ...
		Spectrum.WAVELENGTH, sp_0.getCallback(23), ..., ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, sp_0.getCallback(25), ..., ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	sp_copy = sp.copy();
	sp_0_copy = sp_copy.getr('ID').get('EL');
	 
	for prop = 1:1:Spectrum.getPropNumber()
		value = sp.getr(prop);
		value_copy = sp_copy.getr(prop);
		switch Spectrum.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					'Spectrum.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
							'Spectrum.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
							'Spectrum.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == sp_0.getCallback(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The callback should be obtained from Spectrum.getCallback().' ...
						)
					assert( ...
						value_copy == sp_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The callback should be obtained from Spectrum.getCallback().' ...
						)
				end
	 
					assert( ...
						sp_copy.isLocked(prop) == sp.isLocked(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sp_copy.isChecked(prop) == sp.isChecked(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sp_copy.getPropSeed(prop) == sp.getPropSeed(prop), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp_template = Spectrum();
	sp = Spectrum('TEMPLATE', sp_template);
	 
	for prop = 1:1:Spectrum.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(Spectrum.getPropTag(prop));
		switch Spectrum.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == Spectrum.TEMPLATE
					assert( ...
						isa(sp.getr(prop), 'Spectrum'), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum TEMPLATE does not work. Spectrum.getr(''TEMPLATE'') should be a Spectrum element.' ...
						)
					assert( ...
						isa(sp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						'Spectrum TEMPLATE does not work. Spectrum_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(sp.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum TEMPLATE does not work. Spectrum.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						sp.getr(prop).get('EL') == sp_template && sp.getr(prop).get('PROP') == prop && strcmp(sp.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum TEMPLATE does not work. Spectrum.getr(' TAG ') should be a Callback to sp_template.' TAG '.'] ...
						)
					assert( ...
						isa(sp_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
						['Spectrum TEMPLATE does not work. Spectrum_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(sp.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum TEMPLATE does not work. Spectrum.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(sp_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
					['Spectrum TEMPLATE does not work. Spectrum_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, Spectrum.getPropDefault(Spectrum.TEMPLATE), ...
		Spectrum.ID, Spectrum.getPropDefault(Spectrum.ID), ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, Spectrum.getPropDefault(Spectrum.CALIBRATION), ...
		Spectrum.RESEARCHER, Spectrum.getPropDefault(Spectrum.RESEARCHER), ...
		Spectrum.DATE, Spectrum.getPropDefault(Spectrum.DATE), ...
		Spectrum.PLANT_NAME, Spectrum.getPropDefault(Spectrum.PLANT_NAME), ...
		Spectrum.PLANT_TYPE, Spectrum.getPropDefault(Spectrum.PLANT_TYPE), ...
		Spectrum.PLANT_TYPE_COMMENT, Spectrum.getPropDefault(Spectrum.PLANT_TYPE_COMMENT), ...
		Spectrum.PLANT_AGE, Spectrum.getPropDefault(Spectrum.PLANT_AGE), ...
		Spectrum.LEAF_NUMBER, Spectrum.getPropDefault(Spectrum.LEAF_NUMBER), ...
		Spectrum.GROWTH_MEDIUM, Spectrum.getPropDefault(Spectrum.GROWTH_MEDIUM), ...
		Spectrum.STRESS_TYPE, Spectrum.getPropDefault(Spectrum.STRESS_TYPE), ...
		Spectrum.SETUP, Spectrum.getPropDefault(Spectrum.SETUP), ...
		Spectrum.LASER_WAVELENGTH, Spectrum.getPropDefault(Spectrum.LASER_WAVELENGTH), ...
		Spectrum.LASER_POWER, Spectrum.getPropDefault(Spectrum.LASER_POWER), ...
		Spectrum.ACQUISITION_TIME, Spectrum.getPropDefault(Spectrum.ACQUISITION_TIME), ...
		Spectrum.WAVELENGTH, Spectrum.getPropDefault(Spectrum.WAVELENGTH), ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, Spectrum.getPropDefault(Spectrum.INTENSITIES), ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'spectrum_to_be_erased.b2'];
	 
	Element.save(sp, filename)
	 
	sp_loaded = Element.load(filename);
	 
	assert( ...
		isequal(sp.copy(), sp_loaded), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.save(sp) and/or Spectrum.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sp = Spectrum( ...
		Spectrum.ELCLASS, Spectrum.getNoValue(), ...
		Spectrum.NAME, Spectrum.getNoValue(), ...
		Spectrum.DESCRIPTION, Spectrum.getNoValue(), ...
		Spectrum.TEMPLATE, Spectrum.getPropDefault(Spectrum.TEMPLATE), ...
		Spectrum.ID, Spectrum.getPropDefault(Spectrum.ID), ...
		Spectrum.LABEL, Spectrum.getPropDefault(Spectrum.LABEL), ...
		Spectrum.NOTES, Spectrum.getPropDefault(Spectrum.NOTES), ...
		Spectrum.TOSTRING, Spectrum.getNoValue(), ...
		Spectrum.CALIBRATION, Spectrum.getPropDefault(Spectrum.CALIBRATION), ...
		Spectrum.RESEARCHER, Spectrum.getPropDefault(Spectrum.RESEARCHER), ...
		Spectrum.DATE, Spectrum.getPropDefault(Spectrum.DATE), ...
		Spectrum.PLANT_NAME, Spectrum.getPropDefault(Spectrum.PLANT_NAME), ...
		Spectrum.PLANT_TYPE, Spectrum.getPropDefault(Spectrum.PLANT_TYPE), ...
		Spectrum.PLANT_TYPE_COMMENT, Spectrum.getPropDefault(Spectrum.PLANT_TYPE_COMMENT), ...
		Spectrum.PLANT_AGE, Spectrum.getPropDefault(Spectrum.PLANT_AGE), ...
		Spectrum.LEAF_NUMBER, Spectrum.getPropDefault(Spectrum.LEAF_NUMBER), ...
		Spectrum.GROWTH_MEDIUM, Spectrum.getPropDefault(Spectrum.GROWTH_MEDIUM), ...
		Spectrum.STRESS_TYPE, Spectrum.getPropDefault(Spectrum.STRESS_TYPE), ...
		Spectrum.SETUP, Spectrum.getPropDefault(Spectrum.SETUP), ...
		Spectrum.LASER_WAVELENGTH, Spectrum.getPropDefault(Spectrum.LASER_WAVELENGTH), ...
		Spectrum.LASER_POWER, Spectrum.getPropDefault(Spectrum.LASER_POWER), ...
		Spectrum.ACQUISITION_TIME, Spectrum.getPropDefault(Spectrum.ACQUISITION_TIME), ...
		Spectrum.WAVELENGTH, Spectrum.getPropDefault(Spectrum.WAVELENGTH), ...
		Spectrum.WAVELENGTH_LABELS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITIES, Spectrum.getPropDefault(Spectrum.INTENSITIES), ...
		Spectrum.NO_AQUISITIONS, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY, Spectrum.getNoValue(), ...
		Spectrum.INTENSITY_MEAN, Spectrum.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(sp);
	[sp_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(sp_dec ~= sp, ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		'Spectrum.encodeJSON() or Spectrum.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) Spectrum.getPropFormat(prop), num2cell(Spectrum.getProps())) == Format.HANDLE) && all(cellfun(@(prop) Spectrum.getPropFormat(prop), num2cell(Spectrum.getProps())) == Format.NET)
		assert(isequal(sp_dec, sp), ...
			[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
			'Spectrum.encodeJSON() or Spectrum.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':Spectrum:' BRAPH2.FAIL_TEST], ...
		[' When testing Spectrum no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

