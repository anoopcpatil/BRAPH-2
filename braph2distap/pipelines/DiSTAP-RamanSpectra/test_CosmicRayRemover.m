%TEST_COSMICRAYREMOVER

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	crr = CosmicRayRemover();
	 
	% get('ELCLASS')
	if isa(CosmicRayRemover, 'ConcreteElement')
		assert(strcmp(CosmicRayRemover().get('ELCLASS'), 'CosmicRayRemover'), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover().get(''ELCLASS'') should return ''CosmicRayRemover''.')
	end
	 
	% getClass
	assert(strcmp(CosmicRayRemover.getClass(), 'CosmicRayRemover'), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.getClass() should return ''CosmicRayRemover''.')
	assert(strcmp(crr.getClass(), 'CosmicRayRemover'), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'crr.getClass() should return ''CosmicRayRemover''.')
	assert(strcmp(Element.getClass(crr), 'CosmicRayRemover'), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(crr) should return ''CosmicRayRemover''.')
	assert(strcmp(Element.getClass('CosmicRayRemover'), 'CosmicRayRemover'), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''CosmicRayRemover'') should return ''CosmicRayRemover''.')
	 
	% getSubclasses()
	assert(isequal(CosmicRayRemover.getSubclasses(), subclasses('CosmicRayRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.getSubclasses() should return the same result as subclasses(''CosmicRayRemover'', [], [], true).')
	assert(isequal(crr.getSubclasses(), subclasses('CosmicRayRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''CosmicRayRemover'', [], [], true).')
	assert(isequal(Element.getSubclasses(crr), subclasses('CosmicRayRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(crr) should return the same result as subclasses(''CosmicRayRemover'', [], [], true).')
	assert(isequal(Element.getSubclasses('CosmicRayRemover'), subclasses('CosmicRayRemover', [], [], true)), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''CosmicRayRemover'') should return the same result as subclasses(''CosmicRayRemover'', [], [], true).')
	 
	% getProps()
	assert(isempty(CosmicRayRemover.getProps()) || isequal(CosmicRayRemover.getProps(), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.getProps() should return a row vector [1:1:N].')
	assert(isempty(CosmicRayRemover.getProps()) || isequal(crr.getProps(), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'crr.getProps() should return a row vector [1:1:N].')
	assert(isempty(CosmicRayRemover.getProps()) || isequal(Element.getProps(crr), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(crr) should return a row vector [1:1:N].')
	assert(isempty(CosmicRayRemover.getProps()) || isequal(Element.getProps('CosmicRayRemover'), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CosmicRayRemover'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) CosmicRayRemover.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.getProps(category) does not work.')
	tmp = cellfun(@(category) crr.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'crr.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(crr, category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(crr, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('CosmicRayRemover', category), categories, 'UniformOutput', false);
	assert(isempty(CosmicRayRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(CosmicRayRemover.getProps())), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''CosmicRayRemover'', category) does not work.')
	 
	% getPropNumber()
	assert(CosmicRayRemover.getPropNumber() == length(CosmicRayRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.getPropNumber() should return the number of properties.')
	assert(crr.getPropNumber() == length(CosmicRayRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'crr.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(crr) == length(CosmicRayRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(crr) should return the number of properties.')
	assert(Element.getPropNumber('CosmicRayRemover') == length(CosmicRayRemover.getProps()), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CosmicRayRemover'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) CosmicRayRemover.getPropNumber(category), categories)) == CosmicRayRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) crr.getPropNumber(category), categories)) == CosmicRayRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'crr.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(crr, category), categories)) == CosmicRayRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(crr, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('CosmicRayRemover', category), categories)) == CosmicRayRemover.getPropNumber(), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''CosmicRayRemover'', category) does not work.')
	 
	% existsProp(prop)
	assert(~CosmicRayRemover.existsProp(NaN), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.existsProp(prop) does not work.')
	assert(~crr.existsProp(NaN), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'crr.existsProp(prop) does not work.')
	assert(~Element.existsProp(crr, NaN), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(crr, prop) does not work.')
	assert(~Element.existsProp('CosmicRayRemover', NaN), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''CosmicRayRemover'', prop) does not work.')
	 
	assert_with_error('CosmicRayRemover.existsProp(NaN)', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], crr)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], crr)
	assert_with_error('Element.existsProp(''CosmicRayRemover'', NaN)', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		assert(CosmicRayRemover.existsProp(prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.existsProp(prop) does not work.')
		assert(crr.existsProp(prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.existsProp(prop) does not work.')
		assert(Element.existsProp(crr, prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(crr, prop) does not work.')
		assert(Element.existsProp('CosmicRayRemover', prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''CosmicRayRemover'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~CosmicRayRemover.existsTag(''), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.existsTag(tag) does not work.')
	assert(~crr.existsTag(''), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'crr.existsTag(tag) does not work.')
	assert(~Element.existsTag(crr, ''), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(crr, tag) does not work.')
	assert(~Element.existsTag('CosmicRayRemover', ''), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''CosmicRayRemover'', tag) does not work.')
	 
	assert_with_error('CosmicRayRemover.existsTag('''')', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], crr)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], crr)
	assert_with_error('Element.existsTag(''CosmicRayRemover'', '''')', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
		assert(CosmicRayRemover.existsTag(tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.existsTag(tag) does not work.')
		assert(crr.existsTag(tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.existsTag(tag) does not work.')
		assert(Element.existsTag(crr, tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(crr, tga) does not work.')
		assert(Element.existsTag('CosmicRayRemover', tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''CosmicRayRemover'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		assert(CosmicRayRemover.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropProp(prop) does not work.')
		assert(crr.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropProp(prop) does not work.')
		assert(Element.getPropProp(crr, prop) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(crr, prop) does not work.')
		assert(Element.getPropProp('CosmicRayRemover', prop) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CosmicRayRemover'', prop) does not work.')
	 
		tag = crr.getPropTag(prop);
		assert(CosmicRayRemover.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropProp(tag) does not work.')
		assert(crr.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropProp(tag) does not work.')
		assert(Element.getPropProp(crr, tag) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(crr, tag) does not work.')
		assert(Element.getPropProp('CosmicRayRemover', prop) == prop, ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''CosmicRayRemover'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		assert(strcmp(CosmicRayRemover.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropTag(prop) does not work.')
		assert(strcmp(crr.getPropTag(prop), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(crr, prop), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(crr, prop) does not work.')
		assert(strcmp(Element.getPropTag('CosmicRayRemover', prop), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CosmicRayRemover'', prop) does not work.')
	 
		assert(strcmp(CosmicRayRemover.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropTag(tag) does not work.')
		assert(strcmp(crr.getPropTag(tag), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(crr, tag), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(crr, tag) does not work.')
		assert(strcmp(Element.getPropTag('CosmicRayRemover', prop), tag), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''CosmicRayRemover'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		assert(Category.existsCategory(CosmicRayRemover.getPropCategory(prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(crr.getPropCategory(prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crr, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(crr, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crr, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CosmicRayRemover'', prop) does not work.')
	 
		assert(Category.existsCategory(CosmicRayRemover.getPropCategory(tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(crr.getPropCategory(tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crr, tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(crr, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(crr, tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''CosmicRayRemover'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		assert(Format.existsFormat(CosmicRayRemover.getPropFormat(prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(crr.getPropFormat(prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crr, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(crr, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crr, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CosmicRayRemover'', prop) does not work.')
	 
		assert(Format.existsFormat(CosmicRayRemover.getPropFormat(tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(crr.getPropFormat(tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crr, tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(crr, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(crr, tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''CosmicRayRemover'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		assert(ischar(CosmicRayRemover.getPropDescription(prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropDescription(prop) does not work.')
		assert(ischar(crr.getPropDescription(prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(crr, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(crr, prop) does not work.')
		assert(ischar(Element.getPropDescription(crr, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CosmicRayRemover'', prop) does not work.')
	 
		assert(ischar(CosmicRayRemover.getPropDescription(tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.getPropDescription(tag) does not work.')
		assert(ischar(crr.getPropDescription(tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(crr, tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(crr, tag) does not work.')
		assert(ischar(Element.getPropDescription(crr, tag)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''CosmicRayRemover'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		settings = CosmicRayRemover.getPropSettings(prop);
		settings = crr.getPropSettings(prop);
		settings = Element.getPropSettings(crr, prop);
		settings = Element.getPropSettings('CosmicRayRemover', prop);
	 
		settings = CosmicRayRemover.getPropSettings(tag);
		settings = crr.getPropSettings(tag);
		settings = Element.getPropSettings(crr, tag);
		settings = Element.getPropSettings('CosmicRayRemover', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		default = CosmicRayRemover.getPropDefault(prop);
		default = crr.getPropDefault(prop);
		default = Element.getPropDefault(crr, prop);
		default = Element.getPropDefault('CosmicRayRemover', prop);
	 
		default = CosmicRayRemover.getPropDefault(tag);
		default = crr.getPropDefault(tag);
		default = Element.getPropDefault(crr, tag);
		default = Element.getPropDefault('CosmicRayRemover', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		conditioned_default = CosmicRayRemover.getPropDefaultConditioned(prop);
		conditioned_default = crr.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(crr, prop);
		conditioned_default = Element.getPropDefaultConditioned('CosmicRayRemover', prop);
	 
		conditioned_default = CosmicRayRemover.getPropDefaultConditioned(tag);
		conditioned_default = crr.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(crr, tag);
		conditioned_default = Element.getPropDefaultConditioned('CosmicRayRemover', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		tag = crr.getPropTag(prop);
	 
		assert(~CosmicRayRemover.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.checkProp(prop, value) does not work.')
		assert(~crr.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(crr, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crr, prop, value) does not work.')
		assert(~Element.checkProp('CosmicRayRemover', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayRemover'', prop, value) does not work.')
	 
		assert_with_error('CosmicRayRemover.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], prop, crr)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], prop, crr)
		assert_with_error('Element.checkProp(''CosmicRayRemover'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~CosmicRayRemover.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.checkProp(tag, value) does not work.')
		assert(~crr.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(crr, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crr, tag, value) does not work.')
		assert(~Element.checkProp('CosmicRayRemover', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayRemover'', tag, value) does not work.')
	 
		assert_with_error('CosmicRayRemover.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], tag, crr)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], tag, crr)
		assert_with_error('Element.checkProp(''CosmicRayRemover'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':CosmicRayRemover:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(CosmicRayRemover.checkProp(prop, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.checkProp(prop, <conditioned default value>) does not work.')
		assert(crr.checkProp(prop, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(crr, prop, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crr, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('CosmicRayRemover', prop, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayRemover'', prop, <conditioned default value>) does not work.')
	 
		assert(CosmicRayRemover.checkProp(tag, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.checkProp(tag, <conditioned default value>) does not work.')
		assert(crr.checkProp(tag, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'crr.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(crr, tag, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(crr, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('CosmicRayRemover', tag, Element.getPropDefaultConditioned(CosmicRayRemover, prop)), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''CosmicRayRemover'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, CosmicRayRemover.getPropDefault(CosmicRayRemover.TEMPLATE), ...
		CosmicRayRemover.ID, CosmicRayRemover.getPropDefault(CosmicRayRemover.ID), ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, CosmicRayRemover.getPropDefault(CosmicRayRemover.RE_IN), ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					crr.getr(prop) == CosmicRayRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayRemover.getCategoryName(CosmicRayRemover.getPropCategory(prop)) ', CosmicRayRemover.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					crr.getr(TAG) == CosmicRayRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayRemover.getCategoryName(CosmicRayRemover.getPropCategory(prop)) ', CosmicRayRemover.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayRemover.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(crr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(crr.getPropSettings(prop))
					assert( ...
						crr.checkFormat(crr.getPropFormat(prop), crr.get(prop)), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						crr.checkFormat(crr.getPropFormat(prop), crr.get(prop), crr.getPropSettings(prop)), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					crr.getr(prop) == CosmicRayRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayRemover.getCategoryName(CosmicRayRemover.getPropCategory(prop)) ', CosmicRayRemover.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					crr.getr(TAG) == CosmicRayRemover.getNoValue(), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' CosmicRayRemover.getCategoryName(CosmicRayRemover.getPropCategory(prop)) ', CosmicRayRemover.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in CosmicRayRemover.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':CosmicRayRemover']);
				assert( ...
					~isa(crr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(crr.getPropSettings(prop))
					assert( ...
						crr.checkFormat(crr.getPropFormat(prop), crr.get(prop)), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						crr.checkFormat(crr.getPropFormat(prop), crr.get(prop), crr.getPropSettings(prop)), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(crr.getr(prop), CosmicRayRemover.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by CosmicRayRemover.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CosmicRayRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(crr.getr(TAG), CosmicRayRemover.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' TAG ') must be inizialized to its default value ' ...
					'given by CosmicRayRemover.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in CosmicRayRemover.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, CosmicRayRemover.getPropDefault(CosmicRayRemover.TEMPLATE), ...
		CosmicRayRemover.ID, CosmicRayRemover.getPropDefault(CosmicRayRemover.ID), ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, CosmicRayRemover.getPropDefault(CosmicRayRemover.RE_IN), ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		switch CosmicRayRemover.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(crr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(crr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(crr.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(crr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					crr.checkFormat(crr.getPropFormat(prop), crr.getr(prop),crr.getPropSettings(prop)), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':CosmicRayRemover']);
				assert( ...
					~isa(crr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(crr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':CosmicRayRemover']);
	% 			assert( ...
	% 				~isa(crr.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
	% 				['CosmicRayRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(crr.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
	% 				['CosmicRayRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				crr.checkFormat(crr.getPropFormat(prop), crr.getr(prop),crr.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
	% 				['CosmicRayRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':CosmicRayRemover']);
				assert( ...
					~isa(crr.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(crr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(crr.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(crr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					crr.checkFormat(crr.getPropFormat(prop), crr.getr(prop),crr.getPropSettings(prop)), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if crr.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:CosmicRayRemover');
					delete(ancestor(crr.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(CosmicRayRemover.getProps(Category.RESULT))
		for prop = 1:1:CosmicRayRemover.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch CosmicRayRemover.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						crr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~crr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr = CosmicRayRemover();
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		assert( ...
			~crr.isLocked(prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayRemover.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~crr.isLocked(TAG), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayRemover.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	crr.lock()
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					crr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~crr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr = CosmicRayRemover();
	 
	warning_backup = warning('off', 'BRAPH2:CosmicRayRemover');
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		crr.lock(prop)
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					crr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~crr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr = CosmicRayRemover();
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		assert( ...
			crr.isChecked(prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayRemover.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			crr.isChecked(TAG), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayRemover.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	crr.unchecked()
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		assert( ...
			~crr.isChecked(prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayRemover.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	crr.checked()
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		assert( ...
			crr.isChecked(prop), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			['CosmicRayRemover.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic CosmicRayRemover
	crr_0 = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, CosmicRayRemover.getPropDefault(CosmicRayRemover.TEMPLATE), ...
		CosmicRayRemover.ID, CosmicRayRemover.getPropDefault(CosmicRayRemover.ID), ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, CosmicRayRemover.getPropDefault(CosmicRayRemover.RE_IN), ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	% CosmicRayRemover with 1st callbacks
	crr_1 = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, crr_0.getCallback(4), ..., ...
		CosmicRayRemover.ID, crr_0.getCallback(5), ..., ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, crr_0.getCallback(9), ..., ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	prop_number = CosmicRayRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(crr_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(crr_1.get(prop), crr_0.get(prop)) && ~isa(crr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(crr_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CosmicRayRemover with 2nd callbacks
	crr_2 = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, crr_1.getCallback(4), ..., ...
		CosmicRayRemover.ID, crr_1.getCallback(5), ..., ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, crr_1.getCallback(9), ..., ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	prop_number = CosmicRayRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(crr_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(crr_2.get(prop), crr_0.get(prop)) && ~isa(crr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(crr_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% CosmicRayRemover with 3rd callbacks
	crr_3 = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, crr_2.getCallback(4), ..., ...
		CosmicRayRemover.ID, crr_2.getCallback(5), ..., ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, crr_2.getCallback(9), ..., ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	prop_number = CosmicRayRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(crr_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(crr_3.get(prop), crr_0.get(prop)) && ~isa(crr_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(crr_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	crr = CosmicRayRemover();
	 
	crr_copy = crr.copy();
	 
	assert(crr_copy ~= crr, ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(crr_copy, crr), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		value = crr.getr(prop);
		value_copy = crr_copy.getr(prop);
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					crr_copy.isLocked(prop) == crr.isLocked(prop), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					crr_copy.isChecked(prop) == crr.isChecked(prop), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					crr_copy.getPropSeed(prop) == crr.getPropSeed(prop), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	crr = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, CosmicRayRemover.getPropDefault(CosmicRayRemover.TEMPLATE), ...
		CosmicRayRemover.ID, CosmicRayRemover.getPropDefault(CosmicRayRemover.ID), ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, CosmicRayRemover.getPropDefault(CosmicRayRemover.RE_IN), ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		if CosmicRayRemover.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':CosmicRayRemover']);
			% crr.memorize(prop);
			% warning(warning_backup)
		elseif CosmicRayRemover.getPropCategory(prop) == Category.EVANESCENT && crr.getPropFormat(prop) == Format.HANDLE
			crr.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:CosmicRayRemover');
			delete(ancestor(crr.get(prop), 'figure'))
			warning(warning_backup)
		else
			crr.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	crr_copy = crr.copy();
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		value = crr.getr(prop);
		value_copy = crr_copy.getr(prop);
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						crr_copy.isLocked(prop) == crr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crr_copy.isChecked(prop) == crr.isChecked(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crr_copy.getPropSeed(prop) == crr.getPropSeed(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	crr_0 = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, CosmicRayRemover.getPropDefault(CosmicRayRemover.TEMPLATE), ...
		CosmicRayRemover.ID, CosmicRayRemover.getPropDefault(CosmicRayRemover.ID), ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, CosmicRayRemover.getPropDefault(CosmicRayRemover.RE_IN), ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	crr = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, crr_0.getCallback(4), ..., ...
		CosmicRayRemover.ID, crr_0.getCallback(5), ..., ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, crr_0.getCallback(9), ..., ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	crr_copy = crr.copy();
	crr_0_copy = crr_copy.getr('ID').get('EL');
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
		value = crr.getr(prop);
		value_copy = crr_copy.getr(prop);
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					'CosmicRayRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
							'CosmicRayRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == crr_0.getCallback(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The callback should be obtained from CosmicRayRemover.getCallback().' ...
						)
					assert( ...
						value_copy == crr_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The callback should be obtained from CosmicRayRemover.getCallback().' ...
						)
				end
	 
					assert( ...
						crr_copy.isLocked(prop) == crr.isLocked(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crr_copy.isChecked(prop) == crr.isChecked(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						crr_copy.getPropSeed(prop) == crr.getPropSeed(prop), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr_template = CosmicRayRemover();
	crr = CosmicRayRemover('TEMPLATE', crr_template);
	 
	for prop = 1:1:CosmicRayRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(CosmicRayRemover.getPropTag(prop));
		switch CosmicRayRemover.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == CosmicRayRemover.TEMPLATE
					assert( ...
						isa(crr.getr(prop), 'CosmicRayRemover'), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover TEMPLATE does not work. CosmicRayRemover.getr(''TEMPLATE'') should be a CosmicRayRemover element.' ...
						)
					assert( ...
						isa(crr_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						'CosmicRayRemover TEMPLATE does not work. CosmicRayRemover_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(crr.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover TEMPLATE does not work. CosmicRayRemover.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						crr.getr(prop).get('EL') == crr_template && crr.getr(prop).get('PROP') == prop && strcmp(crr.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover TEMPLATE does not work. CosmicRayRemover.getr(' TAG ') should be a Callback to crr_template.' TAG '.'] ...
						)
					assert( ...
						isa(crr_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
						['CosmicRayRemover TEMPLATE does not work. CosmicRayRemover_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(crr.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover TEMPLATE does not work. CosmicRayRemover.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(crr_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
					['CosmicRayRemover TEMPLATE does not work. CosmicRayRemover_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, CosmicRayRemover.getPropDefault(CosmicRayRemover.TEMPLATE), ...
		CosmicRayRemover.ID, CosmicRayRemover.getPropDefault(CosmicRayRemover.ID), ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, CosmicRayRemover.getPropDefault(CosmicRayRemover.RE_IN), ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'cosmicrayremover_to_be_erased.b2'];
	 
	Element.save(crr, filename)
	 
	crr_loaded = Element.load(filename);
	 
	assert( ...
		isequal(crr.copy(), crr_loaded), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.save(crr) and/or CosmicRayRemover.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	crr = CosmicRayRemover( ...
		CosmicRayRemover.ELCLASS, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.NAME, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.DESCRIPTION, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.TEMPLATE, CosmicRayRemover.getPropDefault(CosmicRayRemover.TEMPLATE), ...
		CosmicRayRemover.ID, CosmicRayRemover.getPropDefault(CosmicRayRemover.ID), ...
		CosmicRayRemover.LABEL, CosmicRayRemover.getPropDefault(CosmicRayRemover.LABEL), ...
		CosmicRayRemover.NOTES, CosmicRayRemover.getPropDefault(CosmicRayRemover.NOTES), ...
		CosmicRayRemover.TOSTRING, CosmicRayRemover.getNoValue(), ...
		CosmicRayRemover.RE_IN, CosmicRayRemover.getPropDefault(CosmicRayRemover.RE_IN), ...
		CosmicRayRemover.RE_OUT, CosmicRayRemover.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(crr);
	[crr_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(crr_dec ~= crr, ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		'CosmicRayRemover.encodeJSON() or CosmicRayRemover.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) CosmicRayRemover.getPropFormat(prop), num2cell(CosmicRayRemover.getProps())) == Format.HANDLE) && all(cellfun(@(prop) CosmicRayRemover.getPropFormat(prop), num2cell(CosmicRayRemover.getProps())) == Format.NET)
		assert(isequal(crr_dec, crr), ...
			[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
			'CosmicRayRemover.encodeJSON() or CosmicRayRemover.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':CosmicRayRemover:' BRAPH2.FAIL_TEST], ...
		[' When testing CosmicRayRemover no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

