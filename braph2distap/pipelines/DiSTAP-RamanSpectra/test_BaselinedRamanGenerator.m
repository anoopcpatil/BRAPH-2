%TEST_BASELINEDRAMANGENERATOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	brgen = BaselinedRamanGenerator();
	 
	% get('ELCLASS')
	if isa(BaselinedRamanGenerator, 'ConcreteElement')
		assert(strcmp(BaselinedRamanGenerator().get('ELCLASS'), 'BaselinedRamanGenerator'), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator().get(''ELCLASS'') should return ''BaselinedRamanGenerator''.')
	end
	 
	% getClass
	assert(strcmp(BaselinedRamanGenerator.getClass(), 'BaselinedRamanGenerator'), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.getClass() should return ''BaselinedRamanGenerator''.')
	assert(strcmp(brgen.getClass(), 'BaselinedRamanGenerator'), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'brgen.getClass() should return ''BaselinedRamanGenerator''.')
	assert(strcmp(Element.getClass(brgen), 'BaselinedRamanGenerator'), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(brgen) should return ''BaselinedRamanGenerator''.')
	assert(strcmp(Element.getClass('BaselinedRamanGenerator'), 'BaselinedRamanGenerator'), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''BaselinedRamanGenerator'') should return ''BaselinedRamanGenerator''.')
	 
	% getSubclasses()
	assert(isequal(BaselinedRamanGenerator.getSubclasses(), subclasses('BaselinedRamanGenerator', [], [], true)), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.getSubclasses() should return the same result as subclasses(''BaselinedRamanGenerator'', [], [], true).')
	assert(isequal(brgen.getSubclasses(), subclasses('BaselinedRamanGenerator', [], [], true)), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''BaselinedRamanGenerator'', [], [], true).')
	assert(isequal(Element.getSubclasses(brgen), subclasses('BaselinedRamanGenerator', [], [], true)), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(brgen) should return the same result as subclasses(''BaselinedRamanGenerator'', [], [], true).')
	assert(isequal(Element.getSubclasses('BaselinedRamanGenerator'), subclasses('BaselinedRamanGenerator', [], [], true)), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''BaselinedRamanGenerator'') should return the same result as subclasses(''BaselinedRamanGenerator'', [], [], true).')
	 
	% getProps()
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(BaselinedRamanGenerator.getProps(), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.getProps() should return a row vector [1:1:N].')
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(brgen.getProps(), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'brgen.getProps() should return a row vector [1:1:N].')
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(Element.getProps(brgen), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(brgen) should return a row vector [1:1:N].')
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(Element.getProps('BaselinedRamanGenerator'), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BaselinedRamanGenerator'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) BaselinedRamanGenerator.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.getProps(category) does not work.')
	tmp = cellfun(@(category) brgen.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'brgen.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(brgen, category), categories, 'UniformOutput', false);
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(brgen, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('BaselinedRamanGenerator', category), categories, 'UniformOutput', false);
	assert(isempty(BaselinedRamanGenerator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselinedRamanGenerator.getProps())), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BaselinedRamanGenerator'', category) does not work.')
	 
	% getPropNumber()
	assert(BaselinedRamanGenerator.getPropNumber() == length(BaselinedRamanGenerator.getProps()), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.getPropNumber() should return the number of properties.')
	assert(brgen.getPropNumber() == length(BaselinedRamanGenerator.getProps()), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'brgen.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(brgen) == length(BaselinedRamanGenerator.getProps()), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(brgen) should return the number of properties.')
	assert(Element.getPropNumber('BaselinedRamanGenerator') == length(BaselinedRamanGenerator.getProps()), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BaselinedRamanGenerator'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) BaselinedRamanGenerator.getPropNumber(category), categories)) == BaselinedRamanGenerator.getPropNumber(), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) brgen.getPropNumber(category), categories)) == BaselinedRamanGenerator.getPropNumber(), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'brgen.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(brgen, category), categories)) == BaselinedRamanGenerator.getPropNumber(), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(brgen, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('BaselinedRamanGenerator', category), categories)) == BaselinedRamanGenerator.getPropNumber(), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BaselinedRamanGenerator'', category) does not work.')
	 
	% existsProp(prop)
	assert(~BaselinedRamanGenerator.existsProp(NaN), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.existsProp(prop) does not work.')
	assert(~brgen.existsProp(NaN), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'brgen.existsProp(prop) does not work.')
	assert(~Element.existsProp(brgen, NaN), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(brgen, prop) does not work.')
	assert(~Element.existsProp('BaselinedRamanGenerator', NaN), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''BaselinedRamanGenerator'', prop) does not work.')
	 
	assert_with_error('BaselinedRamanGenerator.existsProp(NaN)', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], brgen)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], brgen)
	assert_with_error('Element.existsProp(''BaselinedRamanGenerator'', NaN)', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		assert(BaselinedRamanGenerator.existsProp(prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.existsProp(prop) does not work.')
		assert(brgen.existsProp(prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.existsProp(prop) does not work.')
		assert(Element.existsProp(brgen, prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(brgen, prop) does not work.')
		assert(Element.existsProp('BaselinedRamanGenerator', prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''BaselinedRamanGenerator'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~BaselinedRamanGenerator.existsTag(''), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.existsTag(tag) does not work.')
	assert(~brgen.existsTag(''), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'brgen.existsTag(tag) does not work.')
	assert(~Element.existsTag(brgen, ''), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(brgen, tag) does not work.')
	assert(~Element.existsTag('BaselinedRamanGenerator', ''), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''BaselinedRamanGenerator'', tag) does not work.')
	 
	assert_with_error('BaselinedRamanGenerator.existsTag('''')', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], brgen)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], brgen)
	assert_with_error('Element.existsTag(''BaselinedRamanGenerator'', '''')', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
		assert(BaselinedRamanGenerator.existsTag(tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.existsTag(tag) does not work.')
		assert(brgen.existsTag(tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.existsTag(tag) does not work.')
		assert(Element.existsTag(brgen, tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(brgen, tga) does not work.')
		assert(Element.existsTag('BaselinedRamanGenerator', tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''BaselinedRamanGenerator'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		assert(BaselinedRamanGenerator.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropProp(prop) does not work.')
		assert(brgen.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropProp(prop) does not work.')
		assert(Element.getPropProp(brgen, prop) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(brgen, prop) does not work.')
		assert(Element.getPropProp('BaselinedRamanGenerator', prop) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BaselinedRamanGenerator'', prop) does not work.')
	 
		tag = brgen.getPropTag(prop);
		assert(BaselinedRamanGenerator.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropProp(tag) does not work.')
		assert(brgen.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropProp(tag) does not work.')
		assert(Element.getPropProp(brgen, tag) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(brgen, tag) does not work.')
		assert(Element.getPropProp('BaselinedRamanGenerator', prop) == prop, ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BaselinedRamanGenerator'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		assert(strcmp(BaselinedRamanGenerator.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropTag(prop) does not work.')
		assert(strcmp(brgen.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(brgen, prop), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(brgen, prop) does not work.')
		assert(strcmp(Element.getPropTag('BaselinedRamanGenerator', prop), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BaselinedRamanGenerator'', prop) does not work.')
	 
		assert(strcmp(BaselinedRamanGenerator.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropTag(tag) does not work.')
		assert(strcmp(brgen.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(brgen, tag), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(brgen, tag) does not work.')
		assert(strcmp(Element.getPropTag('BaselinedRamanGenerator', prop), tag), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BaselinedRamanGenerator'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		assert(Category.existsCategory(BaselinedRamanGenerator.getPropCategory(prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(brgen.getPropCategory(prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(brgen, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(brgen, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(brgen, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BaselinedRamanGenerator'', prop) does not work.')
	 
		assert(Category.existsCategory(BaselinedRamanGenerator.getPropCategory(tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(brgen.getPropCategory(tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(brgen, tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(brgen, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(brgen, tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BaselinedRamanGenerator'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		assert(Format.existsFormat(BaselinedRamanGenerator.getPropFormat(prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(brgen.getPropFormat(prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(brgen, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(brgen, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(brgen, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BaselinedRamanGenerator'', prop) does not work.')
	 
		assert(Format.existsFormat(BaselinedRamanGenerator.getPropFormat(tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(brgen.getPropFormat(tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(brgen, tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(brgen, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(brgen, tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BaselinedRamanGenerator'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		assert(ischar(BaselinedRamanGenerator.getPropDescription(prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropDescription(prop) does not work.')
		assert(ischar(brgen.getPropDescription(prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(brgen, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(brgen, prop) does not work.')
		assert(ischar(Element.getPropDescription(brgen, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BaselinedRamanGenerator'', prop) does not work.')
	 
		assert(ischar(BaselinedRamanGenerator.getPropDescription(tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.getPropDescription(tag) does not work.')
		assert(ischar(brgen.getPropDescription(tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(brgen, tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(brgen, tag) does not work.')
		assert(ischar(Element.getPropDescription(brgen, tag)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BaselinedRamanGenerator'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		settings = BaselinedRamanGenerator.getPropSettings(prop);
		settings = brgen.getPropSettings(prop);
		settings = Element.getPropSettings(brgen, prop);
		settings = Element.getPropSettings('BaselinedRamanGenerator', prop);
	 
		settings = BaselinedRamanGenerator.getPropSettings(tag);
		settings = brgen.getPropSettings(tag);
		settings = Element.getPropSettings(brgen, tag);
		settings = Element.getPropSettings('BaselinedRamanGenerator', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		default = BaselinedRamanGenerator.getPropDefault(prop);
		default = brgen.getPropDefault(prop);
		default = Element.getPropDefault(brgen, prop);
		default = Element.getPropDefault('BaselinedRamanGenerator', prop);
	 
		default = BaselinedRamanGenerator.getPropDefault(tag);
		default = brgen.getPropDefault(tag);
		default = Element.getPropDefault(brgen, tag);
		default = Element.getPropDefault('BaselinedRamanGenerator', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		conditioned_default = BaselinedRamanGenerator.getPropDefaultConditioned(prop);
		conditioned_default = brgen.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(brgen, prop);
		conditioned_default = Element.getPropDefaultConditioned('BaselinedRamanGenerator', prop);
	 
		conditioned_default = BaselinedRamanGenerator.getPropDefaultConditioned(tag);
		conditioned_default = brgen.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(brgen, tag);
		conditioned_default = Element.getPropDefaultConditioned('BaselinedRamanGenerator', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		tag = brgen.getPropTag(prop);
	 
		assert(~BaselinedRamanGenerator.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.checkProp(prop, value) does not work.')
		assert(~brgen.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(brgen, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(brgen, prop, value) does not work.')
		assert(~Element.checkProp('BaselinedRamanGenerator', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselinedRamanGenerator'', prop, value) does not work.')
	 
		assert_with_error('BaselinedRamanGenerator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], prop, brgen)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], prop, brgen)
		assert_with_error('Element.checkProp(''BaselinedRamanGenerator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~BaselinedRamanGenerator.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.checkProp(tag, value) does not work.')
		assert(~brgen.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(brgen, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(brgen, tag, value) does not work.')
		assert(~Element.checkProp('BaselinedRamanGenerator', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselinedRamanGenerator'', tag, value) does not work.')
	 
		assert_with_error('BaselinedRamanGenerator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], tag, brgen)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], tag, brgen)
		assert_with_error('Element.checkProp(''BaselinedRamanGenerator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(BaselinedRamanGenerator.checkProp(prop, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.checkProp(prop, <conditioned default value>) does not work.')
		assert(brgen.checkProp(prop, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(brgen, prop, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(brgen, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('BaselinedRamanGenerator', prop, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselinedRamanGenerator'', prop, <conditioned default value>) does not work.')
	 
		assert(BaselinedRamanGenerator.checkProp(tag, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.checkProp(tag, <conditioned default value>) does not work.')
		assert(brgen.checkProp(tag, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'brgen.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(brgen, tag, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(brgen, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('BaselinedRamanGenerator', tag, Element.getPropDefaultConditioned(BaselinedRamanGenerator, prop)), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselinedRamanGenerator'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.TEMPLATE), ...
		BaselinedRamanGenerator.ID, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.ID), ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.RE_IN), ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.REPF) ...
		);
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					brgen.getr(prop) == BaselinedRamanGenerator.getNoValue(), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselinedRamanGenerator.getCategoryName(BaselinedRamanGenerator.getPropCategory(prop)) ', BaselinedRamanGenerator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselinedRamanGenerator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					brgen.getr(TAG) == BaselinedRamanGenerator.getNoValue(), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselinedRamanGenerator.getCategoryName(BaselinedRamanGenerator.getPropCategory(prop)) ', BaselinedRamanGenerator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselinedRamanGenerator.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(brgen.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(brgen.getPropSettings(prop))
					assert( ...
						brgen.checkFormat(brgen.getPropFormat(prop), brgen.get(prop)), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						brgen.checkFormat(brgen.getPropFormat(prop), brgen.get(prop), brgen.getPropSettings(prop)), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					brgen.getr(prop) == BaselinedRamanGenerator.getNoValue(), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselinedRamanGenerator.getCategoryName(BaselinedRamanGenerator.getPropCategory(prop)) ', BaselinedRamanGenerator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselinedRamanGenerator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					brgen.getr(TAG) == BaselinedRamanGenerator.getNoValue(), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselinedRamanGenerator.getCategoryName(BaselinedRamanGenerator.getPropCategory(prop)) ', BaselinedRamanGenerator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselinedRamanGenerator.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':BaselinedRamanGenerator']);
				assert( ...
					~isa(brgen.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(brgen.getPropSettings(prop))
					assert( ...
						brgen.checkFormat(brgen.getPropFormat(prop), brgen.get(prop)), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						brgen.checkFormat(brgen.getPropFormat(prop), brgen.get(prop), brgen.getPropSettings(prop)), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(brgen.getr(prop), BaselinedRamanGenerator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by BaselinedRamanGenerator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BaselinedRamanGenerator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(brgen.getr(TAG), BaselinedRamanGenerator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' TAG ') must be inizialized to its default value ' ...
					'given by BaselinedRamanGenerator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BaselinedRamanGenerator.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.TEMPLATE), ...
		BaselinedRamanGenerator.ID, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.ID), ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.RE_IN), ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.REPF) ...
		);
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(brgen.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(brgen.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(brgen.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(brgen.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					brgen.checkFormat(brgen.getPropFormat(prop), brgen.getr(prop),brgen.getPropSettings(prop)), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':BaselinedRamanGenerator']);
				assert( ...
					~isa(brgen.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(brgen.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':BaselinedRamanGenerator']);
	% 			assert( ...
	% 				~isa(brgen.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
	% 				['BaselinedRamanGenerator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(brgen.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
	% 				['BaselinedRamanGenerator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				brgen.checkFormat(brgen.getPropFormat(prop), brgen.getr(prop),brgen.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
	% 				['BaselinedRamanGenerator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':BaselinedRamanGenerator']);
				assert( ...
					~isa(brgen.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(brgen.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(brgen.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(brgen.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					brgen.checkFormat(brgen.getPropFormat(prop), brgen.getr(prop),brgen.getPropSettings(prop)), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if brgen.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:BaselinedRamanGenerator');
					delete(ancestor(brgen.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(BaselinedRamanGenerator.getProps(Category.RESULT))
		for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch BaselinedRamanGenerator.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						brgen.isLocked(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~brgen.isLocked(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen = BaselinedRamanGenerator();
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		assert( ...
			~brgen.isLocked(prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			['BaselinedRamanGenerator.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~brgen.isLocked(TAG), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			['BaselinedRamanGenerator.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	brgen.lock()
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					brgen.isLocked(prop), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~brgen.isLocked(prop), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen = BaselinedRamanGenerator();
	 
	warning_backup = warning('off', 'BRAPH2:BaselinedRamanGenerator');
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		brgen.lock(prop)
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					brgen.isLocked(prop), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~brgen.isLocked(prop), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen = BaselinedRamanGenerator();
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		assert( ...
			brgen.isChecked(prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			['BaselinedRamanGenerator.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			brgen.isChecked(TAG), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			['BaselinedRamanGenerator.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	brgen.unchecked()
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		assert( ...
			~brgen.isChecked(prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			['BaselinedRamanGenerator.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	brgen.checked()
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		assert( ...
			brgen.isChecked(prop), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			['BaselinedRamanGenerator.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic BaselinedRamanGenerator
	brgen_0 = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.TEMPLATE), ...
		BaselinedRamanGenerator.ID, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.ID), ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.RE_IN), ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.REPF) ...
		);
	 
	% BaselinedRamanGenerator with 1st callbacks
	brgen_1 = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, brgen_0.getCallback(4), ..., ...
		BaselinedRamanGenerator.ID, brgen_0.getCallback(5), ..., ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, brgen_0.getCallback(9), ..., ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, brgen_0.getCallback(11) ... ...
		);
	 
	prop_number = BaselinedRamanGenerator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(brgen_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(brgen_1.get(prop), brgen_0.get(prop)) && ~isa(brgen_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(brgen_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BaselinedRamanGenerator with 2nd callbacks
	brgen_2 = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, brgen_1.getCallback(4), ..., ...
		BaselinedRamanGenerator.ID, brgen_1.getCallback(5), ..., ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, brgen_1.getCallback(9), ..., ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, brgen_1.getCallback(11) ... ...
		);
	 
	prop_number = BaselinedRamanGenerator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(brgen_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(brgen_2.get(prop), brgen_0.get(prop)) && ~isa(brgen_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(brgen_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BaselinedRamanGenerator with 3rd callbacks
	brgen_3 = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, brgen_2.getCallback(4), ..., ...
		BaselinedRamanGenerator.ID, brgen_2.getCallback(5), ..., ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, brgen_2.getCallback(9), ..., ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, brgen_2.getCallback(11) ... ...
		);
	 
	prop_number = BaselinedRamanGenerator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(brgen_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(brgen_3.get(prop), brgen_0.get(prop)) && ~isa(brgen_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(brgen_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	brgen = BaselinedRamanGenerator();
	 
	brgen_copy = brgen.copy();
	 
	assert(brgen_copy ~= brgen, ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(brgen_copy, brgen), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		value = brgen.getr(prop);
		value_copy = brgen_copy.getr(prop);
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					'BaselinedRamanGenerator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
							'BaselinedRamanGenerator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
							'BaselinedRamanGenerator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					brgen_copy.isLocked(prop) == brgen.isLocked(prop), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					'BaselinedRamanGenerator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					brgen_copy.isChecked(prop) == brgen.isChecked(prop), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					'BaselinedRamanGenerator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					brgen_copy.getPropSeed(prop) == brgen.getPropSeed(prop), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					'BaselinedRamanGenerator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	brgen = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.TEMPLATE), ...
		BaselinedRamanGenerator.ID, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.ID), ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.RE_IN), ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.REPF) ...
		);
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		if BaselinedRamanGenerator.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':BaselinedRamanGenerator']);
			% brgen.memorize(prop);
			% warning(warning_backup)
		elseif BaselinedRamanGenerator.getPropCategory(prop) == Category.EVANESCENT && brgen.getPropFormat(prop) == Format.HANDLE
			brgen.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:BaselinedRamanGenerator');
			delete(ancestor(brgen.get(prop), 'figure'))
			warning(warning_backup)
		else
			brgen.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	brgen_copy = brgen.copy();
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		value = brgen.getr(prop);
		value_copy = brgen_copy.getr(prop);
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					'BaselinedRamanGenerator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
							'BaselinedRamanGenerator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
							'BaselinedRamanGenerator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						brgen_copy.isLocked(prop) == brgen.isLocked(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						brgen_copy.isChecked(prop) == brgen.isChecked(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						brgen_copy.getPropSeed(prop) == brgen.getPropSeed(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	brgen_0 = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.TEMPLATE), ...
		BaselinedRamanGenerator.ID, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.ID), ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.RE_IN), ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.REPF) ...
		);
	 
	brgen = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, brgen_0.getCallback(4), ..., ...
		BaselinedRamanGenerator.ID, brgen_0.getCallback(5), ..., ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, brgen_0.getCallback(9), ..., ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, brgen_0.getCallback(11) ... ...
		);
	 
	brgen_copy = brgen.copy();
	brgen_0_copy = brgen_copy.getr('ID').get('EL');
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
		value = brgen.getr(prop);
		value_copy = brgen_copy.getr(prop);
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					'BaselinedRamanGenerator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
							'BaselinedRamanGenerator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
							'BaselinedRamanGenerator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == brgen_0.getCallback(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The callback should be obtained from BaselinedRamanGenerator.getCallback().' ...
						)
					assert( ...
						value_copy == brgen_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The callback should be obtained from BaselinedRamanGenerator.getCallback().' ...
						)
				end
	 
					assert( ...
						brgen_copy.isLocked(prop) == brgen.isLocked(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						brgen_copy.isChecked(prop) == brgen.isChecked(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						brgen_copy.getPropSeed(prop) == brgen.getPropSeed(prop), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen_template = BaselinedRamanGenerator();
	brgen = BaselinedRamanGenerator('TEMPLATE', brgen_template);
	 
	for prop = 1:1:BaselinedRamanGenerator.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(BaselinedRamanGenerator.getPropTag(prop));
		switch BaselinedRamanGenerator.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == BaselinedRamanGenerator.TEMPLATE
					assert( ...
						isa(brgen.getr(prop), 'BaselinedRamanGenerator'), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator TEMPLATE does not work. BaselinedRamanGenerator.getr(''TEMPLATE'') should be a BaselinedRamanGenerator element.' ...
						)
					assert( ...
						isa(brgen_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						'BaselinedRamanGenerator TEMPLATE does not work. BaselinedRamanGenerator_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(brgen.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator TEMPLATE does not work. BaselinedRamanGenerator.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						brgen.getr(prop).get('EL') == brgen_template && brgen.getr(prop).get('PROP') == prop && strcmp(brgen.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator TEMPLATE does not work. BaselinedRamanGenerator.getr(' TAG ') should be a Callback to brgen_template.' TAG '.'] ...
						)
					assert( ...
						isa(brgen_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
						['BaselinedRamanGenerator TEMPLATE does not work. BaselinedRamanGenerator_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(brgen.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator TEMPLATE does not work. BaselinedRamanGenerator.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(brgen_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
					['BaselinedRamanGenerator TEMPLATE does not work. BaselinedRamanGenerator_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.TEMPLATE), ...
		BaselinedRamanGenerator.ID, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.ID), ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.RE_IN), ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.REPF) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'baselinedramangenerator_to_be_erased.b2'];
	 
	Element.save(brgen, filename)
	 
	brgen_loaded = Element.load(filename);
	 
	assert( ...
		isequal(brgen.copy(), brgen_loaded), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.save(brgen) and/or BaselinedRamanGenerator.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	brgen = BaselinedRamanGenerator( ...
		BaselinedRamanGenerator.ELCLASS, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.NAME, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.DESCRIPTION, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.TEMPLATE, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.TEMPLATE), ...
		BaselinedRamanGenerator.ID, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.ID), ...
		BaselinedRamanGenerator.LABEL, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.LABEL), ...
		BaselinedRamanGenerator.NOTES, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.NOTES), ...
		BaselinedRamanGenerator.TOSTRING, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.RE_IN, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.RE_IN), ...
		BaselinedRamanGenerator.RE_OUT, BaselinedRamanGenerator.getNoValue(), ...
		BaselinedRamanGenerator.REPF, BaselinedRamanGenerator.getPropDefault(BaselinedRamanGenerator.REPF) ...
		);
	 
	[json, struct, el_list] = encodeJSON(brgen);
	[brgen_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(brgen_dec ~= brgen, ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		'BaselinedRamanGenerator.encodeJSON() or BaselinedRamanGenerator.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) BaselinedRamanGenerator.getPropFormat(prop), num2cell(BaselinedRamanGenerator.getProps())) == Format.HANDLE) && all(cellfun(@(prop) BaselinedRamanGenerator.getPropFormat(prop), num2cell(BaselinedRamanGenerator.getProps())) == Format.NET)
		assert(isequal(brgen_dec, brgen), ...
			[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
			'BaselinedRamanGenerator.encodeJSON() or BaselinedRamanGenerator.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':BaselinedRamanGenerator:' BRAPH2.FAIL_TEST], ...
		[' When testing BaselinedRamanGenerator no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

