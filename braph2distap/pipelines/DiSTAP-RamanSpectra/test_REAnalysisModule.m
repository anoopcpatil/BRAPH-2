%TEST_REANALYSISMODULE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	ream = REAnalysisModule();
	 
	% get('ELCLASS')
	if isa(REAnalysisModule, 'ConcreteElement')
		assert(strcmp(REAnalysisModule().get('ELCLASS'), 'REAnalysisModule'), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule().get(''ELCLASS'') should return ''REAnalysisModule''.')
	end
	 
	% getClass
	assert(strcmp(REAnalysisModule.getClass(), 'REAnalysisModule'), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.getClass() should return ''REAnalysisModule''.')
	assert(strcmp(ream.getClass(), 'REAnalysisModule'), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'ream.getClass() should return ''REAnalysisModule''.')
	assert(strcmp(Element.getClass(ream), 'REAnalysisModule'), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(ream) should return ''REAnalysisModule''.')
	assert(strcmp(Element.getClass('REAnalysisModule'), 'REAnalysisModule'), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''REAnalysisModule'') should return ''REAnalysisModule''.')
	 
	% getSubclasses()
	assert(isequal(REAnalysisModule.getSubclasses(), subclasses('REAnalysisModule', [], [], true)), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.getSubclasses() should return the same result as subclasses(''REAnalysisModule'', [], [], true).')
	assert(isequal(ream.getSubclasses(), subclasses('REAnalysisModule', [], [], true)), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''REAnalysisModule'', [], [], true).')
	assert(isequal(Element.getSubclasses(ream), subclasses('REAnalysisModule', [], [], true)), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(ream) should return the same result as subclasses(''REAnalysisModule'', [], [], true).')
	assert(isequal(Element.getSubclasses('REAnalysisModule'), subclasses('REAnalysisModule', [], [], true)), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''REAnalysisModule'') should return the same result as subclasses(''REAnalysisModule'', [], [], true).')
	 
	% getProps()
	assert(isempty(REAnalysisModule.getProps()) || isequal(REAnalysisModule.getProps(), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.getProps() should return a row vector [1:1:N].')
	assert(isempty(REAnalysisModule.getProps()) || isequal(ream.getProps(), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'ream.getProps() should return a row vector [1:1:N].')
	assert(isempty(REAnalysisModule.getProps()) || isequal(Element.getProps(ream), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ream) should return a row vector [1:1:N].')
	assert(isempty(REAnalysisModule.getProps()) || isequal(Element.getProps('REAnalysisModule'), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''REAnalysisModule'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) REAnalysisModule.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(REAnalysisModule.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.getProps(category) does not work.')
	tmp = cellfun(@(category) ream.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(REAnalysisModule.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'ream.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(ream, category), categories, 'UniformOutput', false);
	assert(isempty(REAnalysisModule.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(ream, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('REAnalysisModule', category), categories, 'UniformOutput', false);
	assert(isempty(REAnalysisModule.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(REAnalysisModule.getProps())), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''REAnalysisModule'', category) does not work.')
	 
	% getPropNumber()
	assert(REAnalysisModule.getPropNumber() == length(REAnalysisModule.getProps()), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.getPropNumber() should return the number of properties.')
	assert(ream.getPropNumber() == length(REAnalysisModule.getProps()), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'ream.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(ream) == length(REAnalysisModule.getProps()), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ream) should return the number of properties.')
	assert(Element.getPropNumber('REAnalysisModule') == length(REAnalysisModule.getProps()), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''REAnalysisModule'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) REAnalysisModule.getPropNumber(category), categories)) == REAnalysisModule.getPropNumber(), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) ream.getPropNumber(category), categories)) == REAnalysisModule.getPropNumber(), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'ream.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(ream, category), categories)) == REAnalysisModule.getPropNumber(), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(ream, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('REAnalysisModule', category), categories)) == REAnalysisModule.getPropNumber(), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''REAnalysisModule'', category) does not work.')
	 
	% existsProp(prop)
	assert(~REAnalysisModule.existsProp(NaN), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.existsProp(prop) does not work.')
	assert(~ream.existsProp(NaN), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'ream.existsProp(prop) does not work.')
	assert(~Element.existsProp(ream, NaN), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(ream, prop) does not work.')
	assert(~Element.existsProp('REAnalysisModule', NaN), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''REAnalysisModule'', prop) does not work.')
	 
	assert_with_error('REAnalysisModule.existsProp(NaN)', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], ream)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], ream)
	assert_with_error('Element.existsProp(''REAnalysisModule'', NaN)', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		assert(REAnalysisModule.existsProp(prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.existsProp(prop) does not work.')
		assert(ream.existsProp(prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.existsProp(prop) does not work.')
		assert(Element.existsProp(ream, prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(ream, prop) does not work.')
		assert(Element.existsProp('REAnalysisModule', prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''REAnalysisModule'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~REAnalysisModule.existsTag(''), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.existsTag(tag) does not work.')
	assert(~ream.existsTag(''), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'ream.existsTag(tag) does not work.')
	assert(~Element.existsTag(ream, ''), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(ream, tag) does not work.')
	assert(~Element.existsTag('REAnalysisModule', ''), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''REAnalysisModule'', tag) does not work.')
	 
	assert_with_error('REAnalysisModule.existsTag('''')', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], ream)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], ream)
	assert_with_error('Element.existsTag(''REAnalysisModule'', '''')', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
		assert(REAnalysisModule.existsTag(tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.existsTag(tag) does not work.')
		assert(ream.existsTag(tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.existsTag(tag) does not work.')
		assert(Element.existsTag(ream, tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(ream, tga) does not work.')
		assert(Element.existsTag('REAnalysisModule', tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''REAnalysisModule'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		assert(REAnalysisModule.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropProp(prop) does not work.')
		assert(ream.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropProp(prop) does not work.')
		assert(Element.getPropProp(ream, prop) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ream, prop) does not work.')
		assert(Element.getPropProp('REAnalysisModule', prop) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''REAnalysisModule'', prop) does not work.')
	 
		tag = ream.getPropTag(prop);
		assert(REAnalysisModule.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropProp(tag) does not work.')
		assert(ream.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropProp(tag) does not work.')
		assert(Element.getPropProp(ream, tag) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(ream, tag) does not work.')
		assert(Element.getPropProp('REAnalysisModule', prop) == prop, ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''REAnalysisModule'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		assert(strcmp(REAnalysisModule.getPropTag(prop), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropTag(prop) does not work.')
		assert(strcmp(ream.getPropTag(prop), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(ream, prop), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ream, prop) does not work.')
		assert(strcmp(Element.getPropTag('REAnalysisModule', prop), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''REAnalysisModule'', prop) does not work.')
	 
		assert(strcmp(REAnalysisModule.getPropTag(tag), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropTag(tag) does not work.')
		assert(strcmp(ream.getPropTag(tag), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(ream, tag), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(ream, tag) does not work.')
		assert(strcmp(Element.getPropTag('REAnalysisModule', prop), tag), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''REAnalysisModule'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		assert(Category.existsCategory(REAnalysisModule.getPropCategory(prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(ream.getPropCategory(prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ream, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ream, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ream, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''REAnalysisModule'', prop) does not work.')
	 
		assert(Category.existsCategory(REAnalysisModule.getPropCategory(tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(ream.getPropCategory(tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ream, tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(ream, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(ream, tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''REAnalysisModule'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		assert(Format.existsFormat(REAnalysisModule.getPropFormat(prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(ream.getPropFormat(prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ream, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ream, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ream, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''REAnalysisModule'', prop) does not work.')
	 
		assert(Format.existsFormat(REAnalysisModule.getPropFormat(tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(ream.getPropFormat(tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ream, tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(ream, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(ream, tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''REAnalysisModule'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		assert(ischar(REAnalysisModule.getPropDescription(prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropDescription(prop) does not work.')
		assert(ischar(ream.getPropDescription(prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(ream, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ream, prop) does not work.')
		assert(ischar(Element.getPropDescription(ream, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''REAnalysisModule'', prop) does not work.')
	 
		assert(ischar(REAnalysisModule.getPropDescription(tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.getPropDescription(tag) does not work.')
		assert(ischar(ream.getPropDescription(tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(ream, tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(ream, tag) does not work.')
		assert(ischar(Element.getPropDescription(ream, tag)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''REAnalysisModule'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		settings = REAnalysisModule.getPropSettings(prop);
		settings = ream.getPropSettings(prop);
		settings = Element.getPropSettings(ream, prop);
		settings = Element.getPropSettings('REAnalysisModule', prop);
	 
		settings = REAnalysisModule.getPropSettings(tag);
		settings = ream.getPropSettings(tag);
		settings = Element.getPropSettings(ream, tag);
		settings = Element.getPropSettings('REAnalysisModule', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		default = REAnalysisModule.getPropDefault(prop);
		default = ream.getPropDefault(prop);
		default = Element.getPropDefault(ream, prop);
		default = Element.getPropDefault('REAnalysisModule', prop);
	 
		default = REAnalysisModule.getPropDefault(tag);
		default = ream.getPropDefault(tag);
		default = Element.getPropDefault(ream, tag);
		default = Element.getPropDefault('REAnalysisModule', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		conditioned_default = REAnalysisModule.getPropDefaultConditioned(prop);
		conditioned_default = ream.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(ream, prop);
		conditioned_default = Element.getPropDefaultConditioned('REAnalysisModule', prop);
	 
		conditioned_default = REAnalysisModule.getPropDefaultConditioned(tag);
		conditioned_default = ream.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(ream, tag);
		conditioned_default = Element.getPropDefaultConditioned('REAnalysisModule', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:REAnalysisModule.getPropNumber()
		tag = ream.getPropTag(prop);
	 
		assert(~REAnalysisModule.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.checkProp(prop, value) does not work.')
		assert(~ream.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(ream, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ream, prop, value) does not work.')
		assert(~Element.checkProp('REAnalysisModule', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''REAnalysisModule'', prop, value) does not work.')
	 
		assert_with_error('REAnalysisModule.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], prop, ream)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], prop, ream)
		assert_with_error('Element.checkProp(''REAnalysisModule'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~REAnalysisModule.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.checkProp(tag, value) does not work.')
		assert(~ream.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(ream, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ream, tag, value) does not work.')
		assert(~Element.checkProp('REAnalysisModule', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''REAnalysisModule'', tag, value) does not work.')
	 
		assert_with_error('REAnalysisModule.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], tag, ream)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], tag, ream)
		assert_with_error('Element.checkProp(''REAnalysisModule'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':REAnalysisModule:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(REAnalysisModule.checkProp(prop, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.checkProp(prop, <conditioned default value>) does not work.')
		assert(ream.checkProp(prop, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(ream, prop, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ream, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('REAnalysisModule', prop, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''REAnalysisModule'', prop, <conditioned default value>) does not work.')
	 
		assert(REAnalysisModule.checkProp(tag, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.checkProp(tag, <conditioned default value>) does not work.')
		assert(ream.checkProp(tag, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'ream.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(ream, tag, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(ream, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('REAnalysisModule', tag, Element.getPropDefaultConditioned(REAnalysisModule, prop)), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''REAnalysisModule'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, REAnalysisModule.getPropDefault(REAnalysisModule.TEMPLATE), ...
		REAnalysisModule.ID, REAnalysisModule.getPropDefault(REAnalysisModule.ID), ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, REAnalysisModule.getPropDefault(REAnalysisModule.RE_IN), ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, REAnalysisModule.getPropDefault(REAnalysisModule.REPF) ...
		);
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
	 
		% excluded props
		if any(prop == [REAnalysisModule.TEMPLATE REAnalysisModule.REPF])
			continue
		end
	 
		TAG = upper(REAnalysisModule.getPropTag(prop));
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					ream.getr(prop) == REAnalysisModule.getNoValue(), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['Being a ' REAnalysisModule.getCategoryName(REAnalysisModule.getPropCategory(prop)) ', REAnalysisModule.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in REAnalysisModule.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ream.getr(TAG) == REAnalysisModule.getNoValue(), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['Being a ' REAnalysisModule.getCategoryName(REAnalysisModule.getPropCategory(prop)) ', REAnalysisModule.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in REAnalysisModule.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(ream.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ream.getPropSettings(prop))
					assert( ...
						ream.checkFormat(ream.getPropFormat(prop), ream.get(prop)), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ream.checkFormat(ream.getPropFormat(prop), ream.get(prop), ream.getPropSettings(prop)), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					ream.getr(prop) == REAnalysisModule.getNoValue(), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['Being a ' REAnalysisModule.getCategoryName(REAnalysisModule.getPropCategory(prop)) ', REAnalysisModule.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in REAnalysisModule.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					ream.getr(TAG) == REAnalysisModule.getNoValue(), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['Being a ' REAnalysisModule.getCategoryName(REAnalysisModule.getPropCategory(prop)) ', REAnalysisModule.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in REAnalysisModule.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':REAnalysisModule']);
				assert( ...
					~isa(ream.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(ream.getPropSettings(prop))
					assert( ...
						ream.checkFormat(ream.getPropFormat(prop), ream.get(prop)), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						ream.checkFormat(ream.getPropFormat(prop), ream.get(prop), ream.getPropSettings(prop)), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(ream.getr(prop), REAnalysisModule.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by REAnalysisModule.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in REAnalysisModule.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(ream.getr(TAG), REAnalysisModule.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' TAG ') must be inizialized to its default value ' ...
					'given by REAnalysisModule.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in REAnalysisModule.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, REAnalysisModule.getPropDefault(REAnalysisModule.TEMPLATE), ...
		REAnalysisModule.ID, REAnalysisModule.getPropDefault(REAnalysisModule.ID), ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, REAnalysisModule.getPropDefault(REAnalysisModule.RE_IN), ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, REAnalysisModule.getPropDefault(REAnalysisModule.REPF) ...
		);
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
	 
		% excluded props
		if any(prop == [REAnalysisModule.TEMPLATE REAnalysisModule.REPF])
			continue
		end
	 
		TAG = upper(REAnalysisModule.getPropTag(prop));
		switch REAnalysisModule.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(ream.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ream.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ream.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ream.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ream.checkFormat(ream.getPropFormat(prop), ream.getr(prop),ream.getPropSettings(prop)), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':REAnalysisModule']);
				assert( ...
					~isa(ream.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(ream.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':REAnalysisModule']);
	% 			assert( ...
	% 				~isa(ream.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
	% 				['REAnalysisModule.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(ream.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
	% 				['REAnalysisModule.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				ream.checkFormat(ream.getPropFormat(prop), ream.getr(prop),ream.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
	% 				['REAnalysisModule.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':REAnalysisModule']);
				assert( ...
					~isa(ream.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(ream.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(ream.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(ream.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					ream.checkFormat(ream.getPropFormat(prop), ream.getr(prop),ream.getPropSettings(prop)), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if ream.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:REAnalysisModule');
					delete(ancestor(ream.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(REAnalysisModule.getProps(Category.RESULT))
		for prop = 1:1:REAnalysisModule.getPropNumber()
	 
			% excluded props
			if any(prop == [REAnalysisModule.TEMPLATE REAnalysisModule.REPF])
				continue
			end
	 
			switch REAnalysisModule.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						ream.isLocked(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~ream.isLocked(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream = REAnalysisModule();
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		TAG = upper(REAnalysisModule.getPropTag(prop));
		assert( ...
			~ream.isLocked(prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			['REAnalysisModule.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~ream.isLocked(TAG), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			['REAnalysisModule.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	ream.lock()
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					ream.isLocked(prop), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~ream.isLocked(prop), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream = REAnalysisModule();
	 
	warning_backup = warning('off', 'BRAPH2:REAnalysisModule');
	for prop = 1:1:REAnalysisModule.getPropNumber()
		ream.lock(prop)
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					ream.isLocked(prop), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~ream.isLocked(prop), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream = REAnalysisModule();
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		TAG = upper(REAnalysisModule.getPropTag(prop));
		assert( ...
			ream.isChecked(prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			['REAnalysisModule.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			ream.isChecked(TAG), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			['REAnalysisModule.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	ream.unchecked()
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		assert( ...
			~ream.isChecked(prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			['REAnalysisModule.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	ream.checked()
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		assert( ...
			ream.isChecked(prop), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			['REAnalysisModule.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic REAnalysisModule
	ream_0 = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, REAnalysisModule.getPropDefault(REAnalysisModule.TEMPLATE), ...
		REAnalysisModule.ID, REAnalysisModule.getPropDefault(REAnalysisModule.ID), ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, REAnalysisModule.getPropDefault(REAnalysisModule.RE_IN), ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, REAnalysisModule.getPropDefault(REAnalysisModule.REPF) ...
		);
	 
	% REAnalysisModule with 1st callbacks
	ream_1 = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, ream_0.getCallback(4), ..., ...
		REAnalysisModule.ID, ream_0.getCallback(5), ..., ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, ream_0.getCallback(9), ..., ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, ream_0.getCallback(13) ... ...
		);
	 
	prop_number = REAnalysisModule.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(REAnalysisModule.getPropTag(prop));
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ream_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ream_1.get(prop), ream_0.get(prop)) && ~isa(ream_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ream_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% REAnalysisModule with 2nd callbacks
	ream_2 = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, ream_1.getCallback(4), ..., ...
		REAnalysisModule.ID, ream_1.getCallback(5), ..., ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, ream_1.getCallback(9), ..., ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, ream_1.getCallback(13) ... ...
		);
	 
	prop_number = REAnalysisModule.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(REAnalysisModule.getPropTag(prop));
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ream_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ream_2.get(prop), ream_0.get(prop)) && ~isa(ream_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ream_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% REAnalysisModule with 3rd callbacks
	ream_3 = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, ream_2.getCallback(4), ..., ...
		REAnalysisModule.ID, ream_2.getCallback(5), ..., ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, ream_2.getCallback(9), ..., ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, ream_2.getCallback(13) ... ...
		);
	 
	prop_number = REAnalysisModule.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(REAnalysisModule.getPropTag(prop));
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(ream_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(ream_3.get(prop), ream_0.get(prop)) && ~isa(ream_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(ream_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	ream = REAnalysisModule();
	 
	ream_copy = ream.copy();
	 
	assert(ream_copy ~= ream, ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(ream_copy, ream), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		value = ream.getr(prop);
		value_copy = ream_copy.getr(prop);
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					'REAnalysisModule.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
							'REAnalysisModule.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
							'REAnalysisModule.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					ream_copy.isLocked(prop) == ream.isLocked(prop), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					'REAnalysisModule.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ream_copy.isChecked(prop) == ream.isChecked(prop), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					'REAnalysisModule.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					ream_copy.getPropSeed(prop) == ream.getPropSeed(prop), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					'REAnalysisModule.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	ream = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, REAnalysisModule.getPropDefault(REAnalysisModule.TEMPLATE), ...
		REAnalysisModule.ID, REAnalysisModule.getPropDefault(REAnalysisModule.ID), ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, REAnalysisModule.getPropDefault(REAnalysisModule.RE_IN), ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, REAnalysisModule.getPropDefault(REAnalysisModule.REPF) ...
		);
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		if REAnalysisModule.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':REAnalysisModule']);
			% ream.memorize(prop);
			% warning(warning_backup)
		elseif REAnalysisModule.getPropCategory(prop) == Category.EVANESCENT && ream.getPropFormat(prop) == Format.HANDLE
			ream.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:REAnalysisModule');
			delete(ancestor(ream.get(prop), 'figure'))
			warning(warning_backup)
		else
			ream.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	ream_copy = ream.copy();
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		value = ream.getr(prop);
		value_copy = ream_copy.getr(prop);
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					'REAnalysisModule.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
							'REAnalysisModule.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
							'REAnalysisModule.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						ream_copy.isLocked(prop) == ream.isLocked(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ream_copy.isChecked(prop) == ream.isChecked(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ream_copy.getPropSeed(prop) == ream.getPropSeed(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	ream_0 = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, REAnalysisModule.getPropDefault(REAnalysisModule.TEMPLATE), ...
		REAnalysisModule.ID, REAnalysisModule.getPropDefault(REAnalysisModule.ID), ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, REAnalysisModule.getPropDefault(REAnalysisModule.RE_IN), ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, REAnalysisModule.getPropDefault(REAnalysisModule.REPF) ...
		);
	 
	ream = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, ream_0.getCallback(4), ..., ...
		REAnalysisModule.ID, ream_0.getCallback(5), ..., ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, ream_0.getCallback(9), ..., ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, ream_0.getCallback(13) ... ...
		);
	 
	ream_copy = ream.copy();
	ream_0_copy = ream_copy.getr('ID').get('EL');
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
		value = ream.getr(prop);
		value_copy = ream_copy.getr(prop);
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					'REAnalysisModule.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
							'REAnalysisModule.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
							'REAnalysisModule.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == ream_0.getCallback(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The callback should be obtained from REAnalysisModule.getCallback().' ...
						)
					assert( ...
						value_copy == ream_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The callback should be obtained from REAnalysisModule.getCallback().' ...
						)
				end
	 
					assert( ...
						ream_copy.isLocked(prop) == ream.isLocked(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ream_copy.isChecked(prop) == ream.isChecked(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						ream_copy.getPropSeed(prop) == ream.getPropSeed(prop), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream_template = REAnalysisModule();
	ream = REAnalysisModule('TEMPLATE', ream_template);
	 
	for prop = 1:1:REAnalysisModule.getPropNumber()
	 
		% excluded props
		if any(prop == [REAnalysisModule.TEMPLATE REAnalysisModule.REPF])
			continue
		end
	 
		TAG = upper(REAnalysisModule.getPropTag(prop));
		switch REAnalysisModule.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == REAnalysisModule.TEMPLATE
					assert( ...
						isa(ream.getr(prop), 'REAnalysisModule'), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule TEMPLATE does not work. REAnalysisModule.getr(''TEMPLATE'') should be a REAnalysisModule element.' ...
						)
					assert( ...
						isa(ream_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						'REAnalysisModule TEMPLATE does not work. REAnalysisModule_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(ream.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule TEMPLATE does not work. REAnalysisModule.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						ream.getr(prop).get('EL') == ream_template && ream.getr(prop).get('PROP') == prop && strcmp(ream.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule TEMPLATE does not work. REAnalysisModule.getr(' TAG ') should be a Callback to ream_template.' TAG '.'] ...
						)
					assert( ...
						isa(ream_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
						['REAnalysisModule TEMPLATE does not work. REAnalysisModule_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(ream.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule TEMPLATE does not work. REAnalysisModule.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(ream_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
					['REAnalysisModule TEMPLATE does not work. REAnalysisModule_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, REAnalysisModule.getPropDefault(REAnalysisModule.TEMPLATE), ...
		REAnalysisModule.ID, REAnalysisModule.getPropDefault(REAnalysisModule.ID), ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, REAnalysisModule.getPropDefault(REAnalysisModule.RE_IN), ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, REAnalysisModule.getPropDefault(REAnalysisModule.REPF) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'reanalysismodule_to_be_erased.b2'];
	 
	Element.save(ream, filename)
	 
	ream_loaded = Element.load(filename);
	 
	assert( ...
		isequal(ream.copy(), ream_loaded), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.save(ream) and/or REAnalysisModule.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	ream = REAnalysisModule( ...
		REAnalysisModule.ELCLASS, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.NAME, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.DESCRIPTION, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.TEMPLATE, REAnalysisModule.getPropDefault(REAnalysisModule.TEMPLATE), ...
		REAnalysisModule.ID, REAnalysisModule.getPropDefault(REAnalysisModule.ID), ...
		REAnalysisModule.LABEL, REAnalysisModule.getPropDefault(REAnalysisModule.LABEL), ...
		REAnalysisModule.NOTES, REAnalysisModule.getPropDefault(REAnalysisModule.NOTES), ...
		REAnalysisModule.TOSTRING, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_IN, REAnalysisModule.getPropDefault(REAnalysisModule.RE_IN), ...
		REAnalysisModule.SP_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.SP_DICT_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.RE_OUT, REAnalysisModule.getNoValue(), ...
		REAnalysisModule.REPF, REAnalysisModule.getPropDefault(REAnalysisModule.REPF) ...
		);
	 
	[json, struct, el_list] = encodeJSON(ream);
	[ream_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(ream_dec ~= ream, ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		'REAnalysisModule.encodeJSON() or REAnalysisModule.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) REAnalysisModule.getPropFormat(prop), num2cell(REAnalysisModule.getProps())) == Format.HANDLE) && all(cellfun(@(prop) REAnalysisModule.getPropFormat(prop), num2cell(REAnalysisModule.getProps())) == Format.NET)
		assert(isequal(ream_dec, ream), ...
			[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
			'REAnalysisModule.encodeJSON() or REAnalysisModule.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Basic read functions and setting props
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	m1 = [1 2 3 4 5; 2 4 6 8 10; 3 6 9 12 15; 4 8 12 16 20; 5 10 15 20 25]
	m2 = m1 + 1
	m3 = m1 + 2
	m4 = m1 + 3
	m5 = m1 + 4
	m6 = m1 + 5
	s1 = Spectrum('ID', 'id1', 'LABEL', 'label1', 'NOTES', 'notes1', ...
	    'WAVELENGTH', [1;2;3;4;5], 'INTENSITIES', m1);
	s2 = Spectrum('ID', 'id2', 'LABEL', 'label2', 'NOTES', 'notes2', ...
	    'WAVELENGTH', [1;2;3;4;5], 'INTENSITIES', m2);
	s3 = Spectrum('ID', 'id3', 'LABEL', 'label3', 'NOTES', 'notes3', ...
	    'WAVELENGTH', [1;2;3;4;5], 'INTENSITIES', m3);
	s4 = Spectrum('ID', 'id4', 'LABEL', 'label4', 'NOTES', 'notes4', ...
	    'WAVELENGTH', [1;2;3;4;5], 'INTENSITIES', m4);
	s5 = Spectrum('ID', 'id5', 'LABEL', 'label5', 'NOTES', 'notes5', ...
	    'WAVELENGTH', [1;2;3;4;5], 'INTENSITIES', m5);
	s6 = Spectrum('ID', 'id6', 'LABEL', 'label6', 'NOTES', 'notes6', ...
	    'WAVELENGTH', [1;2;3;4;5], 'INTENSITIES', m6);
	
	items = {s1, s2, s3, s4, s5, s6};
	
	idict_1 = IndexedDictionary( ...
	    'ID', 'idict', ...
	    'IT_CLASS', 'Spectrum', ...
	    'IT_KEY', IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
	    'IT_LIST', items ...
	    );
	re = RamanExperiment('ID', 'REid1', ...
	                     'LABEL', 'RElabel1', ...
	                     'NOTES', 'REnotes1', ...
	                     'SP_DICT', idict_1);
	ream = REAnalysisModule('ID', 'REAM_TEST1', ...
	                        'LABEL', 'RE Analysis Test Module 1', ...
	                        'NOTES', 'Testing RE Analysis Module 1.', ...
	                        'RE_IN', re);
	re_out = ream.get('RE_OUT');
	
	gui = GUIElement('PE', ream, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	gui.get('CLOSE')
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':REAnalysisModule:' BRAPH2.FAIL_TEST], ...
		[' When testing REAnalysisModule no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

