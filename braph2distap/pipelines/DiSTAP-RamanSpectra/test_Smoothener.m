%TEST_SMOOTHENER

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	sm = Smoothener();
	 
	% get('ELCLASS')
	if isa(Smoothener, 'ConcreteElement')
		assert(strcmp(Smoothener().get('ELCLASS'), 'Smoothener'), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener().get(''ELCLASS'') should return ''Smoothener''.')
	end
	 
	% getClass
	assert(strcmp(Smoothener.getClass(), 'Smoothener'), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.getClass() should return ''Smoothener''.')
	assert(strcmp(sm.getClass(), 'Smoothener'), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'sm.getClass() should return ''Smoothener''.')
	assert(strcmp(Element.getClass(sm), 'Smoothener'), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(sm) should return ''Smoothener''.')
	assert(strcmp(Element.getClass('Smoothener'), 'Smoothener'), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''Smoothener'') should return ''Smoothener''.')
	 
	% getSubclasses()
	assert(isequal(Smoothener.getSubclasses(), subclasses('Smoothener', [], [], true)), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.getSubclasses() should return the same result as subclasses(''Smoothener'', [], [], true).')
	assert(isequal(sm.getSubclasses(), subclasses('Smoothener', [], [], true)), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''Smoothener'', [], [], true).')
	assert(isequal(Element.getSubclasses(sm), subclasses('Smoothener', [], [], true)), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(sm) should return the same result as subclasses(''Smoothener'', [], [], true).')
	assert(isequal(Element.getSubclasses('Smoothener'), subclasses('Smoothener', [], [], true)), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''Smoothener'') should return the same result as subclasses(''Smoothener'', [], [], true).')
	 
	% getProps()
	assert(isempty(Smoothener.getProps()) || isequal(Smoothener.getProps(), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.getProps() should return a row vector [1:1:N].')
	assert(isempty(Smoothener.getProps()) || isequal(sm.getProps(), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'sm.getProps() should return a row vector [1:1:N].')
	assert(isempty(Smoothener.getProps()) || isequal(Element.getProps(sm), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sm) should return a row vector [1:1:N].')
	assert(isempty(Smoothener.getProps()) || isequal(Element.getProps('Smoothener'), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Smoothener'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) Smoothener.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Smoothener.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.getProps(category) does not work.')
	tmp = cellfun(@(category) sm.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(Smoothener.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'sm.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(sm, category), categories, 'UniformOutput', false);
	assert(isempty(Smoothener.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sm, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('Smoothener', category), categories, 'UniformOutput', false);
	assert(isempty(Smoothener.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(Smoothener.getProps())), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''Smoothener'', category) does not work.')
	 
	% getPropNumber()
	assert(Smoothener.getPropNumber() == length(Smoothener.getProps()), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.getPropNumber() should return the number of properties.')
	assert(sm.getPropNumber() == length(Smoothener.getProps()), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'sm.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(sm) == length(Smoothener.getProps()), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sm) should return the number of properties.')
	assert(Element.getPropNumber('Smoothener') == length(Smoothener.getProps()), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Smoothener'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) Smoothener.getPropNumber(category), categories)) == Smoothener.getPropNumber(), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) sm.getPropNumber(category), categories)) == Smoothener.getPropNumber(), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'sm.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(sm, category), categories)) == Smoothener.getPropNumber(), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sm, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('Smoothener', category), categories)) == Smoothener.getPropNumber(), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''Smoothener'', category) does not work.')
	 
	% existsProp(prop)
	assert(~Smoothener.existsProp(NaN), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.existsProp(prop) does not work.')
	assert(~sm.existsProp(NaN), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'sm.existsProp(prop) does not work.')
	assert(~Element.existsProp(sm, NaN), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(sm, prop) does not work.')
	assert(~Element.existsProp('Smoothener', NaN), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''Smoothener'', prop) does not work.')
	 
	assert_with_error('Smoothener.existsProp(NaN)', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], sm)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], sm)
	assert_with_error('Element.existsProp(''Smoothener'', NaN)', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Smoothener.getPropNumber()
		assert(Smoothener.existsProp(prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.existsProp(prop) does not work.')
		assert(sm.existsProp(prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.existsProp(prop) does not work.')
		assert(Element.existsProp(sm, prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(sm, prop) does not work.')
		assert(Element.existsProp('Smoothener', prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''Smoothener'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~Smoothener.existsTag(''), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.existsTag(tag) does not work.')
	assert(~sm.existsTag(''), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'sm.existsTag(tag) does not work.')
	assert(~Element.existsTag(sm, ''), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(sm, tag) does not work.')
	assert(~Element.existsTag('Smoothener', ''), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''Smoothener'', tag) does not work.')
	 
	assert_with_error('Smoothener.existsTag('''')', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], sm)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], sm)
	assert_with_error('Element.existsTag(''Smoothener'', '''')', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
		assert(Smoothener.existsTag(tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.existsTag(tag) does not work.')
		assert(sm.existsTag(tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.existsTag(tag) does not work.')
		assert(Element.existsTag(sm, tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(sm, tga) does not work.')
		assert(Element.existsTag('Smoothener', tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''Smoothener'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		assert(Smoothener.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropProp(prop) does not work.')
		assert(sm.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropProp(prop) does not work.')
		assert(Element.getPropProp(sm, prop) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sm, prop) does not work.')
		assert(Element.getPropProp('Smoothener', prop) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Smoothener'', prop) does not work.')
	 
		tag = sm.getPropTag(prop);
		assert(Smoothener.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropProp(tag) does not work.')
		assert(sm.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropProp(tag) does not work.')
		assert(Element.getPropProp(sm, tag) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sm, tag) does not work.')
		assert(Element.getPropProp('Smoothener', prop) == prop, ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''Smoothener'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		assert(strcmp(Smoothener.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropTag(prop) does not work.')
		assert(strcmp(sm.getPropTag(prop), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(sm, prop), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sm, prop) does not work.')
		assert(strcmp(Element.getPropTag('Smoothener', prop), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Smoothener'', prop) does not work.')
	 
		assert(strcmp(Smoothener.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropTag(tag) does not work.')
		assert(strcmp(sm.getPropTag(tag), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(sm, tag), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sm, tag) does not work.')
		assert(strcmp(Element.getPropTag('Smoothener', prop), tag), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''Smoothener'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		assert(Category.existsCategory(Smoothener.getPropCategory(prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(sm.getPropCategory(prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sm, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sm, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sm, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Smoothener'', prop) does not work.')
	 
		assert(Category.existsCategory(Smoothener.getPropCategory(tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(sm.getPropCategory(tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sm, tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sm, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sm, tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''Smoothener'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		assert(Format.existsFormat(Smoothener.getPropFormat(prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(sm.getPropFormat(prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sm, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sm, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sm, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Smoothener'', prop) does not work.')
	 
		assert(Format.existsFormat(Smoothener.getPropFormat(tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(sm.getPropFormat(tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sm, tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sm, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sm, tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''Smoothener'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		assert(ischar(Smoothener.getPropDescription(prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropDescription(prop) does not work.')
		assert(ischar(sm.getPropDescription(prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(sm, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sm, prop) does not work.')
		assert(ischar(Element.getPropDescription(sm, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Smoothener'', prop) does not work.')
	 
		assert(ischar(Smoothener.getPropDescription(tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.getPropDescription(tag) does not work.')
		assert(ischar(sm.getPropDescription(tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(sm, tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sm, tag) does not work.')
		assert(ischar(Element.getPropDescription(sm, tag)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''Smoothener'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		settings = Smoothener.getPropSettings(prop);
		settings = sm.getPropSettings(prop);
		settings = Element.getPropSettings(sm, prop);
		settings = Element.getPropSettings('Smoothener', prop);
	 
		settings = Smoothener.getPropSettings(tag);
		settings = sm.getPropSettings(tag);
		settings = Element.getPropSettings(sm, tag);
		settings = Element.getPropSettings('Smoothener', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		default = Smoothener.getPropDefault(prop);
		default = sm.getPropDefault(prop);
		default = Element.getPropDefault(sm, prop);
		default = Element.getPropDefault('Smoothener', prop);
	 
		default = Smoothener.getPropDefault(tag);
		default = sm.getPropDefault(tag);
		default = Element.getPropDefault(sm, tag);
		default = Element.getPropDefault('Smoothener', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		conditioned_default = Smoothener.getPropDefaultConditioned(prop);
		conditioned_default = sm.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(sm, prop);
		conditioned_default = Element.getPropDefaultConditioned('Smoothener', prop);
	 
		conditioned_default = Smoothener.getPropDefaultConditioned(tag);
		conditioned_default = sm.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(sm, tag);
		conditioned_default = Element.getPropDefaultConditioned('Smoothener', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:Smoothener.getPropNumber()
		tag = sm.getPropTag(prop);
	 
		assert(~Smoothener.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.checkProp(prop, value) does not work.')
		assert(~sm.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(sm, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sm, prop, value) does not work.')
		assert(~Element.checkProp('Smoothener', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Smoothener'', prop, value) does not work.')
	 
		assert_with_error('Smoothener.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], prop, sm)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], prop, sm)
		assert_with_error('Element.checkProp(''Smoothener'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~Smoothener.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.checkProp(tag, value) does not work.')
		assert(~sm.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(sm, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sm, tag, value) does not work.')
		assert(~Element.checkProp('Smoothener', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Smoothener'', tag, value) does not work.')
	 
		assert_with_error('Smoothener.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], tag, sm)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], tag, sm)
		assert_with_error('Element.checkProp(''Smoothener'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':Smoothener:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(Smoothener.checkProp(prop, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.checkProp(prop, <conditioned default value>) does not work.')
		assert(sm.checkProp(prop, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(sm, prop, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sm, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('Smoothener', prop, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Smoothener'', prop, <conditioned default value>) does not work.')
	 
		assert(Smoothener.checkProp(tag, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.checkProp(tag, <conditioned default value>) does not work.')
		assert(sm.checkProp(tag, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'sm.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(sm, tag, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sm, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('Smoothener', tag, Element.getPropDefaultConditioned(Smoothener, prop)), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''Smoothener'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, Smoothener.getPropDefault(Smoothener.TEMPLATE), ...
		Smoothener.ID, Smoothener.getPropDefault(Smoothener.ID), ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, Smoothener.getPropDefault(Smoothener.RE_IN), ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, Smoothener.getPropDefault(Smoothener.REPF), ...
		Smoothener.SGOLAY_POLYORDER, Smoothener.getPropDefault(Smoothener.SGOLAY_POLYORDER), ...
		Smoothener.SGOLAY_WINDOW, Smoothener.getPropDefault(Smoothener.SGOLAY_WINDOW) ...
		);
	 
	for prop = 1:1:Smoothener.getPropNumber()
	 
		% excluded props
		if any(prop == [Smoothener.TEMPLATE Smoothener.REPF])
			continue
		end
	 
		TAG = upper(Smoothener.getPropTag(prop));
		switch Smoothener.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					sm.getr(prop) == Smoothener.getNoValue(), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Being a ' Smoothener.getCategoryName(Smoothener.getPropCategory(prop)) ', Smoothener.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Smoothener.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sm.getr(TAG) == Smoothener.getNoValue(), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Being a ' Smoothener.getCategoryName(Smoothener.getPropCategory(prop)) ', Smoothener.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Smoothener.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(sm.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sm.getPropSettings(prop))
					assert( ...
						sm.checkFormat(sm.getPropFormat(prop), sm.get(prop)), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sm.checkFormat(sm.getPropFormat(prop), sm.get(prop), sm.getPropSettings(prop)), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					sm.getr(prop) == Smoothener.getNoValue(), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Being a ' Smoothener.getCategoryName(Smoothener.getPropCategory(prop)) ', Smoothener.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Smoothener.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sm.getr(TAG) == Smoothener.getNoValue(), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Being a ' Smoothener.getCategoryName(Smoothener.getPropCategory(prop)) ', Smoothener.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in Smoothener.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':Smoothener']);
				assert( ...
					~isa(sm.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sm.getPropSettings(prop))
					assert( ...
						sm.checkFormat(sm.getPropFormat(prop), sm.get(prop)), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sm.checkFormat(sm.getPropFormat(prop), sm.get(prop), sm.getPropSettings(prop)), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(sm.getr(prop), Smoothener.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by Smoothener.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Smoothener.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(sm.getr(TAG), Smoothener.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' TAG ') must be inizialized to its default value ' ...
					'given by Smoothener.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in Smoothener.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, Smoothener.getPropDefault(Smoothener.TEMPLATE), ...
		Smoothener.ID, Smoothener.getPropDefault(Smoothener.ID), ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, Smoothener.getPropDefault(Smoothener.RE_IN), ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, Smoothener.getPropDefault(Smoothener.REPF), ...
		Smoothener.SGOLAY_POLYORDER, Smoothener.getPropDefault(Smoothener.SGOLAY_POLYORDER), ...
		Smoothener.SGOLAY_WINDOW, Smoothener.getPropDefault(Smoothener.SGOLAY_WINDOW) ...
		);
	 
	for prop = 1:1:Smoothener.getPropNumber()
	 
		% excluded props
		if any(prop == [Smoothener.TEMPLATE Smoothener.REPF])
			continue
		end
	 
		TAG = upper(Smoothener.getPropTag(prop));
		switch Smoothener.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(sm.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sm.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sm.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sm.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sm.checkFormat(sm.getPropFormat(prop), sm.getr(prop),sm.getPropSettings(prop)), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':Smoothener']);
				assert( ...
					~isa(sm.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sm.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':Smoothener']);
	% 			assert( ...
	% 				~isa(sm.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
	% 				['Smoothener.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(sm.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
	% 				['Smoothener.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				sm.checkFormat(sm.getPropFormat(prop), sm.getr(prop),sm.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
	% 				['Smoothener.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':Smoothener']);
				assert( ...
					~isa(sm.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(sm.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sm.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sm.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sm.checkFormat(sm.getPropFormat(prop), sm.getr(prop),sm.getPropSettings(prop)), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if sm.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:Smoothener');
					delete(ancestor(sm.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(Smoothener.getProps(Category.RESULT))
		for prop = 1:1:Smoothener.getPropNumber()
	 
			% excluded props
			if any(prop == [Smoothener.TEMPLATE Smoothener.REPF])
				continue
			end
	 
			switch Smoothener.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						sm.isLocked(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~sm.isLocked(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm = Smoothener();
	 
	for prop = 1:1:Smoothener.getPropNumber()
		TAG = upper(Smoothener.getPropTag(prop));
		assert( ...
			~sm.isLocked(prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			['Smoothener.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~sm.isLocked(TAG), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			['Smoothener.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	sm.lock()
	 
	for prop = 1:1:Smoothener.getPropNumber()
		switch Smoothener.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					sm.isLocked(prop), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~sm.isLocked(prop), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm = Smoothener();
	 
	warning_backup = warning('off', 'BRAPH2:Smoothener');
	for prop = 1:1:Smoothener.getPropNumber()
		sm.lock(prop)
		switch Smoothener.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					sm.isLocked(prop), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~sm.isLocked(prop), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm = Smoothener();
	 
	for prop = 1:1:Smoothener.getPropNumber()
		TAG = upper(Smoothener.getPropTag(prop));
		assert( ...
			sm.isChecked(prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			['Smoothener.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			sm.isChecked(TAG), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			['Smoothener.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	sm.unchecked()
	 
	for prop = 1:1:Smoothener.getPropNumber()
		assert( ...
			~sm.isChecked(prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			['Smoothener.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	sm.checked()
	 
	for prop = 1:1:Smoothener.getPropNumber()
		assert( ...
			sm.isChecked(prop), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			['Smoothener.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic Smoothener
	sm_0 = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, Smoothener.getPropDefault(Smoothener.TEMPLATE), ...
		Smoothener.ID, Smoothener.getPropDefault(Smoothener.ID), ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, Smoothener.getPropDefault(Smoothener.RE_IN), ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, Smoothener.getPropDefault(Smoothener.REPF), ...
		Smoothener.SGOLAY_POLYORDER, Smoothener.getPropDefault(Smoothener.SGOLAY_POLYORDER), ...
		Smoothener.SGOLAY_WINDOW, Smoothener.getPropDefault(Smoothener.SGOLAY_WINDOW) ...
		);
	 
	% Smoothener with 1st callbacks
	sm_1 = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, sm_0.getCallback(4), ..., ...
		Smoothener.ID, sm_0.getCallback(5), ..., ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, sm_0.getCallback(9), ..., ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, sm_0.getCallback(13), ..., ...
		Smoothener.SGOLAY_POLYORDER, sm_0.getCallback(14), ..., ...
		Smoothener.SGOLAY_WINDOW, sm_0.getCallback(15) ... ...
		);
	 
	prop_number = Smoothener.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Smoothener.getPropTag(prop));
		switch Smoothener.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sm_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sm_1.get(prop), sm_0.get(prop)) && ~isa(sm_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sm_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Smoothener with 2nd callbacks
	sm_2 = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, sm_1.getCallback(4), ..., ...
		Smoothener.ID, sm_1.getCallback(5), ..., ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, sm_1.getCallback(9), ..., ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, sm_1.getCallback(13), ..., ...
		Smoothener.SGOLAY_POLYORDER, sm_1.getCallback(14), ..., ...
		Smoothener.SGOLAY_WINDOW, sm_1.getCallback(15) ... ...
		);
	 
	prop_number = Smoothener.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Smoothener.getPropTag(prop));
		switch Smoothener.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sm_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sm_2.get(prop), sm_0.get(prop)) && ~isa(sm_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sm_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% Smoothener with 3rd callbacks
	sm_3 = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, sm_2.getCallback(4), ..., ...
		Smoothener.ID, sm_2.getCallback(5), ..., ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, sm_2.getCallback(9), ..., ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, sm_2.getCallback(13), ..., ...
		Smoothener.SGOLAY_POLYORDER, sm_2.getCallback(14), ..., ...
		Smoothener.SGOLAY_WINDOW, sm_2.getCallback(15) ... ...
		);
	 
	prop_number = Smoothener.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(Smoothener.getPropTag(prop));
		switch Smoothener.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sm_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sm_3.get(prop), sm_0.get(prop)) && ~isa(sm_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sm_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	sm = Smoothener();
	 
	sm_copy = sm.copy();
	 
	assert(sm_copy ~= sm, ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(sm_copy, sm), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:Smoothener.getPropNumber()
		value = sm.getr(prop);
		value_copy = sm_copy.getr(prop);
		switch Smoothener.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					'Smoothener.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
							'Smoothener.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
							'Smoothener.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					sm_copy.isLocked(prop) == sm.isLocked(prop), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					'Smoothener.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sm_copy.isChecked(prop) == sm.isChecked(prop), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					'Smoothener.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sm_copy.getPropSeed(prop) == sm.getPropSeed(prop), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					'Smoothener.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	sm = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, Smoothener.getPropDefault(Smoothener.TEMPLATE), ...
		Smoothener.ID, Smoothener.getPropDefault(Smoothener.ID), ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, Smoothener.getPropDefault(Smoothener.RE_IN), ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, Smoothener.getPropDefault(Smoothener.REPF), ...
		Smoothener.SGOLAY_POLYORDER, Smoothener.getPropDefault(Smoothener.SGOLAY_POLYORDER), ...
		Smoothener.SGOLAY_WINDOW, Smoothener.getPropDefault(Smoothener.SGOLAY_WINDOW) ...
		);
	 
	for prop = 1:1:Smoothener.getPropNumber()
		if Smoothener.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':Smoothener']);
			% sm.memorize(prop);
			% warning(warning_backup)
		elseif Smoothener.getPropCategory(prop) == Category.EVANESCENT && sm.getPropFormat(prop) == Format.HANDLE
			sm.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:Smoothener');
			delete(ancestor(sm.get(prop), 'figure'))
			warning(warning_backup)
		else
			sm.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	sm_copy = sm.copy();
	 
	for prop = 1:1:Smoothener.getPropNumber()
		value = sm.getr(prop);
		value_copy = sm_copy.getr(prop);
		switch Smoothener.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					'Smoothener.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
							'Smoothener.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
							'Smoothener.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						sm_copy.isLocked(prop) == sm.isLocked(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sm_copy.isChecked(prop) == sm.isChecked(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sm_copy.getPropSeed(prop) == sm.getPropSeed(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	sm_0 = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, Smoothener.getPropDefault(Smoothener.TEMPLATE), ...
		Smoothener.ID, Smoothener.getPropDefault(Smoothener.ID), ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, Smoothener.getPropDefault(Smoothener.RE_IN), ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, Smoothener.getPropDefault(Smoothener.REPF), ...
		Smoothener.SGOLAY_POLYORDER, Smoothener.getPropDefault(Smoothener.SGOLAY_POLYORDER), ...
		Smoothener.SGOLAY_WINDOW, Smoothener.getPropDefault(Smoothener.SGOLAY_WINDOW) ...
		);
	 
	sm = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, sm_0.getCallback(4), ..., ...
		Smoothener.ID, sm_0.getCallback(5), ..., ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, sm_0.getCallback(9), ..., ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, sm_0.getCallback(13), ..., ...
		Smoothener.SGOLAY_POLYORDER, sm_0.getCallback(14), ..., ...
		Smoothener.SGOLAY_WINDOW, sm_0.getCallback(15) ... ...
		);
	 
	sm_copy = sm.copy();
	sm_0_copy = sm_copy.getr('ID').get('EL');
	 
	for prop = 1:1:Smoothener.getPropNumber()
		value = sm.getr(prop);
		value_copy = sm_copy.getr(prop);
		switch Smoothener.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					'Smoothener.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
							'Smoothener.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
							'Smoothener.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == sm_0.getCallback(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The callback should be obtained from Smoothener.getCallback().' ...
						)
					assert( ...
						value_copy == sm_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The callback should be obtained from Smoothener.getCallback().' ...
						)
				end
	 
					assert( ...
						sm_copy.isLocked(prop) == sm.isLocked(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sm_copy.isChecked(prop) == sm.isChecked(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sm_copy.getPropSeed(prop) == sm.getPropSeed(prop), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm_template = Smoothener();
	sm = Smoothener('TEMPLATE', sm_template);
	 
	for prop = 1:1:Smoothener.getPropNumber()
	 
		% excluded props
		if any(prop == [Smoothener.TEMPLATE Smoothener.REPF])
			continue
		end
	 
		TAG = upper(Smoothener.getPropTag(prop));
		switch Smoothener.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == Smoothener.TEMPLATE
					assert( ...
						isa(sm.getr(prop), 'Smoothener'), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener TEMPLATE does not work. Smoothener.getr(''TEMPLATE'') should be a Smoothener element.' ...
						)
					assert( ...
						isa(sm_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						'Smoothener TEMPLATE does not work. Smoothener_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(sm.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener TEMPLATE does not work. Smoothener.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						sm.getr(prop).get('EL') == sm_template && sm.getr(prop).get('PROP') == prop && strcmp(sm.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener TEMPLATE does not work. Smoothener.getr(' TAG ') should be a Callback to sm_template.' TAG '.'] ...
						)
					assert( ...
						isa(sm_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
						['Smoothener TEMPLATE does not work. Smoothener_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(sm.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener TEMPLATE does not work. Smoothener.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(sm_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
					['Smoothener TEMPLATE does not work. Smoothener_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, Smoothener.getPropDefault(Smoothener.TEMPLATE), ...
		Smoothener.ID, Smoothener.getPropDefault(Smoothener.ID), ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, Smoothener.getPropDefault(Smoothener.RE_IN), ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, Smoothener.getPropDefault(Smoothener.REPF), ...
		Smoothener.SGOLAY_POLYORDER, Smoothener.getPropDefault(Smoothener.SGOLAY_POLYORDER), ...
		Smoothener.SGOLAY_WINDOW, Smoothener.getPropDefault(Smoothener.SGOLAY_WINDOW) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'smoothener_to_be_erased.b2'];
	 
	Element.save(sm, filename)
	 
	sm_loaded = Element.load(filename);
	 
	assert( ...
		isequal(sm.copy(), sm_loaded), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.save(sm) and/or Smoothener.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sm = Smoothener( ...
		Smoothener.ELCLASS, Smoothener.getNoValue(), ...
		Smoothener.NAME, Smoothener.getNoValue(), ...
		Smoothener.DESCRIPTION, Smoothener.getNoValue(), ...
		Smoothener.TEMPLATE, Smoothener.getPropDefault(Smoothener.TEMPLATE), ...
		Smoothener.ID, Smoothener.getPropDefault(Smoothener.ID), ...
		Smoothener.LABEL, Smoothener.getPropDefault(Smoothener.LABEL), ...
		Smoothener.NOTES, Smoothener.getPropDefault(Smoothener.NOTES), ...
		Smoothener.TOSTRING, Smoothener.getNoValue(), ...
		Smoothener.RE_IN, Smoothener.getPropDefault(Smoothener.RE_IN), ...
		Smoothener.SP_OUT, Smoothener.getNoValue(), ...
		Smoothener.SP_DICT_OUT, Smoothener.getNoValue(), ...
		Smoothener.RE_OUT, Smoothener.getNoValue(), ...
		Smoothener.REPF, Smoothener.getPropDefault(Smoothener.REPF), ...
		Smoothener.SGOLAY_POLYORDER, Smoothener.getPropDefault(Smoothener.SGOLAY_POLYORDER), ...
		Smoothener.SGOLAY_WINDOW, Smoothener.getPropDefault(Smoothener.SGOLAY_WINDOW) ...
		);
	 
	[json, struct, el_list] = encodeJSON(sm);
	[sm_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(sm_dec ~= sm, ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		'Smoothener.encodeJSON() or Smoothener.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) Smoothener.getPropFormat(prop), num2cell(Smoothener.getProps())) == Format.HANDLE) && all(cellfun(@(prop) Smoothener.getPropFormat(prop), num2cell(Smoothener.getProps())) == Format.NET)
		assert(isequal(sm_dec, sm), ...
			[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
			'Smoothener.encodeJSON() or Smoothener.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':Smoothener:' BRAPH2.FAIL_TEST], ...
		[' When testing Smoothener no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

