%TEST_SMOOTHINGFILTER

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	sf = SmoothingFilter();
	 
	% get('ELCLASS')
	if isa(SmoothingFilter, 'ConcreteElement')
		assert(strcmp(SmoothingFilter().get('ELCLASS'), 'SmoothingFilter'), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter().get(''ELCLASS'') should return ''SmoothingFilter''.')
	end
	 
	% getClass
	assert(strcmp(SmoothingFilter.getClass(), 'SmoothingFilter'), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.getClass() should return ''SmoothingFilter''.')
	assert(strcmp(sf.getClass(), 'SmoothingFilter'), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'sf.getClass() should return ''SmoothingFilter''.')
	assert(strcmp(Element.getClass(sf), 'SmoothingFilter'), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(sf) should return ''SmoothingFilter''.')
	assert(strcmp(Element.getClass('SmoothingFilter'), 'SmoothingFilter'), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''SmoothingFilter'') should return ''SmoothingFilter''.')
	 
	% getSubclasses()
	assert(isequal(SmoothingFilter.getSubclasses(), subclasses('SmoothingFilter', [], [], true)), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.getSubclasses() should return the same result as subclasses(''SmoothingFilter'', [], [], true).')
	assert(isequal(sf.getSubclasses(), subclasses('SmoothingFilter', [], [], true)), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''SmoothingFilter'', [], [], true).')
	assert(isequal(Element.getSubclasses(sf), subclasses('SmoothingFilter', [], [], true)), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(sf) should return the same result as subclasses(''SmoothingFilter'', [], [], true).')
	assert(isequal(Element.getSubclasses('SmoothingFilter'), subclasses('SmoothingFilter', [], [], true)), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''SmoothingFilter'') should return the same result as subclasses(''SmoothingFilter'', [], [], true).')
	 
	% getProps()
	assert(isempty(SmoothingFilter.getProps()) || isequal(SmoothingFilter.getProps(), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.getProps() should return a row vector [1:1:N].')
	assert(isempty(SmoothingFilter.getProps()) || isequal(sf.getProps(), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'sf.getProps() should return a row vector [1:1:N].')
	assert(isempty(SmoothingFilter.getProps()) || isequal(Element.getProps(sf), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sf) should return a row vector [1:1:N].')
	assert(isempty(SmoothingFilter.getProps()) || isequal(Element.getProps('SmoothingFilter'), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SmoothingFilter'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) SmoothingFilter.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SmoothingFilter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.getProps(category) does not work.')
	tmp = cellfun(@(category) sf.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SmoothingFilter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'sf.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(sf, category), categories, 'UniformOutput', false);
	assert(isempty(SmoothingFilter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sf, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('SmoothingFilter', category), categories, 'UniformOutput', false);
	assert(isempty(SmoothingFilter.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SmoothingFilter.getProps())), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SmoothingFilter'', category) does not work.')
	 
	% getPropNumber()
	assert(SmoothingFilter.getPropNumber() == length(SmoothingFilter.getProps()), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.getPropNumber() should return the number of properties.')
	assert(sf.getPropNumber() == length(SmoothingFilter.getProps()), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'sf.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(sf) == length(SmoothingFilter.getProps()), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sf) should return the number of properties.')
	assert(Element.getPropNumber('SmoothingFilter') == length(SmoothingFilter.getProps()), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SmoothingFilter'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) SmoothingFilter.getPropNumber(category), categories)) == SmoothingFilter.getPropNumber(), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) sf.getPropNumber(category), categories)) == SmoothingFilter.getPropNumber(), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'sf.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(sf, category), categories)) == SmoothingFilter.getPropNumber(), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sf, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('SmoothingFilter', category), categories)) == SmoothingFilter.getPropNumber(), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SmoothingFilter'', category) does not work.')
	 
	% existsProp(prop)
	assert(~SmoothingFilter.existsProp(NaN), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.existsProp(prop) does not work.')
	assert(~sf.existsProp(NaN), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'sf.existsProp(prop) does not work.')
	assert(~Element.existsProp(sf, NaN), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(sf, prop) does not work.')
	assert(~Element.existsProp('SmoothingFilter', NaN), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''SmoothingFilter'', prop) does not work.')
	 
	assert_with_error('SmoothingFilter.existsProp(NaN)', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], sf)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], sf)
	assert_with_error('Element.existsProp(''SmoothingFilter'', NaN)', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		assert(SmoothingFilter.existsProp(prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.existsProp(prop) does not work.')
		assert(sf.existsProp(prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.existsProp(prop) does not work.')
		assert(Element.existsProp(sf, prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(sf, prop) does not work.')
		assert(Element.existsProp('SmoothingFilter', prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''SmoothingFilter'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~SmoothingFilter.existsTag(''), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.existsTag(tag) does not work.')
	assert(~sf.existsTag(''), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'sf.existsTag(tag) does not work.')
	assert(~Element.existsTag(sf, ''), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(sf, tag) does not work.')
	assert(~Element.existsTag('SmoothingFilter', ''), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''SmoothingFilter'', tag) does not work.')
	 
	assert_with_error('SmoothingFilter.existsTag('''')', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], sf)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], sf)
	assert_with_error('Element.existsTag(''SmoothingFilter'', '''')', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
		assert(SmoothingFilter.existsTag(tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.existsTag(tag) does not work.')
		assert(sf.existsTag(tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.existsTag(tag) does not work.')
		assert(Element.existsTag(sf, tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(sf, tga) does not work.')
		assert(Element.existsTag('SmoothingFilter', tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''SmoothingFilter'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		assert(SmoothingFilter.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropProp(prop) does not work.')
		assert(sf.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropProp(prop) does not work.')
		assert(Element.getPropProp(sf, prop) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sf, prop) does not work.')
		assert(Element.getPropProp('SmoothingFilter', prop) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SmoothingFilter'', prop) does not work.')
	 
		tag = sf.getPropTag(prop);
		assert(SmoothingFilter.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropProp(tag) does not work.')
		assert(sf.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropProp(tag) does not work.')
		assert(Element.getPropProp(sf, tag) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sf, tag) does not work.')
		assert(Element.getPropProp('SmoothingFilter', prop) == prop, ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SmoothingFilter'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		assert(strcmp(SmoothingFilter.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropTag(prop) does not work.')
		assert(strcmp(sf.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(sf, prop), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sf, prop) does not work.')
		assert(strcmp(Element.getPropTag('SmoothingFilter', prop), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SmoothingFilter'', prop) does not work.')
	 
		assert(strcmp(SmoothingFilter.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropTag(tag) does not work.')
		assert(strcmp(sf.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(sf, tag), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sf, tag) does not work.')
		assert(strcmp(Element.getPropTag('SmoothingFilter', prop), tag), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SmoothingFilter'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		assert(Category.existsCategory(SmoothingFilter.getPropCategory(prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(sf.getPropCategory(prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sf, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sf, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sf, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SmoothingFilter'', prop) does not work.')
	 
		assert(Category.existsCategory(SmoothingFilter.getPropCategory(tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(sf.getPropCategory(tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sf, tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sf, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sf, tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SmoothingFilter'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		assert(Format.existsFormat(SmoothingFilter.getPropFormat(prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(sf.getPropFormat(prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sf, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sf, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sf, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SmoothingFilter'', prop) does not work.')
	 
		assert(Format.existsFormat(SmoothingFilter.getPropFormat(tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(sf.getPropFormat(tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sf, tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sf, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sf, tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SmoothingFilter'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		assert(ischar(SmoothingFilter.getPropDescription(prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropDescription(prop) does not work.')
		assert(ischar(sf.getPropDescription(prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(sf, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sf, prop) does not work.')
		assert(ischar(Element.getPropDescription(sf, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SmoothingFilter'', prop) does not work.')
	 
		assert(ischar(SmoothingFilter.getPropDescription(tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.getPropDescription(tag) does not work.')
		assert(ischar(sf.getPropDescription(tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(sf, tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sf, tag) does not work.')
		assert(ischar(Element.getPropDescription(sf, tag)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SmoothingFilter'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		settings = SmoothingFilter.getPropSettings(prop);
		settings = sf.getPropSettings(prop);
		settings = Element.getPropSettings(sf, prop);
		settings = Element.getPropSettings('SmoothingFilter', prop);
	 
		settings = SmoothingFilter.getPropSettings(tag);
		settings = sf.getPropSettings(tag);
		settings = Element.getPropSettings(sf, tag);
		settings = Element.getPropSettings('SmoothingFilter', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		default = SmoothingFilter.getPropDefault(prop);
		default = sf.getPropDefault(prop);
		default = Element.getPropDefault(sf, prop);
		default = Element.getPropDefault('SmoothingFilter', prop);
	 
		default = SmoothingFilter.getPropDefault(tag);
		default = sf.getPropDefault(tag);
		default = Element.getPropDefault(sf, tag);
		default = Element.getPropDefault('SmoothingFilter', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		conditioned_default = SmoothingFilter.getPropDefaultConditioned(prop);
		conditioned_default = sf.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(sf, prop);
		conditioned_default = Element.getPropDefaultConditioned('SmoothingFilter', prop);
	 
		conditioned_default = SmoothingFilter.getPropDefaultConditioned(tag);
		conditioned_default = sf.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(sf, tag);
		conditioned_default = Element.getPropDefaultConditioned('SmoothingFilter', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:SmoothingFilter.getPropNumber()
		tag = sf.getPropTag(prop);
	 
		assert(~SmoothingFilter.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.checkProp(prop, value) does not work.')
		assert(~sf.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(sf, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sf, prop, value) does not work.')
		assert(~Element.checkProp('SmoothingFilter', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SmoothingFilter'', prop, value) does not work.')
	 
		assert_with_error('SmoothingFilter.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], prop, sf)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], prop, sf)
		assert_with_error('Element.checkProp(''SmoothingFilter'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~SmoothingFilter.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.checkProp(tag, value) does not work.')
		assert(~sf.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(sf, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sf, tag, value) does not work.')
		assert(~Element.checkProp('SmoothingFilter', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SmoothingFilter'', tag, value) does not work.')
	 
		assert_with_error('SmoothingFilter.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], tag, sf)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], tag, sf)
		assert_with_error('Element.checkProp(''SmoothingFilter'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SmoothingFilter:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(SmoothingFilter.checkProp(prop, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.checkProp(prop, <conditioned default value>) does not work.')
		assert(sf.checkProp(prop, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(sf, prop, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sf, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('SmoothingFilter', prop, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SmoothingFilter'', prop, <conditioned default value>) does not work.')
	 
		assert(SmoothingFilter.checkProp(tag, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.checkProp(tag, <conditioned default value>) does not work.')
		assert(sf.checkProp(tag, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'sf.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(sf, tag, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sf, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('SmoothingFilter', tag, Element.getPropDefaultConditioned(SmoothingFilter, prop)), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SmoothingFilter'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, SmoothingFilter.getPropDefault(SmoothingFilter.TEMPLATE), ...
		SmoothingFilter.ID, SmoothingFilter.getPropDefault(SmoothingFilter.ID), ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, SmoothingFilter.getPropDefault(SmoothingFilter.RE_IN), ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, SmoothingFilter.getPropDefault(SmoothingFilter.REPF) ...
		);
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SmoothingFilter.getPropTag(prop));
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					sf.getr(prop) == SmoothingFilter.getNoValue(), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['Being a ' SmoothingFilter.getCategoryName(SmoothingFilter.getPropCategory(prop)) ', SmoothingFilter.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SmoothingFilter.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sf.getr(TAG) == SmoothingFilter.getNoValue(), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['Being a ' SmoothingFilter.getCategoryName(SmoothingFilter.getPropCategory(prop)) ', SmoothingFilter.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SmoothingFilter.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(sf.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sf.getPropSettings(prop))
					assert( ...
						sf.checkFormat(sf.getPropFormat(prop), sf.get(prop)), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sf.checkFormat(sf.getPropFormat(prop), sf.get(prop), sf.getPropSettings(prop)), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					sf.getr(prop) == SmoothingFilter.getNoValue(), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['Being a ' SmoothingFilter.getCategoryName(SmoothingFilter.getPropCategory(prop)) ', SmoothingFilter.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SmoothingFilter.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sf.getr(TAG) == SmoothingFilter.getNoValue(), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['Being a ' SmoothingFilter.getCategoryName(SmoothingFilter.getPropCategory(prop)) ', SmoothingFilter.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SmoothingFilter.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':SmoothingFilter']);
				assert( ...
					~isa(sf.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sf.getPropSettings(prop))
					assert( ...
						sf.checkFormat(sf.getPropFormat(prop), sf.get(prop)), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sf.checkFormat(sf.getPropFormat(prop), sf.get(prop), sf.getPropSettings(prop)), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(sf.getr(prop), SmoothingFilter.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by SmoothingFilter.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SmoothingFilter.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(sf.getr(TAG), SmoothingFilter.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' TAG ') must be inizialized to its default value ' ...
					'given by SmoothingFilter.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SmoothingFilter.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, SmoothingFilter.getPropDefault(SmoothingFilter.TEMPLATE), ...
		SmoothingFilter.ID, SmoothingFilter.getPropDefault(SmoothingFilter.ID), ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, SmoothingFilter.getPropDefault(SmoothingFilter.RE_IN), ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, SmoothingFilter.getPropDefault(SmoothingFilter.REPF) ...
		);
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SmoothingFilter.getPropTag(prop));
		switch SmoothingFilter.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(sf.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sf.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sf.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sf.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sf.checkFormat(sf.getPropFormat(prop), sf.getr(prop),sf.getPropSettings(prop)), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':SmoothingFilter']);
				assert( ...
					~isa(sf.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sf.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':SmoothingFilter']);
	% 			assert( ...
	% 				~isa(sf.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
	% 				['SmoothingFilter.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(sf.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
	% 				['SmoothingFilter.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				sf.checkFormat(sf.getPropFormat(prop), sf.getr(prop),sf.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
	% 				['SmoothingFilter.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':SmoothingFilter']);
				assert( ...
					~isa(sf.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(sf.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sf.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sf.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sf.checkFormat(sf.getPropFormat(prop), sf.getr(prop),sf.getPropSettings(prop)), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if sf.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:SmoothingFilter');
					delete(ancestor(sf.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(SmoothingFilter.getProps(Category.RESULT))
		for prop = 1:1:SmoothingFilter.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch SmoothingFilter.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						sf.isLocked(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~sf.isLocked(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf = SmoothingFilter();
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		TAG = upper(SmoothingFilter.getPropTag(prop));
		assert( ...
			~sf.isLocked(prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			['SmoothingFilter.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~sf.isLocked(TAG), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			['SmoothingFilter.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	sf.lock()
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					sf.isLocked(prop), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~sf.isLocked(prop), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf = SmoothingFilter();
	 
	warning_backup = warning('off', 'BRAPH2:SmoothingFilter');
	for prop = 1:1:SmoothingFilter.getPropNumber()
		sf.lock(prop)
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					sf.isLocked(prop), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~sf.isLocked(prop), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf = SmoothingFilter();
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		TAG = upper(SmoothingFilter.getPropTag(prop));
		assert( ...
			sf.isChecked(prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			['SmoothingFilter.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			sf.isChecked(TAG), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			['SmoothingFilter.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	sf.unchecked()
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		assert( ...
			~sf.isChecked(prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			['SmoothingFilter.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	sf.checked()
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		assert( ...
			sf.isChecked(prop), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			['SmoothingFilter.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic SmoothingFilter
	sf_0 = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, SmoothingFilter.getPropDefault(SmoothingFilter.TEMPLATE), ...
		SmoothingFilter.ID, SmoothingFilter.getPropDefault(SmoothingFilter.ID), ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, SmoothingFilter.getPropDefault(SmoothingFilter.RE_IN), ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, SmoothingFilter.getPropDefault(SmoothingFilter.REPF) ...
		);
	 
	% SmoothingFilter with 1st callbacks
	sf_1 = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, sf_0.getCallback(4), ..., ...
		SmoothingFilter.ID, sf_0.getCallback(5), ..., ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, sf_0.getCallback(9), ..., ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, sf_0.getCallback(11) ... ...
		);
	 
	prop_number = SmoothingFilter.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SmoothingFilter.getPropTag(prop));
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sf_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sf_1.get(prop), sf_0.get(prop)) && ~isa(sf_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sf_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SmoothingFilter with 2nd callbacks
	sf_2 = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, sf_1.getCallback(4), ..., ...
		SmoothingFilter.ID, sf_1.getCallback(5), ..., ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, sf_1.getCallback(9), ..., ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, sf_1.getCallback(11) ... ...
		);
	 
	prop_number = SmoothingFilter.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SmoothingFilter.getPropTag(prop));
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sf_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sf_2.get(prop), sf_0.get(prop)) && ~isa(sf_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sf_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SmoothingFilter with 3rd callbacks
	sf_3 = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, sf_2.getCallback(4), ..., ...
		SmoothingFilter.ID, sf_2.getCallback(5), ..., ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, sf_2.getCallback(9), ..., ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, sf_2.getCallback(11) ... ...
		);
	 
	prop_number = SmoothingFilter.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SmoothingFilter.getPropTag(prop));
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sf_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sf_3.get(prop), sf_0.get(prop)) && ~isa(sf_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sf_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	sf = SmoothingFilter();
	 
	sf_copy = sf.copy();
	 
	assert(sf_copy ~= sf, ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(sf_copy, sf), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		value = sf.getr(prop);
		value_copy = sf_copy.getr(prop);
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					'SmoothingFilter.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
							'SmoothingFilter.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
							'SmoothingFilter.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					sf_copy.isLocked(prop) == sf.isLocked(prop), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					'SmoothingFilter.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sf_copy.isChecked(prop) == sf.isChecked(prop), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					'SmoothingFilter.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sf_copy.getPropSeed(prop) == sf.getPropSeed(prop), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					'SmoothingFilter.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	sf = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, SmoothingFilter.getPropDefault(SmoothingFilter.TEMPLATE), ...
		SmoothingFilter.ID, SmoothingFilter.getPropDefault(SmoothingFilter.ID), ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, SmoothingFilter.getPropDefault(SmoothingFilter.RE_IN), ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, SmoothingFilter.getPropDefault(SmoothingFilter.REPF) ...
		);
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		if SmoothingFilter.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':SmoothingFilter']);
			% sf.memorize(prop);
			% warning(warning_backup)
		elseif SmoothingFilter.getPropCategory(prop) == Category.EVANESCENT && sf.getPropFormat(prop) == Format.HANDLE
			sf.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:SmoothingFilter');
			delete(ancestor(sf.get(prop), 'figure'))
			warning(warning_backup)
		else
			sf.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	sf_copy = sf.copy();
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		value = sf.getr(prop);
		value_copy = sf_copy.getr(prop);
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					'SmoothingFilter.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
							'SmoothingFilter.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
							'SmoothingFilter.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						sf_copy.isLocked(prop) == sf.isLocked(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sf_copy.isChecked(prop) == sf.isChecked(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sf_copy.getPropSeed(prop) == sf.getPropSeed(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	sf_0 = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, SmoothingFilter.getPropDefault(SmoothingFilter.TEMPLATE), ...
		SmoothingFilter.ID, SmoothingFilter.getPropDefault(SmoothingFilter.ID), ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, SmoothingFilter.getPropDefault(SmoothingFilter.RE_IN), ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, SmoothingFilter.getPropDefault(SmoothingFilter.REPF) ...
		);
	 
	sf = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, sf_0.getCallback(4), ..., ...
		SmoothingFilter.ID, sf_0.getCallback(5), ..., ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, sf_0.getCallback(9), ..., ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, sf_0.getCallback(11) ... ...
		);
	 
	sf_copy = sf.copy();
	sf_0_copy = sf_copy.getr('ID').get('EL');
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
		value = sf.getr(prop);
		value_copy = sf_copy.getr(prop);
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					'SmoothingFilter.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
							'SmoothingFilter.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
							'SmoothingFilter.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == sf_0.getCallback(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The callback should be obtained from SmoothingFilter.getCallback().' ...
						)
					assert( ...
						value_copy == sf_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The callback should be obtained from SmoothingFilter.getCallback().' ...
						)
				end
	 
					assert( ...
						sf_copy.isLocked(prop) == sf.isLocked(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sf_copy.isChecked(prop) == sf.isChecked(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sf_copy.getPropSeed(prop) == sf.getPropSeed(prop), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf_template = SmoothingFilter();
	sf = SmoothingFilter('TEMPLATE', sf_template);
	 
	for prop = 1:1:SmoothingFilter.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(SmoothingFilter.getPropTag(prop));
		switch SmoothingFilter.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == SmoothingFilter.TEMPLATE
					assert( ...
						isa(sf.getr(prop), 'SmoothingFilter'), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter TEMPLATE does not work. SmoothingFilter.getr(''TEMPLATE'') should be a SmoothingFilter element.' ...
						)
					assert( ...
						isa(sf_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						'SmoothingFilter TEMPLATE does not work. SmoothingFilter_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(sf.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter TEMPLATE does not work. SmoothingFilter.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						sf.getr(prop).get('EL') == sf_template && sf.getr(prop).get('PROP') == prop && strcmp(sf.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter TEMPLATE does not work. SmoothingFilter.getr(' TAG ') should be a Callback to sf_template.' TAG '.'] ...
						)
					assert( ...
						isa(sf_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
						['SmoothingFilter TEMPLATE does not work. SmoothingFilter_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(sf.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter TEMPLATE does not work. SmoothingFilter.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(sf_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
					['SmoothingFilter TEMPLATE does not work. SmoothingFilter_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, SmoothingFilter.getPropDefault(SmoothingFilter.TEMPLATE), ...
		SmoothingFilter.ID, SmoothingFilter.getPropDefault(SmoothingFilter.ID), ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, SmoothingFilter.getPropDefault(SmoothingFilter.RE_IN), ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, SmoothingFilter.getPropDefault(SmoothingFilter.REPF) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'smoothingfilter_to_be_erased.b2'];
	 
	Element.save(sf, filename)
	 
	sf_loaded = Element.load(filename);
	 
	assert( ...
		isequal(sf.copy(), sf_loaded), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.save(sf) and/or SmoothingFilter.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sf = SmoothingFilter( ...
		SmoothingFilter.ELCLASS, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.NAME, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.DESCRIPTION, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.TEMPLATE, SmoothingFilter.getPropDefault(SmoothingFilter.TEMPLATE), ...
		SmoothingFilter.ID, SmoothingFilter.getPropDefault(SmoothingFilter.ID), ...
		SmoothingFilter.LABEL, SmoothingFilter.getPropDefault(SmoothingFilter.LABEL), ...
		SmoothingFilter.NOTES, SmoothingFilter.getPropDefault(SmoothingFilter.NOTES), ...
		SmoothingFilter.TOSTRING, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.RE_IN, SmoothingFilter.getPropDefault(SmoothingFilter.RE_IN), ...
		SmoothingFilter.RE_OUT, SmoothingFilter.getNoValue(), ...
		SmoothingFilter.REPF, SmoothingFilter.getPropDefault(SmoothingFilter.REPF) ...
		);
	 
	[json, struct, el_list] = encodeJSON(sf);
	[sf_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(sf_dec ~= sf, ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		'SmoothingFilter.encodeJSON() or SmoothingFilter.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) SmoothingFilter.getPropFormat(prop), num2cell(SmoothingFilter.getProps())) == Format.HANDLE) && all(cellfun(@(prop) SmoothingFilter.getPropFormat(prop), num2cell(SmoothingFilter.getProps())) == Format.NET)
		assert(isequal(sf_dec, sf), ...
			[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
			'SmoothingFilter.encodeJSON() or SmoothingFilter.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':SmoothingFilter:' BRAPH2.FAIL_TEST], ...
		[' When testing SmoothingFilter no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

