%TEST_BASELINEREMOVER

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	br = BaselineRemover();
	 
	% get('ELCLASS')
	if isa(BaselineRemover, 'ConcreteElement')
		assert(strcmp(BaselineRemover().get('ELCLASS'), 'BaselineRemover'), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover().get(''ELCLASS'') should return ''BaselineRemover''.')
	end
	 
	% getClass
	assert(strcmp(BaselineRemover.getClass(), 'BaselineRemover'), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.getClass() should return ''BaselineRemover''.')
	assert(strcmp(br.getClass(), 'BaselineRemover'), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'br.getClass() should return ''BaselineRemover''.')
	assert(strcmp(Element.getClass(br), 'BaselineRemover'), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(br) should return ''BaselineRemover''.')
	assert(strcmp(Element.getClass('BaselineRemover'), 'BaselineRemover'), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''BaselineRemover'') should return ''BaselineRemover''.')
	 
	% getSubclasses()
	assert(isequal(BaselineRemover.getSubclasses(), subclasses('BaselineRemover', [], [], true)), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.getSubclasses() should return the same result as subclasses(''BaselineRemover'', [], [], true).')
	assert(isequal(br.getSubclasses(), subclasses('BaselineRemover', [], [], true)), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''BaselineRemover'', [], [], true).')
	assert(isequal(Element.getSubclasses(br), subclasses('BaselineRemover', [], [], true)), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(br) should return the same result as subclasses(''BaselineRemover'', [], [], true).')
	assert(isequal(Element.getSubclasses('BaselineRemover'), subclasses('BaselineRemover', [], [], true)), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''BaselineRemover'') should return the same result as subclasses(''BaselineRemover'', [], [], true).')
	 
	% getProps()
	assert(isempty(BaselineRemover.getProps()) || isequal(BaselineRemover.getProps(), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.getProps() should return a row vector [1:1:N].')
	assert(isempty(BaselineRemover.getProps()) || isequal(br.getProps(), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'br.getProps() should return a row vector [1:1:N].')
	assert(isempty(BaselineRemover.getProps()) || isequal(Element.getProps(br), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(br) should return a row vector [1:1:N].')
	assert(isempty(BaselineRemover.getProps()) || isequal(Element.getProps('BaselineRemover'), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BaselineRemover'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) BaselineRemover.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BaselineRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.getProps(category) does not work.')
	tmp = cellfun(@(category) br.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(BaselineRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'br.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(br, category), categories, 'UniformOutput', false);
	assert(isempty(BaselineRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(br, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('BaselineRemover', category), categories, 'UniformOutput', false);
	assert(isempty(BaselineRemover.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(BaselineRemover.getProps())), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''BaselineRemover'', category) does not work.')
	 
	% getPropNumber()
	assert(BaselineRemover.getPropNumber() == length(BaselineRemover.getProps()), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.getPropNumber() should return the number of properties.')
	assert(br.getPropNumber() == length(BaselineRemover.getProps()), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'br.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(br) == length(BaselineRemover.getProps()), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(br) should return the number of properties.')
	assert(Element.getPropNumber('BaselineRemover') == length(BaselineRemover.getProps()), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BaselineRemover'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) BaselineRemover.getPropNumber(category), categories)) == BaselineRemover.getPropNumber(), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) br.getPropNumber(category), categories)) == BaselineRemover.getPropNumber(), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'br.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(br, category), categories)) == BaselineRemover.getPropNumber(), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(br, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('BaselineRemover', category), categories)) == BaselineRemover.getPropNumber(), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''BaselineRemover'', category) does not work.')
	 
	% existsProp(prop)
	assert(~BaselineRemover.existsProp(NaN), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.existsProp(prop) does not work.')
	assert(~br.existsProp(NaN), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'br.existsProp(prop) does not work.')
	assert(~Element.existsProp(br, NaN), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(br, prop) does not work.')
	assert(~Element.existsProp('BaselineRemover', NaN), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''BaselineRemover'', prop) does not work.')
	 
	assert_with_error('BaselineRemover.existsProp(NaN)', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsProp(''BaselineRemover'', NaN)', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		assert(BaselineRemover.existsProp(prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.existsProp(prop) does not work.')
		assert(br.existsProp(prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.existsProp(prop) does not work.')
		assert(Element.existsProp(br, prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(br, prop) does not work.')
		assert(Element.existsProp('BaselineRemover', prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''BaselineRemover'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~BaselineRemover.existsTag(''), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.existsTag(tag) does not work.')
	assert(~br.existsTag(''), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'br.existsTag(tag) does not work.')
	assert(~Element.existsTag(br, ''), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(br, tag) does not work.')
	assert(~Element.existsTag('BaselineRemover', ''), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''BaselineRemover'', tag) does not work.')
	 
	assert_with_error('BaselineRemover.existsTag('''')', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], br)
	assert_with_error('Element.existsTag(''BaselineRemover'', '''')', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
		assert(BaselineRemover.existsTag(tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.existsTag(tag) does not work.')
		assert(br.existsTag(tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.existsTag(tag) does not work.')
		assert(Element.existsTag(br, tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(br, tga) does not work.')
		assert(Element.existsTag('BaselineRemover', tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''BaselineRemover'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		assert(BaselineRemover.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropProp(prop) does not work.')
		assert(br.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropProp(prop) does not work.')
		assert(Element.getPropProp(br, prop) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(br, prop) does not work.')
		assert(Element.getPropProp('BaselineRemover', prop) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BaselineRemover'', prop) does not work.')
	 
		tag = br.getPropTag(prop);
		assert(BaselineRemover.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropProp(tag) does not work.')
		assert(br.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropProp(tag) does not work.')
		assert(Element.getPropProp(br, tag) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(br, tag) does not work.')
		assert(Element.getPropProp('BaselineRemover', prop) == prop, ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''BaselineRemover'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(strcmp(BaselineRemover.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropTag(prop) does not work.')
		assert(strcmp(br.getPropTag(prop), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(br, prop), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(br, prop) does not work.')
		assert(strcmp(Element.getPropTag('BaselineRemover', prop), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BaselineRemover'', prop) does not work.')
	 
		assert(strcmp(BaselineRemover.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropTag(tag) does not work.')
		assert(strcmp(br.getPropTag(tag), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(br, tag), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(br, tag) does not work.')
		assert(strcmp(Element.getPropTag('BaselineRemover', prop), tag), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''BaselineRemover'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(Category.existsCategory(BaselineRemover.getPropCategory(prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(br.getPropCategory(prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(br, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BaselineRemover'', prop) does not work.')
	 
		assert(Category.existsCategory(BaselineRemover.getPropCategory(tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(br.getPropCategory(tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(br, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(br, tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''BaselineRemover'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(Format.existsFormat(BaselineRemover.getPropFormat(prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(br.getPropFormat(prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(br, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BaselineRemover'', prop) does not work.')
	 
		assert(Format.existsFormat(BaselineRemover.getPropFormat(tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(br.getPropFormat(tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(br, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(br, tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''BaselineRemover'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(ischar(BaselineRemover.getPropDescription(prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropDescription(prop) does not work.')
		assert(ischar(br.getPropDescription(prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(br, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(br, prop) does not work.')
		assert(ischar(Element.getPropDescription(br, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BaselineRemover'', prop) does not work.')
	 
		assert(ischar(BaselineRemover.getPropDescription(tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.getPropDescription(tag) does not work.')
		assert(ischar(br.getPropDescription(tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(br, tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(br, tag) does not work.')
		assert(ischar(Element.getPropDescription(br, tag)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''BaselineRemover'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		settings = BaselineRemover.getPropSettings(prop);
		settings = br.getPropSettings(prop);
		settings = Element.getPropSettings(br, prop);
		settings = Element.getPropSettings('BaselineRemover', prop);
	 
		settings = BaselineRemover.getPropSettings(tag);
		settings = br.getPropSettings(tag);
		settings = Element.getPropSettings(br, tag);
		settings = Element.getPropSettings('BaselineRemover', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		default = BaselineRemover.getPropDefault(prop);
		default = br.getPropDefault(prop);
		default = Element.getPropDefault(br, prop);
		default = Element.getPropDefault('BaselineRemover', prop);
	 
		default = BaselineRemover.getPropDefault(tag);
		default = br.getPropDefault(tag);
		default = Element.getPropDefault(br, tag);
		default = Element.getPropDefault('BaselineRemover', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		conditioned_default = BaselineRemover.getPropDefaultConditioned(prop);
		conditioned_default = br.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(br, prop);
		conditioned_default = Element.getPropDefaultConditioned('BaselineRemover', prop);
	 
		conditioned_default = BaselineRemover.getPropDefaultConditioned(tag);
		conditioned_default = br.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(br, tag);
		conditioned_default = Element.getPropDefaultConditioned('BaselineRemover', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:BaselineRemover.getPropNumber()
		tag = br.getPropTag(prop);
	 
		assert(~BaselineRemover.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.checkProp(prop, value) does not work.')
		assert(~br.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(br, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, prop, value) does not work.')
		assert(~Element.checkProp('BaselineRemover', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineRemover'', prop, value) does not work.')
	 
		assert_with_error('BaselineRemover.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], prop, br)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], prop, br)
		assert_with_error('Element.checkProp(''BaselineRemover'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~BaselineRemover.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.checkProp(tag, value) does not work.')
		assert(~br.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(br, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, tag, value) does not work.')
		assert(~Element.checkProp('BaselineRemover', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineRemover'', tag, value) does not work.')
	 
		assert_with_error('BaselineRemover.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], tag, br)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], tag, br)
		assert_with_error('Element.checkProp(''BaselineRemover'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':BaselineRemover:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(BaselineRemover.checkProp(prop, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.checkProp(prop, <conditioned default value>) does not work.')
		assert(br.checkProp(prop, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(br, prop, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('BaselineRemover', prop, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineRemover'', prop, <conditioned default value>) does not work.')
	 
		assert(BaselineRemover.checkProp(tag, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.checkProp(tag, <conditioned default value>) does not work.')
		assert(br.checkProp(tag, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'br.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(br, tag, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(br, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('BaselineRemover', tag, Element.getPropDefaultConditioned(BaselineRemover, prop)), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''BaselineRemover'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, BaselineRemover.getPropDefault(BaselineRemover.TEMPLATE), ...
		BaselineRemover.ID, BaselineRemover.getPropDefault(BaselineRemover.ID), ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, BaselineRemover.getPropDefault(BaselineRemover.RE_IN), ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, BaselineRemover.getPropDefault(BaselineRemover.REPF), ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, BaselineRemover.getPropDefault(BaselineRemover.BAPF), ...
		BaselineRemover.LFIT_POLYORDER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_POLYORDER), ...
		BaselineRemover.LFIT_ITER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_ITER) ...
		);
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [BaselineRemover.TEMPLATE BaselineRemover.REPF BaselineRemover.BAPF])
			continue
		end
	 
		TAG = upper(BaselineRemover.getPropTag(prop));
		switch BaselineRemover.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					br.getr(prop) == BaselineRemover.getNoValue(), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineRemover.getCategoryName(BaselineRemover.getPropCategory(prop)) ', BaselineRemover.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					br.getr(TAG) == BaselineRemover.getNoValue(), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineRemover.getCategoryName(BaselineRemover.getPropCategory(prop)) ', BaselineRemover.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineRemover.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(br.getPropSettings(prop))
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop)), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop), br.getPropSettings(prop)), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					br.getr(prop) == BaselineRemover.getNoValue(), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineRemover.getCategoryName(BaselineRemover.getPropCategory(prop)) ', BaselineRemover.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					br.getr(TAG) == BaselineRemover.getNoValue(), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['Being a ' BaselineRemover.getCategoryName(BaselineRemover.getPropCategory(prop)) ', BaselineRemover.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in BaselineRemover.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':BaselineRemover']);
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(br.getPropSettings(prop))
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop)), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						br.checkFormat(br.getPropFormat(prop), br.get(prop), br.getPropSettings(prop)), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(br.getr(prop), BaselineRemover.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by BaselineRemover.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BaselineRemover.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(br.getr(TAG), BaselineRemover.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' TAG ') must be inizialized to its default value ' ...
					'given by BaselineRemover.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in BaselineRemover.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, BaselineRemover.getPropDefault(BaselineRemover.TEMPLATE), ...
		BaselineRemover.ID, BaselineRemover.getPropDefault(BaselineRemover.ID), ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, BaselineRemover.getPropDefault(BaselineRemover.RE_IN), ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, BaselineRemover.getPropDefault(BaselineRemover.REPF), ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, BaselineRemover.getPropDefault(BaselineRemover.BAPF), ...
		BaselineRemover.LFIT_POLYORDER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_POLYORDER), ...
		BaselineRemover.LFIT_ITER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_ITER) ...
		);
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [BaselineRemover.TEMPLATE BaselineRemover.REPF BaselineRemover.BAPF])
			continue
		end
	 
		TAG = upper(BaselineRemover.getPropTag(prop));
		switch BaselineRemover.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(br.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					br.checkFormat(br.getPropFormat(prop), br.getr(prop),br.getPropSettings(prop)), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':BaselineRemover']);
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':BaselineRemover']);
	% 			assert( ...
	% 				~isa(br.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
	% 				['BaselineRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(br.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
	% 				['BaselineRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				br.checkFormat(br.getPropFormat(prop), br.getr(prop),br.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
	% 				['BaselineRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':BaselineRemover']);
				assert( ...
					~isa(br.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(br.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					br.checkFormat(br.getPropFormat(prop), br.getr(prop),br.getPropSettings(prop)), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if br.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:BaselineRemover');
					delete(ancestor(br.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(BaselineRemover.getProps(Category.RESULT))
		for prop = 1:1:BaselineRemover.getPropNumber()
	 
			% excluded props
			if any(prop == [BaselineRemover.TEMPLATE BaselineRemover.REPF BaselineRemover.BAPF])
				continue
			end
	 
			switch BaselineRemover.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						br.isLocked(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~br.isLocked(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BaselineRemover();
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		TAG = upper(BaselineRemover.getPropTag(prop));
		assert( ...
			~br.isLocked(prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			['BaselineRemover.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~br.isLocked(TAG), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			['BaselineRemover.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	br.lock()
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		switch BaselineRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					br.isLocked(prop), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~br.isLocked(prop), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BaselineRemover();
	 
	warning_backup = warning('off', 'BRAPH2:BaselineRemover');
	for prop = 1:1:BaselineRemover.getPropNumber()
		br.lock(prop)
		switch BaselineRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					br.isLocked(prop), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~br.isLocked(prop), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BaselineRemover();
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		TAG = upper(BaselineRemover.getPropTag(prop));
		assert( ...
			br.isChecked(prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			['BaselineRemover.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			br.isChecked(TAG), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			['BaselineRemover.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	br.unchecked()
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		assert( ...
			~br.isChecked(prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			['BaselineRemover.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	br.checked()
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		assert( ...
			br.isChecked(prop), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			['BaselineRemover.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic BaselineRemover
	br_0 = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, BaselineRemover.getPropDefault(BaselineRemover.TEMPLATE), ...
		BaselineRemover.ID, BaselineRemover.getPropDefault(BaselineRemover.ID), ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, BaselineRemover.getPropDefault(BaselineRemover.RE_IN), ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, BaselineRemover.getPropDefault(BaselineRemover.REPF), ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, BaselineRemover.getPropDefault(BaselineRemover.BAPF), ...
		BaselineRemover.LFIT_POLYORDER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_POLYORDER), ...
		BaselineRemover.LFIT_ITER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_ITER) ...
		);
	 
	% BaselineRemover with 1st callbacks
	br_1 = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, br_0.getCallback(4), ..., ...
		BaselineRemover.ID, br_0.getCallback(5), ..., ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, br_0.getCallback(9), ..., ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, br_0.getCallback(13), ..., ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, br_0.getCallback(15), ..., ...
		BaselineRemover.LFIT_POLYORDER, br_0.getCallback(16), ..., ...
		BaselineRemover.LFIT_ITER, br_0.getCallback(17) ... ...
		);
	 
	prop_number = BaselineRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselineRemover.getPropTag(prop));
		switch BaselineRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(br_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(br_1.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(br_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BaselineRemover with 2nd callbacks
	br_2 = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, br_1.getCallback(4), ..., ...
		BaselineRemover.ID, br_1.getCallback(5), ..., ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, br_1.getCallback(9), ..., ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, br_1.getCallback(13), ..., ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, br_1.getCallback(15), ..., ...
		BaselineRemover.LFIT_POLYORDER, br_1.getCallback(16), ..., ...
		BaselineRemover.LFIT_ITER, br_1.getCallback(17) ... ...
		);
	 
	prop_number = BaselineRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselineRemover.getPropTag(prop));
		switch BaselineRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(br_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(br_2.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(br_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% BaselineRemover with 3rd callbacks
	br_3 = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, br_2.getCallback(4), ..., ...
		BaselineRemover.ID, br_2.getCallback(5), ..., ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, br_2.getCallback(9), ..., ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, br_2.getCallback(13), ..., ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, br_2.getCallback(15), ..., ...
		BaselineRemover.LFIT_POLYORDER, br_2.getCallback(16), ..., ...
		BaselineRemover.LFIT_ITER, br_2.getCallback(17) ... ...
		);
	 
	prop_number = BaselineRemover.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(BaselineRemover.getPropTag(prop));
		switch BaselineRemover.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(br_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(br_3.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(br_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	br = BaselineRemover();
	 
	br_copy = br.copy();
	 
	assert(br_copy ~= br, ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(br_copy, br), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		value = br.getr(prop);
		value_copy = br_copy.getr(prop);
		switch BaselineRemover.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					'BaselineRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
							'BaselineRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
							'BaselineRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					br_copy.isLocked(prop) == br.isLocked(prop), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					'BaselineRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					br_copy.isChecked(prop) == br.isChecked(prop), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					'BaselineRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					br_copy.getPropSeed(prop) == br.getPropSeed(prop), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					'BaselineRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	br = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, BaselineRemover.getPropDefault(BaselineRemover.TEMPLATE), ...
		BaselineRemover.ID, BaselineRemover.getPropDefault(BaselineRemover.ID), ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, BaselineRemover.getPropDefault(BaselineRemover.RE_IN), ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, BaselineRemover.getPropDefault(BaselineRemover.REPF), ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, BaselineRemover.getPropDefault(BaselineRemover.BAPF), ...
		BaselineRemover.LFIT_POLYORDER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_POLYORDER), ...
		BaselineRemover.LFIT_ITER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_ITER) ...
		);
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		if BaselineRemover.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':BaselineRemover']);
			% br.memorize(prop);
			% warning(warning_backup)
		elseif BaselineRemover.getPropCategory(prop) == Category.EVANESCENT && br.getPropFormat(prop) == Format.HANDLE
			br.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:BaselineRemover');
			delete(ancestor(br.get(prop), 'figure'))
			warning(warning_backup)
		else
			br.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	br_copy = br.copy();
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		value = br.getr(prop);
		value_copy = br_copy.getr(prop);
		switch BaselineRemover.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					'BaselineRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
							'BaselineRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
							'BaselineRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						br_copy.isLocked(prop) == br.isLocked(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.isChecked(prop) == br.isChecked(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.getPropSeed(prop) == br.getPropSeed(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	br_0 = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, BaselineRemover.getPropDefault(BaselineRemover.TEMPLATE), ...
		BaselineRemover.ID, BaselineRemover.getPropDefault(BaselineRemover.ID), ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, BaselineRemover.getPropDefault(BaselineRemover.RE_IN), ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, BaselineRemover.getPropDefault(BaselineRemover.REPF), ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, BaselineRemover.getPropDefault(BaselineRemover.BAPF), ...
		BaselineRemover.LFIT_POLYORDER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_POLYORDER), ...
		BaselineRemover.LFIT_ITER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_ITER) ...
		);
	 
	br = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, br_0.getCallback(4), ..., ...
		BaselineRemover.ID, br_0.getCallback(5), ..., ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, br_0.getCallback(9), ..., ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, br_0.getCallback(13), ..., ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, br_0.getCallback(15), ..., ...
		BaselineRemover.LFIT_POLYORDER, br_0.getCallback(16), ..., ...
		BaselineRemover.LFIT_ITER, br_0.getCallback(17) ... ...
		);
	 
	br_copy = br.copy();
	br_0_copy = br_copy.getr('ID').get('EL');
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
		value = br.getr(prop);
		value_copy = br_copy.getr(prop);
		switch BaselineRemover.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					'BaselineRemover.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
							'BaselineRemover.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
							'BaselineRemover.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == br_0.getCallback(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The callback should be obtained from BaselineRemover.getCallback().' ...
						)
					assert( ...
						value_copy == br_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The callback should be obtained from BaselineRemover.getCallback().' ...
						)
				end
	 
					assert( ...
						br_copy.isLocked(prop) == br.isLocked(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.isChecked(prop) == br.isChecked(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						br_copy.getPropSeed(prop) == br.getPropSeed(prop), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br_template = BaselineRemover();
	br = BaselineRemover('TEMPLATE', br_template);
	 
	for prop = 1:1:BaselineRemover.getPropNumber()
	 
		% excluded props
		if any(prop == [BaselineRemover.TEMPLATE BaselineRemover.REPF BaselineRemover.BAPF])
			continue
		end
	 
		TAG = upper(BaselineRemover.getPropTag(prop));
		switch BaselineRemover.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == BaselineRemover.TEMPLATE
					assert( ...
						isa(br.getr(prop), 'BaselineRemover'), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover TEMPLATE does not work. BaselineRemover.getr(''TEMPLATE'') should be a BaselineRemover element.' ...
						)
					assert( ...
						isa(br_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						'BaselineRemover TEMPLATE does not work. BaselineRemover_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(br.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover TEMPLATE does not work. BaselineRemover.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						br.getr(prop).get('EL') == br_template && br.getr(prop).get('PROP') == prop && strcmp(br.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover TEMPLATE does not work. BaselineRemover.getr(' TAG ') should be a Callback to br_template.' TAG '.'] ...
						)
					assert( ...
						isa(br_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
						['BaselineRemover TEMPLATE does not work. BaselineRemover_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(br.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover TEMPLATE does not work. BaselineRemover.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(br_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
					['BaselineRemover TEMPLATE does not work. BaselineRemover_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, BaselineRemover.getPropDefault(BaselineRemover.TEMPLATE), ...
		BaselineRemover.ID, BaselineRemover.getPropDefault(BaselineRemover.ID), ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, BaselineRemover.getPropDefault(BaselineRemover.RE_IN), ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, BaselineRemover.getPropDefault(BaselineRemover.REPF), ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, BaselineRemover.getPropDefault(BaselineRemover.BAPF), ...
		BaselineRemover.LFIT_POLYORDER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_POLYORDER), ...
		BaselineRemover.LFIT_ITER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_ITER) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'baselineremover_to_be_erased.b2'];
	 
	Element.save(br, filename)
	 
	br_loaded = Element.load(filename);
	 
	assert( ...
		isequal(br.copy(), br_loaded), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.save(br) and/or BaselineRemover.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	br = BaselineRemover( ...
		BaselineRemover.ELCLASS, BaselineRemover.getNoValue(), ...
		BaselineRemover.NAME, BaselineRemover.getNoValue(), ...
		BaselineRemover.DESCRIPTION, BaselineRemover.getNoValue(), ...
		BaselineRemover.TEMPLATE, BaselineRemover.getPropDefault(BaselineRemover.TEMPLATE), ...
		BaselineRemover.ID, BaselineRemover.getPropDefault(BaselineRemover.ID), ...
		BaselineRemover.LABEL, BaselineRemover.getPropDefault(BaselineRemover.LABEL), ...
		BaselineRemover.NOTES, BaselineRemover.getPropDefault(BaselineRemover.NOTES), ...
		BaselineRemover.TOSTRING, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_IN, BaselineRemover.getPropDefault(BaselineRemover.RE_IN), ...
		BaselineRemover.SP_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.SP_DICT_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.RE_OUT, BaselineRemover.getNoValue(), ...
		BaselineRemover.REPF, BaselineRemover.getPropDefault(BaselineRemover.REPF), ...
		BaselineRemover.RE_BASELINES, BaselineRemover.getNoValue(), ...
		BaselineRemover.BAPF, BaselineRemover.getPropDefault(BaselineRemover.BAPF), ...
		BaselineRemover.LFIT_POLYORDER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_POLYORDER), ...
		BaselineRemover.LFIT_ITER, BaselineRemover.getPropDefault(BaselineRemover.LFIT_ITER) ...
		);
	 
	[json, struct, el_list] = encodeJSON(br);
	[br_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(br_dec ~= br, ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		'BaselineRemover.encodeJSON() or BaselineRemover.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) BaselineRemover.getPropFormat(prop), num2cell(BaselineRemover.getProps())) == Format.HANDLE) && all(cellfun(@(prop) BaselineRemover.getPropFormat(prop), num2cell(BaselineRemover.getProps())) == Format.NET)
		assert(isequal(br_dec, br), ...
			[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
			'BaselineRemover.encodeJSON() or BaselineRemover.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':BaselineRemover:' BRAPH2.FAIL_TEST], ...
		[' When testing BaselineRemover no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

