%TEST_NNDATA_FUN_WU

%% Test 1.1: Instantiation - empty

nnd = NNData_FUN_WU();

prop_number = NNData_FUN_WU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNData_FUN_WU.getPropTag(prop));
	assert( ...
		isa(nnd.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
		['NNData_FUN_WU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNData_FUN_WU.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nnd.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
		['NNData_FUN_WU.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNData_FUN_WU.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNData_FUN_WU')
nnd = NNData_FUN_WU( ...
	NNData_FUN_WU.ID, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.ID), ...
	NNData_FUN_WU.LABEL, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.LABEL), ...
	NNData_FUN_WU.NOTES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NOTES), ...
	NNData_FUN_WU.WAITBAR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.WAITBAR), ...
	NNData_FUN_WU.INPUT_TYPE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.INPUT_TYPE), ...
	NNData_FUN_WU.G, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.G), ...
	NNData_FUN_WU.MEASURES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.MEASURES), ...
	NNData_FUN_WU.TARGET_NAME, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.TARGET_NAME), ...
	NNData_FUN_WU.GR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR), ...
	NNData_FUN_WU.GR_NN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR_NN), ...
	NNData_FUN_WU.REPETITION, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.REPETITION), ...
	NNData_FUN_WU.FREQUENCYRULEMIN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMIN), ...
	NNData_FUN_WU.FREQUENCYRULEMAX, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMAX), ...
	NNData_FUN_WU.CORRELATION_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.CORRELATION_RULE), ...
	NNData_FUN_WU.NEGATIVE_WEIGHT_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NEGATIVE_WEIGHT_RULE) ...
	);
warning('on', 'BRAPH2:NNData_FUN_WU')

for prop = 1:1:NNData_FUN_WU.getPropNumber()
	TAG = upper(NNData_FUN_WU.getPropTag(prop));
	switch NNData_FUN_WU.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nnd.getr(prop), NNData_FUN_WU.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNData_FUN_WU.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNData_FUN_WU.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nnd.getr(TAG), NNData_FUN_WU.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNData_FUN_WU.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNData_FUN_WU.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nnd.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNData_FUN_WU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNData_FUN_WU.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nnd.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNData_FUN_WU.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNData_FUN_WU.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNData_FUN_WU')
nnd_0 = NNData_FUN_WU( ...
	NNData_FUN_WU.ID, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.ID), ...
	NNData_FUN_WU.LABEL, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.LABEL), ...
	NNData_FUN_WU.NOTES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NOTES), ...
	NNData_FUN_WU.WAITBAR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.WAITBAR), ...
	NNData_FUN_WU.INPUT_TYPE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.INPUT_TYPE), ...
	NNData_FUN_WU.G, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.G), ...
	NNData_FUN_WU.MEASURES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.MEASURES), ...
	NNData_FUN_WU.TARGET_NAME, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.TARGET_NAME), ...
	NNData_FUN_WU.GR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR), ...
	NNData_FUN_WU.GR_NN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR_NN), ...
	NNData_FUN_WU.REPETITION, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.REPETITION), ...
	NNData_FUN_WU.FREQUENCYRULEMIN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMIN), ...
	NNData_FUN_WU.FREQUENCYRULEMAX, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMAX), ...
	NNData_FUN_WU.CORRELATION_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.CORRELATION_RULE), ...
	NNData_FUN_WU.NEGATIVE_WEIGHT_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NEGATIVE_WEIGHT_RULE) ...
	);
warning('on', 'BRAPH2:NNData_FUN_WU')

nnd_1 = NNData_FUN_WU( ...
	NNData_FUN_WU.ID, Callback('EL', nnd_0, 'PROP', 1), ...
	NNData_FUN_WU.LABEL, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.LABEL), ...
	NNData_FUN_WU.NOTES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NOTES), ...
	NNData_FUN_WU.WAITBAR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.WAITBAR), ...
	NNData_FUN_WU.INPUT_TYPE, Callback('EL', nnd_0, 'PROP', 5), ...
	NNData_FUN_WU.G, Callback('EL', nnd_0, 'PROP', 6), ...
	NNData_FUN_WU.MEASURES, Callback('EL', nnd_0, 'PROP', 7), ...
	NNData_FUN_WU.TARGET_NAME, Callback('EL', nnd_0, 'PROP', 8), ...
	NNData_FUN_WU.GR, Callback('EL', nnd_0, 'PROP', 9), ...
	NNData_FUN_WU.GR_NN, NoValue(), ...
	NNData_FUN_WU.REPETITION, Callback('EL', nnd_0, 'PROP', 11), ...
	NNData_FUN_WU.FREQUENCYRULEMIN, Callback('EL', nnd_0, 'PROP', 12), ...
	NNData_FUN_WU.FREQUENCYRULEMAX, Callback('EL', nnd_0, 'PROP', 13), ...
	NNData_FUN_WU.CORRELATION_RULE, Callback('EL', nnd_0, 'PROP', 14), ...
	NNData_FUN_WU.NEGATIVE_WEIGHT_RULE, Callback('EL', nnd_0, 'PROP', 15) ...
	);
	
prop_number = NNData_FUN_WU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNData_FUN_WU.getPropTag(prop));
	switch NNData_FUN_WU.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnd_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnd_1.get(prop), nnd_0.get(prop)) && ~isa(nnd_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnd_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nnd_2 = NNData_FUN_WU( ...
	NNData_FUN_WU.ID, Callback('EL', nnd_1, 'PROP', 1), ...
	NNData_FUN_WU.LABEL, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.LABEL), ...
	NNData_FUN_WU.NOTES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NOTES), ...
	NNData_FUN_WU.WAITBAR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.WAITBAR), ...
	NNData_FUN_WU.INPUT_TYPE, Callback('EL', nnd_1, 'PROP', 5), ...
	NNData_FUN_WU.G, Callback('EL', nnd_1, 'PROP', 6), ...
	NNData_FUN_WU.MEASURES, Callback('EL', nnd_1, 'PROP', 7), ...
	NNData_FUN_WU.TARGET_NAME, Callback('EL', nnd_1, 'PROP', 8), ...
	NNData_FUN_WU.GR, Callback('EL', nnd_1, 'PROP', 9), ...
	NNData_FUN_WU.GR_NN, NoValue(), ...
	NNData_FUN_WU.REPETITION, Callback('EL', nnd_1, 'PROP', 11), ...
	NNData_FUN_WU.FREQUENCYRULEMIN, Callback('EL', nnd_1, 'PROP', 12), ...
	NNData_FUN_WU.FREQUENCYRULEMAX, Callback('EL', nnd_1, 'PROP', 13), ...
	NNData_FUN_WU.CORRELATION_RULE, Callback('EL', nnd_1, 'PROP', 14), ...
	NNData_FUN_WU.NEGATIVE_WEIGHT_RULE, Callback('EL', nnd_1, 'PROP', 15) ...
	);
	
prop_number = NNData_FUN_WU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNData_FUN_WU.getPropTag(prop));
	switch NNData_FUN_WU.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnd_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnd_2.get(prop), nnd_0.get(prop)) && ~isa(nnd_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnd_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nnd_3 = NNData_FUN_WU( ...
	NNData_FUN_WU.ID, Callback('EL', nnd_2, 'PROP', 1), ...
	NNData_FUN_WU.LABEL, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.LABEL), ...
	NNData_FUN_WU.NOTES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NOTES), ...
	NNData_FUN_WU.WAITBAR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.WAITBAR), ...
	NNData_FUN_WU.INPUT_TYPE, Callback('EL', nnd_2, 'PROP', 5), ...
	NNData_FUN_WU.G, Callback('EL', nnd_2, 'PROP', 6), ...
	NNData_FUN_WU.MEASURES, Callback('EL', nnd_2, 'PROP', 7), ...
	NNData_FUN_WU.TARGET_NAME, Callback('EL', nnd_2, 'PROP', 8), ...
	NNData_FUN_WU.GR, Callback('EL', nnd_2, 'PROP', 9), ...
	NNData_FUN_WU.GR_NN, NoValue(), ...
	NNData_FUN_WU.REPETITION, Callback('EL', nnd_2, 'PROP', 11), ...
	NNData_FUN_WU.FREQUENCYRULEMIN, Callback('EL', nnd_2, 'PROP', 12), ...
	NNData_FUN_WU.FREQUENCYRULEMAX, Callback('EL', nnd_2, 'PROP', 13), ...
	NNData_FUN_WU.CORRELATION_RULE, Callback('EL', nnd_2, 'PROP', 14), ...
	NNData_FUN_WU.NEGATIVE_WEIGHT_RULE, Callback('EL', nnd_2, 'PROP', 15) ...
	);
	
prop_number = NNData_FUN_WU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNData_FUN_WU.getPropTag(prop));
	switch NNData_FUN_WU.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnd_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnd_3.get(prop), nnd_0.get(prop)) && ~isa(nnd_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnd_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNData_FUN_WU')
nnd = NNData_FUN_WU( ...
	NNData_FUN_WU.ID, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.ID), ...
	NNData_FUN_WU.LABEL, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.LABEL), ...
	NNData_FUN_WU.NOTES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NOTES), ...
	NNData_FUN_WU.WAITBAR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.WAITBAR), ...
	NNData_FUN_WU.INPUT_TYPE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.INPUT_TYPE), ...
	NNData_FUN_WU.G, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.G), ...
	NNData_FUN_WU.MEASURES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.MEASURES), ...
	NNData_FUN_WU.TARGET_NAME, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.TARGET_NAME), ...
	NNData_FUN_WU.GR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR), ...
	NNData_FUN_WU.GR_NN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR_NN), ...
	NNData_FUN_WU.REPETITION, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.REPETITION), ...
	NNData_FUN_WU.FREQUENCYRULEMIN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMIN), ...
	NNData_FUN_WU.FREQUENCYRULEMAX, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMAX), ...
	NNData_FUN_WU.CORRELATION_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.CORRELATION_RULE), ...
	NNData_FUN_WU.NEGATIVE_WEIGHT_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NEGATIVE_WEIGHT_RULE) ...
	);
warning('on', 'BRAPH2:NNData_FUN_WU')

prop_number = NNData_FUN_WU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNData_FUN_WU.getPropTag(prop));
	switch NNData_FUN_WU.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nnd.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nnd.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nnd.getPropSettings(prop))
				assert( ...
					nnd.checkFormat(nnd.getPropFormat(prop), nnd.get(prop)), ...
					[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
					['NNData_FUN_WU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nnd.checkFormat(nnd.getPropFormat(prop), nnd.get(prop), nnd.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
					['NNData_FUN_WU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNData_FUN_WU')
nnd = NNData_FUN_WU( ...
	NNData_FUN_WU.ID, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.ID), ...
	NNData_FUN_WU.LABEL, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.LABEL), ...
	NNData_FUN_WU.NOTES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NOTES), ...
	NNData_FUN_WU.WAITBAR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.WAITBAR), ...
	NNData_FUN_WU.INPUT_TYPE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.INPUT_TYPE), ...
	NNData_FUN_WU.G, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.G), ...
	NNData_FUN_WU.MEASURES, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.MEASURES), ...
	NNData_FUN_WU.TARGET_NAME, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.TARGET_NAME), ...
	NNData_FUN_WU.GR, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR), ...
	NNData_FUN_WU.GR_NN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.GR_NN), ...
	NNData_FUN_WU.REPETITION, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.REPETITION), ...
	NNData_FUN_WU.FREQUENCYRULEMIN, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMIN), ...
	NNData_FUN_WU.FREQUENCYRULEMAX, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.FREQUENCYRULEMAX), ...
	NNData_FUN_WU.CORRELATION_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.CORRELATION_RULE), ...
	NNData_FUN_WU.NEGATIVE_WEIGHT_RULE, NNData_FUN_WU.getPropDefault(NNData_FUN_WU.NEGATIVE_WEIGHT_RULE) ...
	);
warning('on', 'BRAPH2:NNData_FUN_WU')

for prop = 1:1:NNData_FUN_WU.getPropNumber()
	TAG = upper(NNData_FUN_WU.getPropTag(prop));
	switch NNData_FUN_WU.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nnd.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nnd.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nnd.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nnd.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nnd.checkFormat(nnd.getPropFormat(prop), nnd.getr(prop),nnd.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNData_FUN_WU:' BRAPH2.BUG_FUNC], ...
				['NNData_FUN_WU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Example 1

example_NN_FUN_WU_Regression_AdjacencyMatrix

%% Test 6: Example 2

example_NN_FUN_WU_Classification_AdjacencyMatrix

%% Test 7: Example 3

example_NN_FUN_WU_Classification_GraphMeasures

%% Test 8: Example 4

example_NNCV_FUN_WU_Classification_AdjacencyMatrix

