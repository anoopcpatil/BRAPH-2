%TEST_SEPARETEGROUPSCON_FUN

%% Test 1.1: Instantiation - empty

se = SepareteGroupsCON_FUN();

prop_number = SepareteGroupsCON_FUN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SepareteGroupsCON_FUN.getPropTag(prop));
	assert( ...
		isa(se.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
		['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in SepareteGroupsCON_FUN.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(se.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
		['SepareteGroupsCON_FUN.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in SepareteGroupsCON_FUN.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:SepareteGroupsCON_FUN')
se = SepareteGroupsCON_FUN( ...
	SepareteGroupsCON_FUN.ID, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.ID), ...
	SepareteGroupsCON_FUN.LABEL, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.LABEL), ...
	SepareteGroupsCON_FUN.NOTES, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.NOTES), ...
	SepareteGroupsCON_FUN.WAITBAR, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.WAITBAR), ...
	SepareteGroupsCON_FUN.GR_CON_FUN_MP, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GR_CON_FUN_MP), ...
	SepareteGroupsCON_FUN.GRS, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GRS) ...
	);
warning('on', 'BRAPH2:SepareteGroupsCON_FUN')

for prop = 1:1:SepareteGroupsCON_FUN.getPropNumber()
	TAG = upper(SepareteGroupsCON_FUN.getPropTag(prop));
	switch SepareteGroupsCON_FUN.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(se.getr(prop), SepareteGroupsCON_FUN.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by SepareteGroupsCON_FUN.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in SepareteGroupsCON_FUN.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(se.getr(TAG), SepareteGroupsCON_FUN.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by SepareteGroupsCON_FUN.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in SepareteGroupsCON_FUN.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(se.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['Being a result, SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in SepareteGroupsCON_FUN.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(se.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['Being a result, SepareteGroupsCON_FUN.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in SepareteGroupsCON_FUN.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:SepareteGroupsCON_FUN')
se_0 = SepareteGroupsCON_FUN( ...
	SepareteGroupsCON_FUN.ID, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.ID), ...
	SepareteGroupsCON_FUN.LABEL, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.LABEL), ...
	SepareteGroupsCON_FUN.NOTES, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.NOTES), ...
	SepareteGroupsCON_FUN.WAITBAR, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.WAITBAR), ...
	SepareteGroupsCON_FUN.GR_CON_FUN_MP, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GR_CON_FUN_MP), ...
	SepareteGroupsCON_FUN.GRS, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GRS) ...
	);
warning('on', 'BRAPH2:SepareteGroupsCON_FUN')

se_1 = SepareteGroupsCON_FUN( ...
	SepareteGroupsCON_FUN.ID, Callback('EL', se_0, 'PROP', 1), ...
	SepareteGroupsCON_FUN.LABEL, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.LABEL), ...
	SepareteGroupsCON_FUN.NOTES, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.NOTES), ...
	SepareteGroupsCON_FUN.WAITBAR, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.WAITBAR), ...
	SepareteGroupsCON_FUN.GR_CON_FUN_MP, Callback('EL', se_0, 'PROP', 5), ...
	SepareteGroupsCON_FUN.GRS, NoValue() ...
	);
	
prop_number = SepareteGroupsCON_FUN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SepareteGroupsCON_FUN.getPropTag(prop));
	switch SepareteGroupsCON_FUN.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(se_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(se_1.get(prop), se_0.get(prop)) && ~isa(se_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(se_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
se_2 = SepareteGroupsCON_FUN( ...
	SepareteGroupsCON_FUN.ID, Callback('EL', se_1, 'PROP', 1), ...
	SepareteGroupsCON_FUN.LABEL, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.LABEL), ...
	SepareteGroupsCON_FUN.NOTES, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.NOTES), ...
	SepareteGroupsCON_FUN.WAITBAR, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.WAITBAR), ...
	SepareteGroupsCON_FUN.GR_CON_FUN_MP, Callback('EL', se_1, 'PROP', 5), ...
	SepareteGroupsCON_FUN.GRS, NoValue() ...
	);
	
prop_number = SepareteGroupsCON_FUN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SepareteGroupsCON_FUN.getPropTag(prop));
	switch SepareteGroupsCON_FUN.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(se_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(se_2.get(prop), se_0.get(prop)) && ~isa(se_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(se_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
se_3 = SepareteGroupsCON_FUN( ...
	SepareteGroupsCON_FUN.ID, Callback('EL', se_2, 'PROP', 1), ...
	SepareteGroupsCON_FUN.LABEL, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.LABEL), ...
	SepareteGroupsCON_FUN.NOTES, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.NOTES), ...
	SepareteGroupsCON_FUN.WAITBAR, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.WAITBAR), ...
	SepareteGroupsCON_FUN.GR_CON_FUN_MP, Callback('EL', se_2, 'PROP', 5), ...
	SepareteGroupsCON_FUN.GRS, NoValue() ...
	);
	
prop_number = SepareteGroupsCON_FUN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SepareteGroupsCON_FUN.getPropTag(prop));
	switch SepareteGroupsCON_FUN.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(se_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(se_3.get(prop), se_0.get(prop)) && ~isa(se_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(se_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:SepareteGroupsCON_FUN')
se = SepareteGroupsCON_FUN( ...
	SepareteGroupsCON_FUN.ID, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.ID), ...
	SepareteGroupsCON_FUN.LABEL, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.LABEL), ...
	SepareteGroupsCON_FUN.NOTES, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.NOTES), ...
	SepareteGroupsCON_FUN.WAITBAR, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.WAITBAR), ...
	SepareteGroupsCON_FUN.GR_CON_FUN_MP, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GR_CON_FUN_MP), ...
	SepareteGroupsCON_FUN.GRS, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GRS) ...
	);
warning('on', 'BRAPH2:SepareteGroupsCON_FUN')

prop_number = SepareteGroupsCON_FUN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SepareteGroupsCON_FUN.getPropTag(prop));
	switch SepareteGroupsCON_FUN.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(se.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(se.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(se.getPropSettings(prop))
				assert( ...
					se.checkFormat(se.getPropFormat(prop), se.get(prop)), ...
					[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
					['SepareteGroupsCON_FUN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					se.checkFormat(se.getPropFormat(prop), se.get(prop), se.getPropSettings(prop)), ...
					[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
					['SepareteGroupsCON_FUN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:SepareteGroupsCON_FUN')
se = SepareteGroupsCON_FUN( ...
	SepareteGroupsCON_FUN.ID, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.ID), ...
	SepareteGroupsCON_FUN.LABEL, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.LABEL), ...
	SepareteGroupsCON_FUN.NOTES, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.NOTES), ...
	SepareteGroupsCON_FUN.WAITBAR, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.WAITBAR), ...
	SepareteGroupsCON_FUN.GR_CON_FUN_MP, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GR_CON_FUN_MP), ...
	SepareteGroupsCON_FUN.GRS, SepareteGroupsCON_FUN.getPropDefault(SepareteGroupsCON_FUN.GRS) ...
	);
warning('on', 'BRAPH2:SepareteGroupsCON_FUN')

for prop = 1:1:SepareteGroupsCON_FUN.getPropNumber()
	TAG = upper(SepareteGroupsCON_FUN.getPropTag(prop));
	switch SepareteGroupsCON_FUN.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(se.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(se.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(se.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(se.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				se.checkFormat(se.getPropFormat(prop), se.getr(prop),se.getPropSettings(prop)), ...
				[BRAPH2.STR ':SepareteGroupsCON_FUN:' BRAPH2.BUG_FUNC], ...
				['SepareteGroupsCON_FUN.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

