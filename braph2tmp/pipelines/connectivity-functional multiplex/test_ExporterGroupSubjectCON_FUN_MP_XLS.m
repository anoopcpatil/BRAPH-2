%TEST_EXPORTERGROUPSUBJECTCON_FUN_MP_XLS

%% Test 1.1: Instantiation - empty

ex = ExporterGroupSubjectCON_FUN_MP_XLS();

prop_number = ExporterGroupSubjectCON_FUN_MP_XLS.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ExporterGroupSubjectCON_FUN_MP_XLS.getPropTag(prop));
	assert( ...
		isa(ex.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
		['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(ex.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
		['ExporterGroupSubjectCON_FUN_MP_XLS.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ExporterGroupSubjectCON_FUN_MP_XLS.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')
ex = ExporterGroupSubjectCON_FUN_MP_XLS( ...
	ExporterGroupSubjectCON_FUN_MP_XLS.ID, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.ID), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.LABEL, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.LABEL), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.NOTES, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.NOTES), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.GR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.GR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.SAVE, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.SAVE) ...
	);
warning('on', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')

for prop = 1:1:ExporterGroupSubjectCON_FUN_MP_XLS.getPropNumber()
	TAG = upper(ExporterGroupSubjectCON_FUN_MP_XLS.getPropTag(prop));
	switch ExporterGroupSubjectCON_FUN_MP_XLS.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(ex.getr(prop), ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(ex.getr(TAG), ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ExporterGroupSubjectCON_FUN_MP_XLS.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(ex.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['Being a result, ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(ex.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['Being a result, ExporterGroupSubjectCON_FUN_MP_XLS.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ExporterGroupSubjectCON_FUN_MP_XLS.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')
ex_0 = ExporterGroupSubjectCON_FUN_MP_XLS( ...
	ExporterGroupSubjectCON_FUN_MP_XLS.ID, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.ID), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.LABEL, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.LABEL), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.NOTES, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.NOTES), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.GR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.GR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.SAVE, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.SAVE) ...
	);
warning('on', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')

ex_1 = ExporterGroupSubjectCON_FUN_MP_XLS( ...
	ExporterGroupSubjectCON_FUN_MP_XLS.ID, Callback('EL', ex_0, 'PROP', 1), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.LABEL, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.LABEL), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.NOTES, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.NOTES), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.GR, Callback('EL', ex_0, 'PROP', 5), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON, Callback('EL', ex_0, 'PROP', 6), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN, Callback('EL', ex_0, 'PROP', 7), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.SAVE, NoValue() ...
	);
	
prop_number = ExporterGroupSubjectCON_FUN_MP_XLS.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ExporterGroupSubjectCON_FUN_MP_XLS.getPropTag(prop));
	switch ExporterGroupSubjectCON_FUN_MP_XLS.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(ex_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(ex_1.get(prop), ex_0.get(prop)) && ~isa(ex_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(ex_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
ex_2 = ExporterGroupSubjectCON_FUN_MP_XLS( ...
	ExporterGroupSubjectCON_FUN_MP_XLS.ID, Callback('EL', ex_1, 'PROP', 1), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.LABEL, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.LABEL), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.NOTES, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.NOTES), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.GR, Callback('EL', ex_1, 'PROP', 5), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON, Callback('EL', ex_1, 'PROP', 6), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN, Callback('EL', ex_1, 'PROP', 7), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.SAVE, NoValue() ...
	);
	
prop_number = ExporterGroupSubjectCON_FUN_MP_XLS.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ExporterGroupSubjectCON_FUN_MP_XLS.getPropTag(prop));
	switch ExporterGroupSubjectCON_FUN_MP_XLS.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(ex_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(ex_2.get(prop), ex_0.get(prop)) && ~isa(ex_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(ex_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
ex_3 = ExporterGroupSubjectCON_FUN_MP_XLS( ...
	ExporterGroupSubjectCON_FUN_MP_XLS.ID, Callback('EL', ex_2, 'PROP', 1), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.LABEL, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.LABEL), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.NOTES, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.NOTES), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.GR, Callback('EL', ex_2, 'PROP', 5), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON, Callback('EL', ex_2, 'PROP', 6), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN, Callback('EL', ex_2, 'PROP', 7), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.SAVE, NoValue() ...
	);
	
prop_number = ExporterGroupSubjectCON_FUN_MP_XLS.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ExporterGroupSubjectCON_FUN_MP_XLS.getPropTag(prop));
	switch ExporterGroupSubjectCON_FUN_MP_XLS.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(ex_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(ex_3.get(prop), ex_0.get(prop)) && ~isa(ex_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(ex_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')
ex = ExporterGroupSubjectCON_FUN_MP_XLS( ...
	ExporterGroupSubjectCON_FUN_MP_XLS.ID, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.ID), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.LABEL, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.LABEL), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.NOTES, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.NOTES), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.GR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.GR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.SAVE, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.SAVE) ...
	);
warning('on', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')

prop_number = ExporterGroupSubjectCON_FUN_MP_XLS.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ExporterGroupSubjectCON_FUN_MP_XLS.getPropTag(prop));
	switch ExporterGroupSubjectCON_FUN_MP_XLS.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(ex.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(ex.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(ex.getPropSettings(prop))
				assert( ...
					ex.checkFormat(ex.getPropFormat(prop), ex.get(prop)), ...
					[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
					['ExporterGroupSubjectCON_FUN_MP_XLS.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					ex.checkFormat(ex.getPropFormat(prop), ex.get(prop), ex.getPropSettings(prop)), ...
					[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
					['ExporterGroupSubjectCON_FUN_MP_XLS.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')
ex = ExporterGroupSubjectCON_FUN_MP_XLS( ...
	ExporterGroupSubjectCON_FUN_MP_XLS.ID, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.ID), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.LABEL, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.LABEL), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.NOTES, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.NOTES), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.WAITBAR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.GR, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.GR), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_CON), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.DIRECTORY_FUN), ...
	ExporterGroupSubjectCON_FUN_MP_XLS.SAVE, ExporterGroupSubjectCON_FUN_MP_XLS.getPropDefault(ExporterGroupSubjectCON_FUN_MP_XLS.SAVE) ...
	);
warning('on', 'BRAPH2:ExporterGroupSubjectCON_FUN_MP_XLS')

for prop = 1:1:ExporterGroupSubjectCON_FUN_MP_XLS.getPropNumber()
	TAG = upper(ExporterGroupSubjectCON_FUN_MP_XLS.getPropTag(prop));
	switch ExporterGroupSubjectCON_FUN_MP_XLS.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(ex.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(ex.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(ex.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(ex.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				ex.checkFormat(ex.getPropFormat(prop), ex.getr(prop),ex.getPropSettings(prop)), ...
				[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_FUNC], ...
				['ExporterGroupSubjectCON_FUN_MP_XLS.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: export and import

br1 = BrainRegion( ...
    'ID', 'ISF', ...
    'LABEL', 'superiorfrontal', ...
    'NOTES', 'notes1', ...
    'X', -12.6, ...
    'Y', 22.9, ...
    'Z', 42.4 ...
    );
br2 = BrainRegion( ...
    'ID', 'lFP', ...
    'LABEL', 'frontalpole', ...
    'NOTES', 'notes2', ...
    'X', -8.6, ...
    'Y', 61.7, ...
    'Z', -8.7 ...
    );
br3 = BrainRegion( ...
    'ID', 'lRMF', ...
    'LABEL', 'rostralmiddlefrontal', ...
    'NOTES', 'notes3', ...
    'X', -31.3, ...
    'Y', 41.2, ...
    'Z', 16.5 ...
    );
br4 = BrainRegion( ...
    'ID', 'lCMF', ...
    'LABEL', 'caudalmiddlefrontal', ...
    'NOTES', 'notes4', ...
    'X', -34.6, ...
    'Y', 10.2, ...
    'Z', 42.8 ...
    );
br5 = BrainRegion( ...
    'ID', 'lPOB', ...
    'LABEL', 'parsorbitalis', ...
    'NOTES', 'notes5', ...
    'X', -41, ...
    'Y', 38.8, ...
    'Z', -11.1 ...
    );

ba = BrainAtlas( ...
    'ID', 'TestToSaveCoolID', ...
    'LABEL', 'Brain Atlas', ...
    'NOTES', 'Brain atlas notes', ...
    'BR_DICT', IndexedDictionary('IT_CLASS', 'BrainRegion', 'IT_KEY', 1, 'IT_LIST', {br1, br2, br3, br4, br5}) ...
    );
%con
sub1 = SubjectCON( ...
    'ID', 'SUB CON 1', ...
    'LABEL', 'Subject CON 1', ...
    'NOTES', 'Notes on subject CON 1', ...
    'BA', ba, ...
    'age', 75, ...
    'sex', 'female', ...
    'CON', rand(ba.get('BR_DICT').length()) ...
    );
sub2 = SubjectCON( ...
    'ID', 'SUB CON 2', ...
    'LABEL', 'Subject CON 2', ...
    'NOTES', 'Notes on subject CON 2', ...
    'BA', ba, ...
    'age', 70, ...
    'sex', 'male', ...
    'CON', rand(ba.get('BR_DICT').length()) ...
    );
sub3 = SubjectCON( ...
    'ID', 'SUB CON 3', ...
    'LABEL', 'Subject CON 3', ...
    'NOTES', 'Notes on subject CON 3', ...
    'BA', ba, ...
    'age', 50, ...
    'sex', 'female', ...
    'CON', rand(ba.get('BR_DICT').length()) ...
    );

gr_con = Group( ...
    'ID', 'GR CON', ...
    'LABEL', 'Group label', ...
    'NOTES', 'Group notes', ...
    'SUB_CLASS', 'SubjectCON', ...
    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectCON', 'IT_KEY', 1, 'IT_LIST', {sub1, sub2, sub3}) ...
    );

% fun
sub1_fun = SubjectFUN( ...
    'ID', 'SUB FUN 1', ...
    'LABEL', 'Subject FUN 1', ...
    'NOTES', 'Notes on subject FUN 1', ...
    'BA', ba, ...
    'age', 75, ...
    'sex', 'female', ...
    'FUN', rand(10, ba.get('BR_DICT').length()) ...
    );

sub2_fun = SubjectFUN( ...
    'ID', 'SUB FUN 2', ...
    'LABEL', 'Subject FUN 2', ...
    'NOTES', 'Notes on subject FUN 2', ...
    'BA', ba, ...
    'age', 70, ...
    'sex', 'male', ...
    'FUN', rand(10, ba.get('BR_DICT').length()) ...
    );
sub3_fun = SubjectFUN( ...
    'ID', 'SUB FUN 3', ...
    'LABEL', 'Subject FUN 3', ...
    'NOTES', 'Notes on subject FUN 3', ...
    'BA', ba, ...
    'age', 50, ...
    'sex', 'female', ...
    'FUN', rand(10, ba.get('BR_DICT').length()) ...
    );

gr_fun = Group( ...
    'ID', 'GR FUN', ...
    'LABEL', 'Group label', ...
    'NOTES', 'Group notes', ...
    'SUB_CLASS', 'SubjectFUN', ...
    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectFUN', 'IT_KEY', 1, 'IT_LIST', {sub1_fun, sub2_fun, sub3_fun}) ...
    );

% mix

co_gr1 = CombineGroups_CON_FUN( ...
    'GR1', gr_con, ...
    'GR2', gr_fun, ...
    'WAITBAR', true ...
    );


directory_con = [fileparts(which('test_braph2')) filesep 'trial_group_subjects_CON_to_be_erased'];
if ~exist(directory_con, 'dir')
    mkdir(directory_con)
end

directory_fun = [fileparts(which('test_braph2')) filesep 'trial_group_subjects_FUN_to_be_erased'];
if ~exist(directory_fun, 'dir')
    mkdir(directory_fun)
end

mixed_gr = co_gr1.get('GR');
ex = ExporterGroupSubjectCON_FUN_MP_XLS( ...
    'DIRECTORY_CON', directory_con, ...
    'DIRECTORY_FUN', directory_fun, ...
    'GR', mixed_gr ...
    );
ex.get('SAVE');

% import with same brain atlas
im1 = ImporterGroupSubjectCON_FUN_MP_XLS( ...
    'DIRECTORY_CON', directory_con, ...
    'DIRECTORY_FUN', directory_fun, ...
    'BA', ba ...
    );
gr_loaded1 = im1.get('GR');

assert(gr_con.get('SUB_DICT').length() == gr_loaded1.get('SUB_DICT').length(), ...
	[BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_IO], ...
    'Problems saving or loading a group.')
for i = 1:1:max(gr_con.get('SUB_DICT').length(), gr_loaded1.get('SUB_DICT').length())
    sub_con = gr_con.get('SUB_DICT').getItem(i);
    sub_fun = gr_fun.get('SUB_DICT').getItem(i);
    sub_loaded = gr_loaded1.get('SUB_DICT').getItem(i);   
    data_cell = sub_loaded.get('CON_FUN_MP');
    assert( ...        
        isequal(sub_con.get('BA'), sub_loaded.get('BA')) & ...
        isequal(sub_con.get('AGE'), sub_loaded.get('AGE')) & ...
        isequal(sub_con.get('SEX'), sub_loaded.get('SEX')) & ...
        isequal(round(sub_con.get('CON'), 10), round(data_cell{1}, 10)), ...
        isequal(round(sub_fun.get('FUN'), 10), round(data_cell{2}, 10)), ...
        [BRAPH2.STR ':ExporterGroupSubjectCON_FUN_MP_XLS:' BRAPH2.BUG_IO], ...
        'Problems saving or loading a group.')    
end
rmdir(directory_con, 's')
rmdir(directory_fun, 's')

