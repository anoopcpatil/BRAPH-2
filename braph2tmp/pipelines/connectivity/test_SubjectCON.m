%TEST_SUBJECTCON

%% Test 1.1: Instantiation - empty

sub = SubjectCON();

prop_number = SubjectCON.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SubjectCON.getPropTag(prop));
	assert( ...
		isa(sub.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
		['SubjectCON.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in SubjectCON.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(sub.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
		['SubjectCON.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in SubjectCON.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:SubjectCON')
sub = SubjectCON( ...
	SubjectCON.ID, SubjectCON.getPropDefault(SubjectCON.ID), ...
	SubjectCON.LABEL, SubjectCON.getPropDefault(SubjectCON.LABEL), ...
	SubjectCON.NOTES, SubjectCON.getPropDefault(SubjectCON.NOTES), ...
	SubjectCON.BA, SubjectCON.getPropDefault(SubjectCON.BA), ...
	SubjectCON.CON, SubjectCON.getPropDefault(SubjectCON.CON), ...
	SubjectCON.AGE, SubjectCON.getPropDefault(SubjectCON.AGE), ...
	SubjectCON.SEX, SubjectCON.getPropDefault(SubjectCON.SEX) ...
	);
warning('on', 'BRAPH2:SubjectCON')

for prop = 1:1:SubjectCON.getPropNumber()
	TAG = upper(SubjectCON.getPropTag(prop));
	switch SubjectCON.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(sub.getr(prop), SubjectCON.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by SubjectCON.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in SubjectCON.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(sub.getr(TAG), SubjectCON.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by SubjectCON.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in SubjectCON.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(sub.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['Being a result, SubjectCON.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in SubjectCON.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(sub.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['Being a result, SubjectCON.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in SubjectCON.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:SubjectCON')
sub_0 = SubjectCON( ...
	SubjectCON.ID, SubjectCON.getPropDefault(SubjectCON.ID), ...
	SubjectCON.LABEL, SubjectCON.getPropDefault(SubjectCON.LABEL), ...
	SubjectCON.NOTES, SubjectCON.getPropDefault(SubjectCON.NOTES), ...
	SubjectCON.BA, SubjectCON.getPropDefault(SubjectCON.BA), ...
	SubjectCON.CON, SubjectCON.getPropDefault(SubjectCON.CON), ...
	SubjectCON.AGE, SubjectCON.getPropDefault(SubjectCON.AGE), ...
	SubjectCON.SEX, SubjectCON.getPropDefault(SubjectCON.SEX) ...
	);
warning('on', 'BRAPH2:SubjectCON')

sub_1 = SubjectCON( ...
	SubjectCON.ID, Callback('EL', sub_0, 'PROP', 1), ...
	SubjectCON.LABEL, SubjectCON.getPropDefault(SubjectCON.LABEL), ...
	SubjectCON.NOTES, SubjectCON.getPropDefault(SubjectCON.NOTES), ...
	SubjectCON.BA, Callback('EL', sub_0, 'PROP', 4), ...
	SubjectCON.CON, Callback('EL', sub_0, 'PROP', 5), ...
	SubjectCON.AGE, Callback('EL', sub_0, 'PROP', 6), ...
	SubjectCON.SEX, Callback('EL', sub_0, 'PROP', 7) ...
	);
	
prop_number = SubjectCON.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SubjectCON.getPropTag(prop));
	switch SubjectCON.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(sub_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(sub_1.get(prop), sub_0.get(prop)) && ~isa(sub_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(sub_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
sub_2 = SubjectCON( ...
	SubjectCON.ID, Callback('EL', sub_1, 'PROP', 1), ...
	SubjectCON.LABEL, SubjectCON.getPropDefault(SubjectCON.LABEL), ...
	SubjectCON.NOTES, SubjectCON.getPropDefault(SubjectCON.NOTES), ...
	SubjectCON.BA, Callback('EL', sub_1, 'PROP', 4), ...
	SubjectCON.CON, Callback('EL', sub_1, 'PROP', 5), ...
	SubjectCON.AGE, Callback('EL', sub_1, 'PROP', 6), ...
	SubjectCON.SEX, Callback('EL', sub_1, 'PROP', 7) ...
	);
	
prop_number = SubjectCON.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SubjectCON.getPropTag(prop));
	switch SubjectCON.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(sub_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(sub_2.get(prop), sub_0.get(prop)) && ~isa(sub_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(sub_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
sub_3 = SubjectCON( ...
	SubjectCON.ID, Callback('EL', sub_2, 'PROP', 1), ...
	SubjectCON.LABEL, SubjectCON.getPropDefault(SubjectCON.LABEL), ...
	SubjectCON.NOTES, SubjectCON.getPropDefault(SubjectCON.NOTES), ...
	SubjectCON.BA, Callback('EL', sub_2, 'PROP', 4), ...
	SubjectCON.CON, Callback('EL', sub_2, 'PROP', 5), ...
	SubjectCON.AGE, Callback('EL', sub_2, 'PROP', 6), ...
	SubjectCON.SEX, Callback('EL', sub_2, 'PROP', 7) ...
	);
	
prop_number = SubjectCON.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SubjectCON.getPropTag(prop));
	switch SubjectCON.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(sub_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(sub_3.get(prop), sub_0.get(prop)) && ~isa(sub_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(sub_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:SubjectCON')
sub = SubjectCON( ...
	SubjectCON.ID, SubjectCON.getPropDefault(SubjectCON.ID), ...
	SubjectCON.LABEL, SubjectCON.getPropDefault(SubjectCON.LABEL), ...
	SubjectCON.NOTES, SubjectCON.getPropDefault(SubjectCON.NOTES), ...
	SubjectCON.BA, SubjectCON.getPropDefault(SubjectCON.BA), ...
	SubjectCON.CON, SubjectCON.getPropDefault(SubjectCON.CON), ...
	SubjectCON.AGE, SubjectCON.getPropDefault(SubjectCON.AGE), ...
	SubjectCON.SEX, SubjectCON.getPropDefault(SubjectCON.SEX) ...
	);
warning('on', 'BRAPH2:SubjectCON')

prop_number = SubjectCON.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SubjectCON.getPropTag(prop));
	switch SubjectCON.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(sub.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(sub.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(sub.getPropSettings(prop))
				assert( ...
					sub.checkFormat(sub.getPropFormat(prop), sub.get(prop)), ...
					[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
					['SubjectCON.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					sub.checkFormat(sub.getPropFormat(prop), sub.get(prop), sub.getPropSettings(prop)), ...
					[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
					['SubjectCON.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:SubjectCON')
sub = SubjectCON( ...
	SubjectCON.ID, SubjectCON.getPropDefault(SubjectCON.ID), ...
	SubjectCON.LABEL, SubjectCON.getPropDefault(SubjectCON.LABEL), ...
	SubjectCON.NOTES, SubjectCON.getPropDefault(SubjectCON.NOTES), ...
	SubjectCON.BA, SubjectCON.getPropDefault(SubjectCON.BA), ...
	SubjectCON.CON, SubjectCON.getPropDefault(SubjectCON.CON), ...
	SubjectCON.AGE, SubjectCON.getPropDefault(SubjectCON.AGE), ...
	SubjectCON.SEX, SubjectCON.getPropDefault(SubjectCON.SEX) ...
	);
warning('on', 'BRAPH2:SubjectCON')

for prop = 1:1:SubjectCON.getPropNumber()
	TAG = upper(SubjectCON.getPropTag(prop));
	switch SubjectCON.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(sub.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(sub.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(sub.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(sub.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				sub.checkFormat(sub.getPropFormat(prop), sub.getr(prop),sub.getPropSettings(prop)), ...
				[BRAPH2.STR ':SubjectCON:' BRAPH2.BUG_FUNC], ...
				['SubjectCON.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GUI

im_ba = ImporterBrainAtlasXLS('FILE', [fileparts(which('SubjectCON')) filesep 'example data CON (DTI)' filesep 'desikan_atlas.xlsx']);
ba = im_ba.get('BA');
im_gr = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('SubjectCON')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName1'], ...
    'BA', ba ...
    );
gr = im_gr.get('GR');
GUI('PE', gr, 'CLOSEREQ', false).draw()

close(gcf)

