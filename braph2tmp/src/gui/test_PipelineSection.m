%TEST_PIPELINESECTION

%% Test 1.1: Instantiation - empty

ps = PipelineSection();

prop_number = PipelineSection.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineSection.getPropTag(prop));
	assert( ...
		isa(ps.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
		['PipelineSection.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PipelineSection.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(ps.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
		['PipelineSection.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PipelineSection.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:PipelineSection')
ps = PipelineSection( ...
	PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
	PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
	PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
	PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
	);
warning('on', 'BRAPH2:PipelineSection')

for prop = 1:1:PipelineSection.getPropNumber()
	TAG = upper(PipelineSection.getPropTag(prop));
	switch PipelineSection.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(ps.getr(prop), PipelineSection.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by PipelineSection.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PipelineSection.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(ps.getr(TAG), PipelineSection.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by PipelineSection.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PipelineSection.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(ps.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['Being a result, PipelineSection.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PipelineSection.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(ps.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['Being a result, PipelineSection.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PipelineSection.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:PipelineSection')
ps_0 = PipelineSection( ...
	PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
	PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
	PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
	PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
	);
warning('on', 'BRAPH2:PipelineSection')

ps_1 = PipelineSection( ...
	PipelineSection.ID, Callback('EL', ps_0, 'PROP', 1), ...
	PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
	PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
	PipelineSection.PC_DICT, Callback('EL', ps_0, 'PROP', 4) ...
	);
	
prop_number = PipelineSection.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineSection.getPropTag(prop));
	switch PipelineSection.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(ps_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(ps_1.get(prop), ps_0.get(prop)) && ~isa(ps_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(ps_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
ps_2 = PipelineSection( ...
	PipelineSection.ID, Callback('EL', ps_1, 'PROP', 1), ...
	PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
	PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
	PipelineSection.PC_DICT, Callback('EL', ps_1, 'PROP', 4) ...
	);
	
prop_number = PipelineSection.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineSection.getPropTag(prop));
	switch PipelineSection.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(ps_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(ps_2.get(prop), ps_0.get(prop)) && ~isa(ps_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(ps_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
ps_3 = PipelineSection( ...
	PipelineSection.ID, Callback('EL', ps_2, 'PROP', 1), ...
	PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
	PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
	PipelineSection.PC_DICT, Callback('EL', ps_2, 'PROP', 4) ...
	);
	
prop_number = PipelineSection.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineSection.getPropTag(prop));
	switch PipelineSection.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(ps_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(ps_3.get(prop), ps_0.get(prop)) && ~isa(ps_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(ps_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:PipelineSection')
ps = PipelineSection( ...
	PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
	PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
	PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
	PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
	);
warning('on', 'BRAPH2:PipelineSection')

prop_number = PipelineSection.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineSection.getPropTag(prop));
	switch PipelineSection.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(ps.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(ps.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(ps.getPropSettings(prop))
				assert( ...
					ps.checkFormat(ps.getPropFormat(prop), ps.get(prop)), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
					['PipelineSection.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					ps.checkFormat(ps.getPropFormat(prop), ps.get(prop), ps.getPropSettings(prop)), ...
					[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
					['PipelineSection.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:PipelineSection')
ps = PipelineSection( ...
	PipelineSection.ID, PipelineSection.getPropDefault(PipelineSection.ID), ...
	PipelineSection.LABEL, PipelineSection.getPropDefault(PipelineSection.LABEL), ...
	PipelineSection.NOTES, PipelineSection.getPropDefault(PipelineSection.NOTES), ...
	PipelineSection.PC_DICT, PipelineSection.getPropDefault(PipelineSection.PC_DICT) ...
	);
warning('on', 'BRAPH2:PipelineSection')

for prop = 1:1:PipelineSection.getPropNumber()
	TAG = upper(PipelineSection.getPropTag(prop));
	switch PipelineSection.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(ps.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(ps.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(ps.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(ps.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				ps.checkFormat(ps.getPropFormat(prop), ps.getr(prop),ps.getPropSettings(prop)), ...
				[BRAPH2.STR ':PipelineSection:' BRAPH2.BUG_FUNC], ...
				['PipelineSection.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

