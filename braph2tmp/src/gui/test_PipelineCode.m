%TEST_PIPELINECODE

%% Test 1.1: Instantiation - empty

pc = PipelineCode();

prop_number = PipelineCode.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineCode.getPropTag(prop));
	assert( ...
		isa(pc.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
		['PipelineCode.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PipelineCode.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(pc.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
		['PipelineCode.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PipelineCode.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:PipelineCode')
pc = PipelineCode( ...
	PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
	PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
	PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
	PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
	PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
	PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
	PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
	PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
	);
warning('on', 'BRAPH2:PipelineCode')

for prop = 1:1:PipelineCode.getPropNumber()
	TAG = upper(PipelineCode.getPropTag(prop));
	switch PipelineCode.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(pc.getr(prop), PipelineCode.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by PipelineCode.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PipelineCode.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(pc.getr(TAG), PipelineCode.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by PipelineCode.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PipelineCode.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(pc.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['Being a result, PipelineCode.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PipelineCode.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(pc.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['Being a result, PipelineCode.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PipelineCode.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:PipelineCode')
pc_0 = PipelineCode( ...
	PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
	PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
	PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
	PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
	PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
	PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
	PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
	PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
	);
warning('on', 'BRAPH2:PipelineCode')

pc_1 = PipelineCode( ...
	PipelineCode.ID, Callback('EL', pc_0, 'PROP', 1), ...
	PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
	PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
	PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
	PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
	PipelineCode.MONIKER, Callback('EL', pc_0, 'PROP', 6), ...
	PipelineCode.CODE, Callback('EL', pc_0, 'PROP', 7), ...
	PipelineCode.EL, Callback('EL', pc_0, 'PROP', 8) ...
	);
	
prop_number = PipelineCode.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineCode.getPropTag(prop));
	switch PipelineCode.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pc_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pc_1.get(prop), pc_0.get(prop)) && ~isa(pc_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pc_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pc_2 = PipelineCode( ...
	PipelineCode.ID, Callback('EL', pc_1, 'PROP', 1), ...
	PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
	PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
	PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
	PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
	PipelineCode.MONIKER, Callback('EL', pc_1, 'PROP', 6), ...
	PipelineCode.CODE, Callback('EL', pc_1, 'PROP', 7), ...
	PipelineCode.EL, Callback('EL', pc_1, 'PROP', 8) ...
	);
	
prop_number = PipelineCode.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineCode.getPropTag(prop));
	switch PipelineCode.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pc_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pc_2.get(prop), pc_0.get(prop)) && ~isa(pc_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pc_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pc_3 = PipelineCode( ...
	PipelineCode.ID, Callback('EL', pc_2, 'PROP', 1), ...
	PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
	PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
	PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
	PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
	PipelineCode.MONIKER, Callback('EL', pc_2, 'PROP', 6), ...
	PipelineCode.CODE, Callback('EL', pc_2, 'PROP', 7), ...
	PipelineCode.EL, Callback('EL', pc_2, 'PROP', 8) ...
	);
	
prop_number = PipelineCode.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineCode.getPropTag(prop));
	switch PipelineCode.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pc_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pc_3.get(prop), pc_0.get(prop)) && ~isa(pc_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pc_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:PipelineCode')
pc = PipelineCode( ...
	PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
	PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
	PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
	PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
	PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
	PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
	PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
	PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
	);
warning('on', 'BRAPH2:PipelineCode')

prop_number = PipelineCode.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PipelineCode.getPropTag(prop));
	switch PipelineCode.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pc.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pc.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(pc.getPropSettings(prop))
				assert( ...
					pc.checkFormat(pc.getPropFormat(prop), pc.get(prop)), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
					['PipelineCode.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					pc.checkFormat(pc.getPropFormat(prop), pc.get(prop), pc.getPropSettings(prop)), ...
					[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
					['PipelineCode.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:PipelineCode')
pc = PipelineCode( ...
	PipelineCode.ID, PipelineCode.getPropDefault(PipelineCode.ID), ...
	PipelineCode.LABEL, PipelineCode.getPropDefault(PipelineCode.LABEL), ...
	PipelineCode.NOTES, PipelineCode.getPropDefault(PipelineCode.NOTES), ...
	PipelineCode.TEXT_BEFORE_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_BEFORE_EXEC), ...
	PipelineCode.TEXT_AFTER_EXEC, PipelineCode.getPropDefault(PipelineCode.TEXT_AFTER_EXEC), ...
	PipelineCode.MONIKER, PipelineCode.getPropDefault(PipelineCode.MONIKER), ...
	PipelineCode.CODE, PipelineCode.getPropDefault(PipelineCode.CODE), ...
	PipelineCode.EL, PipelineCode.getPropDefault(PipelineCode.EL) ...
	);
warning('on', 'BRAPH2:PipelineCode')

for prop = 1:1:PipelineCode.getPropNumber()
	TAG = upper(PipelineCode.getPropTag(prop));
	switch PipelineCode.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pc.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pc.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(pc.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(pc.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				pc.checkFormat(pc.getPropFormat(prop), pc.getr(prop),pc.getPropSettings(prop)), ...
				[BRAPH2.STR ':PipelineCode:' BRAPH2.BUG_FUNC], ...
				['PipelineCode.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Error with keyword moniker



