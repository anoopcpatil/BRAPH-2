%TEST_PLOT

%% Test 1.1: Instantiation - empty

pl = Plot();

prop_number = Plot.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Plot.getPropTag(prop));
	assert( ...
		isa(pl.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
		['Plot.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Plot.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(pl.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
		['Plot.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Plot.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Plot')
pl = Plot( ...
	Plot.ID, Plot.getPropDefault(Plot.ID), ...
	Plot.BKGCOLOR, Plot.getPropDefault(Plot.BKGCOLOR) ...
	);
warning('on', 'BRAPH2:Plot')

for prop = 1:1:Plot.getPropNumber()
	TAG = upper(Plot.getPropTag(prop));
	switch Plot.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(pl.getr(prop), Plot.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Plot.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Plot.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(pl.getr(TAG), Plot.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Plot.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Plot.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(pl.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Being a result, Plot.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Plot.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(pl.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Being a result, Plot.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Plot.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Plot')
pl_0 = Plot( ...
	Plot.ID, Plot.getPropDefault(Plot.ID), ...
	Plot.BKGCOLOR, Plot.getPropDefault(Plot.BKGCOLOR) ...
	);
warning('on', 'BRAPH2:Plot')

pl_1 = Plot( ...
	Plot.ID, Callback('EL', pl_0, 'PROP', 1), ...
	Plot.BKGCOLOR, Plot.getPropDefault(Plot.BKGCOLOR) ...
	);
	
prop_number = Plot.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Plot.getPropTag(prop));
	switch Plot.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pl_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pl_1.get(prop), pl_0.get(prop)) && ~isa(pl_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pl_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pl_2 = Plot( ...
	Plot.ID, Callback('EL', pl_1, 'PROP', 1), ...
	Plot.BKGCOLOR, Plot.getPropDefault(Plot.BKGCOLOR) ...
	);
	
prop_number = Plot.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Plot.getPropTag(prop));
	switch Plot.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pl_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pl_2.get(prop), pl_0.get(prop)) && ~isa(pl_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pl_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pl_3 = Plot( ...
	Plot.ID, Callback('EL', pl_2, 'PROP', 1), ...
	Plot.BKGCOLOR, Plot.getPropDefault(Plot.BKGCOLOR) ...
	);
	
prop_number = Plot.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Plot.getPropTag(prop));
	switch Plot.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pl_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pl_3.get(prop), pl_0.get(prop)) && ~isa(pl_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pl_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Plot')
pl = Plot( ...
	Plot.ID, Plot.getPropDefault(Plot.ID), ...
	Plot.BKGCOLOR, Plot.getPropDefault(Plot.BKGCOLOR) ...
	);
warning('on', 'BRAPH2:Plot')

prop_number = Plot.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Plot.getPropTag(prop));
	switch Plot.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pl.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pl.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(pl.getPropSettings(prop))
				assert( ...
					pl.checkFormat(pl.getPropFormat(prop), pl.get(prop)), ...
					[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
					['Plot.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					pl.checkFormat(pl.getPropFormat(prop), pl.get(prop), pl.getPropSettings(prop)), ...
					[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
					['Plot.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Plot')
pl = Plot( ...
	Plot.ID, Plot.getPropDefault(Plot.ID), ...
	Plot.BKGCOLOR, Plot.getPropDefault(Plot.BKGCOLOR) ...
	);
warning('on', 'BRAPH2:Plot')

for prop = 1:1:Plot.getPropNumber()
	TAG = upper(Plot.getPropTag(prop));
	switch Plot.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pl.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pl.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(pl.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(pl.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				pl.checkFormat(pl.getPropFormat(prop), pl.getr(prop),pl.getPropSettings(prop)), ...
				[BRAPH2.STR ':Plot:' BRAPH2.BUG_FUNC], ...
				['Plot.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Example

% figures occupying 4 quadrants of the screen
f_NW = figure( ...
    'Name', 'NW', ...
    'OuterPosition', [Plot.x0(0)+Plot.w(0)/4 Plot.h(0)/2 Plot.w(0)/4 Plot.h(0)/4] ...
    );
f_NE = figure( ...
    'Name', 'NE', ...
    'OuterPosition', [Plot.w(0)/2 Plot.h(0)/2 Plot.w(0)/4 Plot.h(0)/4] ...
    );
f_SW = figure( ...
    'Name', 'SW', ...
    'OuterPosition', [Plot.x0(0)+Plot.w(0)/4 Plot.y0(0)+Plot.h(0)/4 Plot.w(0)/4 Plot.h(0)/4] ...
    );
f_SE = figure( ...
    'Name', 'SE', ...
    'OuterPosition', [Plot.w(0)/2 Plot.y0(0)+Plot.h(0)/4 Plot.w(0)/4 Plot.h(0)/4] ...
    );

% panel in center of figure NW
pl_NW = Plot();
pl_NW.draw( ...
    'Parent', f_NW, ...
    'Units', 'normalized', ...
    'Position', [.25 .25 .50 .50], ...
    'BackgroundColor', [1 0 0] ...
    )
pl_NW.settings( ...
    'Color', [1 0 0] ...
    )

% panel in center of figure NE
% retrieving the panel and settings figure handles
pl_NE = Plot();
hp_NE = pl_NE.draw( ...
    'Parent', f_NE, ...
    'Units', 'normalized', ...
    'Position', [.25 .25 .50 .50], ...
    'BackgroundColor', [0 1 0] ...
    );
fs_NE = pl_NE.settings( ...
    'Color', [0 1 0], ...
    'Name', 'Renamed this settings figure', ...
    'Units', get(f_NE, 'Units'), ...
    'Position', [Plot.x0(f_NE) Plot.y0(f_NE) Plot.w(f_NE) Plot.h(f_NE)] ...
    );

% panel in center of figure SW
% note the misalignement of the settings figure
pl_SW = Plot();
pl_SW.draw( ...
    'Parent', f_SW, ...
    'Units', 'normalized', ...
    'Position', [.25 .25 .50 .50], ...
    'BackgroundColor', [0 0 1] ...
    );
pl_SW.settings( ...
    'Color', [0 0 1], ...
    'Position', [Plot.x0(f_SW, 'normalized')+Plot.w(f_SW, 'normalized')/4 Plot.y0(f_SW, 'normalized')+Plot.h(f_SW, 'normalized')/4 Plot.w(f_SW, 'normalized')/2 Plot.h(f_SW, 'normalized')/2] ...
    )

% panel in on top of figure SE
% note the alignement of the settings figure
pl_SE = Plot();
pl_SE.draw( ...
    'Parent', f_SE, ...
    'Units', 'normalized', ...
    'Position', [.25 .25 .50 .50], ...
    'BackgroundColor', 'w' ...
    );
pl_SE.settings( ...
    'Color', 'w', ...
    'OuterPosition', [Plot.x0(f_SE, 'normalized') Plot.y0(f_SE, 'normalized') Plot.w(f_SE, 'normalized') Plot.h(f_SE, 'normalized')] ...
    )

% close SE settings figure
pl_SE.cb_close_fs()

% bring to from NW settings figure
pl_NW.cb_bring_to_front()

% close SE
close(f_SW)

% replot SW inside NW settings figure
pl_SW.draw( ...
    'Parent', pl_NW.settings(), ...
    'BackgroundColor', [0 0 1] ...
    )
pl_SW.settings()

close(f_NW)
close(f_NE)
close(f_SE)

%% Test 6: Callbacks

pl = Plot();
pl.draw()

pl.settings()
pl.cb_close_fs()

pl.settings()
pl.cb_hide()
pl.cb_bring_to_front()

pl.settings()
pl.cb_close()

