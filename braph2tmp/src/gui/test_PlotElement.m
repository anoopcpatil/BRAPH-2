%TEST_PLOTELEMENT

%% Test 1.1: Instantiation - empty

pe = PlotElement();

prop_number = PlotElement.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotElement.getPropTag(prop));
	assert( ...
		isa(pe.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
		['PlotElement.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PlotElement.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(pe.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
		['PlotElement.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PlotElement.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:PlotElement')
pe = PlotElement( ...
	PlotElement.ID, PlotElement.getPropDefault(PlotElement.ID), ...
	PlotElement.BKGCOLOR, PlotElement.getPropDefault(PlotElement.BKGCOLOR), ...
	PlotElement.DW, PlotElement.getPropDefault(PlotElement.DW), ...
	PlotElement.DH, PlotElement.getPropDefault(PlotElement.DH), ...
	PlotElement.WSLIDER, PlotElement.getPropDefault(PlotElement.WSLIDER), ...
	PlotElement.MCOLOR, PlotElement.getPropDefault(PlotElement.MCOLOR), ...
	PlotElement.PCOLOR, PlotElement.getPropDefault(PlotElement.PCOLOR), ...
	PlotElement.DCOLOR, PlotElement.getPropDefault(PlotElement.DCOLOR), ...
	PlotElement.RCOLOR, PlotElement.getPropDefault(PlotElement.RCOLOR), ...
	PlotElement.FCOLOR, PlotElement.getPropDefault(PlotElement.FCOLOR), ...
	PlotElement.GCOLOR, PlotElement.getPropDefault(PlotElement.GCOLOR), ...
	PlotElement.EL, PlotElement.getPropDefault(PlotElement.EL), ...
	PlotElement.PR_DICT, PlotElement.getPropDefault(PlotElement.PR_DICT) ...
	);
warning('on', 'BRAPH2:PlotElement')

for prop = 1:1:PlotElement.getPropNumber()
	TAG = upper(PlotElement.getPropTag(prop));
	switch PlotElement.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(pe.getr(prop), PlotElement.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by PlotElement.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PlotElement.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(pe.getr(TAG), PlotElement.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by PlotElement.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PlotElement.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(pe.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['Being a result, PlotElement.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PlotElement.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(pe.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['Being a result, PlotElement.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PlotElement.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:PlotElement')
pe_0 = PlotElement( ...
	PlotElement.ID, PlotElement.getPropDefault(PlotElement.ID), ...
	PlotElement.BKGCOLOR, PlotElement.getPropDefault(PlotElement.BKGCOLOR), ...
	PlotElement.DW, PlotElement.getPropDefault(PlotElement.DW), ...
	PlotElement.DH, PlotElement.getPropDefault(PlotElement.DH), ...
	PlotElement.WSLIDER, PlotElement.getPropDefault(PlotElement.WSLIDER), ...
	PlotElement.MCOLOR, PlotElement.getPropDefault(PlotElement.MCOLOR), ...
	PlotElement.PCOLOR, PlotElement.getPropDefault(PlotElement.PCOLOR), ...
	PlotElement.DCOLOR, PlotElement.getPropDefault(PlotElement.DCOLOR), ...
	PlotElement.RCOLOR, PlotElement.getPropDefault(PlotElement.RCOLOR), ...
	PlotElement.FCOLOR, PlotElement.getPropDefault(PlotElement.FCOLOR), ...
	PlotElement.GCOLOR, PlotElement.getPropDefault(PlotElement.GCOLOR), ...
	PlotElement.EL, PlotElement.getPropDefault(PlotElement.EL), ...
	PlotElement.PR_DICT, PlotElement.getPropDefault(PlotElement.PR_DICT) ...
	);
warning('on', 'BRAPH2:PlotElement')

pe_1 = PlotElement( ...
	PlotElement.ID, Callback('EL', pe_0, 'PROP', 1), ...
	PlotElement.BKGCOLOR, PlotElement.getPropDefault(PlotElement.BKGCOLOR), ...
	PlotElement.DW, PlotElement.getPropDefault(PlotElement.DW), ...
	PlotElement.DH, PlotElement.getPropDefault(PlotElement.DH), ...
	PlotElement.WSLIDER, PlotElement.getPropDefault(PlotElement.WSLIDER), ...
	PlotElement.MCOLOR, PlotElement.getPropDefault(PlotElement.MCOLOR), ...
	PlotElement.PCOLOR, PlotElement.getPropDefault(PlotElement.PCOLOR), ...
	PlotElement.DCOLOR, PlotElement.getPropDefault(PlotElement.DCOLOR), ...
	PlotElement.RCOLOR, PlotElement.getPropDefault(PlotElement.RCOLOR), ...
	PlotElement.FCOLOR, PlotElement.getPropDefault(PlotElement.FCOLOR), ...
	PlotElement.GCOLOR, PlotElement.getPropDefault(PlotElement.GCOLOR), ...
	PlotElement.EL, PlotElement.getPropDefault(PlotElement.EL), ...
	PlotElement.PR_DICT, NoValue() ...
	);
	
prop_number = PlotElement.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotElement.getPropTag(prop));
	switch PlotElement.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pe_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pe_1.get(prop), pe_0.get(prop)) && ~isa(pe_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pe_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pe_2 = PlotElement( ...
	PlotElement.ID, Callback('EL', pe_1, 'PROP', 1), ...
	PlotElement.BKGCOLOR, PlotElement.getPropDefault(PlotElement.BKGCOLOR), ...
	PlotElement.DW, PlotElement.getPropDefault(PlotElement.DW), ...
	PlotElement.DH, PlotElement.getPropDefault(PlotElement.DH), ...
	PlotElement.WSLIDER, PlotElement.getPropDefault(PlotElement.WSLIDER), ...
	PlotElement.MCOLOR, PlotElement.getPropDefault(PlotElement.MCOLOR), ...
	PlotElement.PCOLOR, PlotElement.getPropDefault(PlotElement.PCOLOR), ...
	PlotElement.DCOLOR, PlotElement.getPropDefault(PlotElement.DCOLOR), ...
	PlotElement.RCOLOR, PlotElement.getPropDefault(PlotElement.RCOLOR), ...
	PlotElement.FCOLOR, PlotElement.getPropDefault(PlotElement.FCOLOR), ...
	PlotElement.GCOLOR, PlotElement.getPropDefault(PlotElement.GCOLOR), ...
	PlotElement.EL, PlotElement.getPropDefault(PlotElement.EL), ...
	PlotElement.PR_DICT, NoValue() ...
	);
	
prop_number = PlotElement.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotElement.getPropTag(prop));
	switch PlotElement.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pe_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pe_2.get(prop), pe_0.get(prop)) && ~isa(pe_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pe_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pe_3 = PlotElement( ...
	PlotElement.ID, Callback('EL', pe_2, 'PROP', 1), ...
	PlotElement.BKGCOLOR, PlotElement.getPropDefault(PlotElement.BKGCOLOR), ...
	PlotElement.DW, PlotElement.getPropDefault(PlotElement.DW), ...
	PlotElement.DH, PlotElement.getPropDefault(PlotElement.DH), ...
	PlotElement.WSLIDER, PlotElement.getPropDefault(PlotElement.WSLIDER), ...
	PlotElement.MCOLOR, PlotElement.getPropDefault(PlotElement.MCOLOR), ...
	PlotElement.PCOLOR, PlotElement.getPropDefault(PlotElement.PCOLOR), ...
	PlotElement.DCOLOR, PlotElement.getPropDefault(PlotElement.DCOLOR), ...
	PlotElement.RCOLOR, PlotElement.getPropDefault(PlotElement.RCOLOR), ...
	PlotElement.FCOLOR, PlotElement.getPropDefault(PlotElement.FCOLOR), ...
	PlotElement.GCOLOR, PlotElement.getPropDefault(PlotElement.GCOLOR), ...
	PlotElement.EL, PlotElement.getPropDefault(PlotElement.EL), ...
	PlotElement.PR_DICT, NoValue() ...
	);
	
prop_number = PlotElement.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotElement.getPropTag(prop));
	switch PlotElement.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pe_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pe_3.get(prop), pe_0.get(prop)) && ~isa(pe_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pe_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:PlotElement')
pe = PlotElement( ...
	PlotElement.ID, PlotElement.getPropDefault(PlotElement.ID), ...
	PlotElement.BKGCOLOR, PlotElement.getPropDefault(PlotElement.BKGCOLOR), ...
	PlotElement.DW, PlotElement.getPropDefault(PlotElement.DW), ...
	PlotElement.DH, PlotElement.getPropDefault(PlotElement.DH), ...
	PlotElement.WSLIDER, PlotElement.getPropDefault(PlotElement.WSLIDER), ...
	PlotElement.MCOLOR, PlotElement.getPropDefault(PlotElement.MCOLOR), ...
	PlotElement.PCOLOR, PlotElement.getPropDefault(PlotElement.PCOLOR), ...
	PlotElement.DCOLOR, PlotElement.getPropDefault(PlotElement.DCOLOR), ...
	PlotElement.RCOLOR, PlotElement.getPropDefault(PlotElement.RCOLOR), ...
	PlotElement.FCOLOR, PlotElement.getPropDefault(PlotElement.FCOLOR), ...
	PlotElement.GCOLOR, PlotElement.getPropDefault(PlotElement.GCOLOR), ...
	PlotElement.EL, PlotElement.getPropDefault(PlotElement.EL), ...
	PlotElement.PR_DICT, PlotElement.getPropDefault(PlotElement.PR_DICT) ...
	);
warning('on', 'BRAPH2:PlotElement')

prop_number = PlotElement.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotElement.getPropTag(prop));
	switch PlotElement.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pe.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pe.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(pe.getPropSettings(prop))
				assert( ...
					pe.checkFormat(pe.getPropFormat(prop), pe.get(prop)), ...
					[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
					['PlotElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					pe.checkFormat(pe.getPropFormat(prop), pe.get(prop), pe.getPropSettings(prop)), ...
					[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
					['PlotElement.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:PlotElement')
pe = PlotElement( ...
	PlotElement.ID, PlotElement.getPropDefault(PlotElement.ID), ...
	PlotElement.BKGCOLOR, PlotElement.getPropDefault(PlotElement.BKGCOLOR), ...
	PlotElement.DW, PlotElement.getPropDefault(PlotElement.DW), ...
	PlotElement.DH, PlotElement.getPropDefault(PlotElement.DH), ...
	PlotElement.WSLIDER, PlotElement.getPropDefault(PlotElement.WSLIDER), ...
	PlotElement.MCOLOR, PlotElement.getPropDefault(PlotElement.MCOLOR), ...
	PlotElement.PCOLOR, PlotElement.getPropDefault(PlotElement.PCOLOR), ...
	PlotElement.DCOLOR, PlotElement.getPropDefault(PlotElement.DCOLOR), ...
	PlotElement.RCOLOR, PlotElement.getPropDefault(PlotElement.RCOLOR), ...
	PlotElement.FCOLOR, PlotElement.getPropDefault(PlotElement.FCOLOR), ...
	PlotElement.GCOLOR, PlotElement.getPropDefault(PlotElement.GCOLOR), ...
	PlotElement.EL, PlotElement.getPropDefault(PlotElement.EL), ...
	PlotElement.PR_DICT, PlotElement.getPropDefault(PlotElement.PR_DICT) ...
	);
warning('on', 'BRAPH2:PlotElement')

for prop = 1:1:PlotElement.getPropNumber()
	TAG = upper(PlotElement.getPropTag(prop));
	switch PlotElement.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pe.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pe.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(pe.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(pe.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				pe.checkFormat(pe.getPropFormat(prop), pe.getr(prop),pe.getPropSettings(prop)), ...
				[BRAPH2.STR ':PlotElement:' BRAPH2.BUG_FUNC], ...
				['PlotElement.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Example

fig = figure();

et = ETA( ...
    'PROP_STRING_M', 'mmm', ...
    'PROP_STRING_P', 'ppp', ...
    'PROP_STRING_D', 'ddd', ...
    'PROP_LOGICAL_M', true, ...
    'PROP_LOGICAL_P', false, ...
    'PROP_LOGICAL_D', false, ...
    'PROP_OPTION_M', 'two', ... 
    'PROP_OPTION_P', 'three', ...
    'PROP_OPTION_D', '', ...
    'PROP_CLASS_M', 'ETA', ...
    'PROP_CLASS_P', 'ETA', ...
    'PROP_CLASS_D', 'PlotElement', ...
    'PROP_CLASSLIST_M', {'ETA'}, ...
    'PROP_CLASSLIST_P', {'Element', 'ETA', 'PlotElement'}, ...
    'PROP_CLASSLIST_D', {}, ...
    'PROP_ITEM_M', ETA('PROP_STRING_M', 'ETA trial'), ...
    'PROP_ITEM_P', ETB('ID', 'BR trial 2'), ...
    'PROP_ITEM_D', ETB('ID', 'BR trial 3'), ...
    'PROP_ITEMLIST_M', {ETA('PROP_STRING_M', 'ETA trial 1'), ETA('PROP_STRING_M', 'ETA trial 2'), ETA('PROP_STRING_M', 'ETA trial 3')}, ...
    'PROP_ITEMLIST_P', {ETB('ID', 'BR trial 1'), ETB('ID', 'BR trial 2'), ETB('ID', 'BR trial 3')}, ...
    'PROP_ITEMLIST_D', {}, ...
    'PROP_IDICT_M', IndexedDictionary('IT_CLASS', 'ETA', 'IT_KEY', 34), ...
    'PROP_IDICT_P', IndexedDictionary('IT_CLASS', 'ETB', 'IT_LIST', {ETB('ID', 'BR trial A'), ETB('ID', 'BR trial B'), ETB('ID', 'BR trial C')}), ...
    'PROP_IDICT_D', IndexedDictionary(), ...
    'PROP_SCALAR_M', 1, ...
    'PROP_SCALAR_P', 3, ...
    'PROP_SCALAR_D', 10, ...
    'PROP_RVECTOR_M', ones(1, 10), ...
    'PROP_RVECTOR_P', zeros(1, 10), ...
    'PROP_RVECTOR_D', rand(1, 10), ...
    'PROP_CVECTOR_M', ones(10, 1), ...
    'PROP_CVECTOR_P', zeros(10, 1), ...
    'PROP_CVECTOR_D', rand(10, 1), ...
    'PROP_MATRIX_M', zeros(8,10), ...
    'PROP_MATRIX_P', randn(10), ...
    'PROP_MATRIX_D', rand(12), ...
    'PROP_SMATRIX_M', eye(4), ...
    'PROP_SMATRIX_P', randn(3), ...
    'PROP_SMATRIX_D', rand(5), ...
    'PROP_CELL_M', {randn(4), randn(4), randn(4); randn(4), randn(4), randn(4); randn(4), randn(4), randn(4)}, ...
    'PROP_CELL_P', {eye(10)}, ...
    'PROP_CELL_D', {randn(2), randn(2); randn(2), randn(2)} ...
    );

pe = PlotElement('EL', et);
pe.draw()

close(fig)

%% Test 6: Callbacks

pe = PlotElement('EL', ETA());
pe.draw()
pe.cb_hide()
pe.cb_bring_to_front()
pe.cb_close()

