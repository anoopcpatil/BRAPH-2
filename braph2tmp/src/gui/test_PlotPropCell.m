%TEST_PLOTPROPCELL

%% Test 1.1: Instantiation - empty

pr = PlotPropCell();

prop_number = PlotPropCell.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotPropCell.getPropTag(prop));
	assert( ...
		isa(pr.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
		['PlotPropCell.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PlotPropCell.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(pr.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
		['PlotPropCell.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PlotPropCell.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:PlotPropCell')
pr = PlotPropCell( ...
	PlotPropCell.ID, PlotPropCell.getPropDefault(PlotPropCell.ID), ...
	PlotPropCell.BKGCOLOR, PlotPropCell.getPropDefault(PlotPropCell.BKGCOLOR), ...
	PlotPropCell.EL, PlotPropCell.getPropDefault(PlotPropCell.EL), ...
	PlotPropCell.PROP, PlotPropCell.getPropDefault(PlotPropCell.PROP), ...
	PlotPropCell.TITLE, PlotPropCell.getPropDefault(PlotPropCell.TITLE), ...
	PlotPropCell.ENABLE, PlotPropCell.getPropDefault(PlotPropCell.ENABLE), ...
	PlotPropCell.WAITBAR, PlotPropCell.getPropDefault(PlotPropCell.WAITBAR) ...
	);
warning('on', 'BRAPH2:PlotPropCell')

for prop = 1:1:PlotPropCell.getPropNumber()
	TAG = upper(PlotPropCell.getPropTag(prop));
	switch PlotPropCell.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(pr.getr(prop), PlotPropCell.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by PlotPropCell.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PlotPropCell.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(pr.getr(TAG), PlotPropCell.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by PlotPropCell.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PlotPropCell.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(pr.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['Being a result, PlotPropCell.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PlotPropCell.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(pr.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['Being a result, PlotPropCell.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PlotPropCell.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:PlotPropCell')
pr_0 = PlotPropCell( ...
	PlotPropCell.ID, PlotPropCell.getPropDefault(PlotPropCell.ID), ...
	PlotPropCell.BKGCOLOR, PlotPropCell.getPropDefault(PlotPropCell.BKGCOLOR), ...
	PlotPropCell.EL, PlotPropCell.getPropDefault(PlotPropCell.EL), ...
	PlotPropCell.PROP, PlotPropCell.getPropDefault(PlotPropCell.PROP), ...
	PlotPropCell.TITLE, PlotPropCell.getPropDefault(PlotPropCell.TITLE), ...
	PlotPropCell.ENABLE, PlotPropCell.getPropDefault(PlotPropCell.ENABLE), ...
	PlotPropCell.WAITBAR, PlotPropCell.getPropDefault(PlotPropCell.WAITBAR) ...
	);
warning('on', 'BRAPH2:PlotPropCell')

pr_1 = PlotPropCell( ...
	PlotPropCell.ID, Callback('EL', pr_0, 'PROP', 1), ...
	PlotPropCell.BKGCOLOR, PlotPropCell.getPropDefault(PlotPropCell.BKGCOLOR), ...
	PlotPropCell.EL, PlotPropCell.getPropDefault(PlotPropCell.EL), ...
	PlotPropCell.PROP, Callback('EL', pr_0, 'PROP', 4), ...
	PlotPropCell.TITLE, PlotPropCell.getPropDefault(PlotPropCell.TITLE), ...
	PlotPropCell.ENABLE, PlotPropCell.getPropDefault(PlotPropCell.ENABLE), ...
	PlotPropCell.WAITBAR, PlotPropCell.getPropDefault(PlotPropCell.WAITBAR) ...
	);
	
prop_number = PlotPropCell.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotPropCell.getPropTag(prop));
	switch PlotPropCell.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pr_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pr_1.get(prop), pr_0.get(prop)) && ~isa(pr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pr_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pr_2 = PlotPropCell( ...
	PlotPropCell.ID, Callback('EL', pr_1, 'PROP', 1), ...
	PlotPropCell.BKGCOLOR, PlotPropCell.getPropDefault(PlotPropCell.BKGCOLOR), ...
	PlotPropCell.EL, PlotPropCell.getPropDefault(PlotPropCell.EL), ...
	PlotPropCell.PROP, Callback('EL', pr_1, 'PROP', 4), ...
	PlotPropCell.TITLE, PlotPropCell.getPropDefault(PlotPropCell.TITLE), ...
	PlotPropCell.ENABLE, PlotPropCell.getPropDefault(PlotPropCell.ENABLE), ...
	PlotPropCell.WAITBAR, PlotPropCell.getPropDefault(PlotPropCell.WAITBAR) ...
	);
	
prop_number = PlotPropCell.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotPropCell.getPropTag(prop));
	switch PlotPropCell.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pr_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pr_2.get(prop), pr_0.get(prop)) && ~isa(pr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pr_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pr_3 = PlotPropCell( ...
	PlotPropCell.ID, Callback('EL', pr_2, 'PROP', 1), ...
	PlotPropCell.BKGCOLOR, PlotPropCell.getPropDefault(PlotPropCell.BKGCOLOR), ...
	PlotPropCell.EL, PlotPropCell.getPropDefault(PlotPropCell.EL), ...
	PlotPropCell.PROP, Callback('EL', pr_2, 'PROP', 4), ...
	PlotPropCell.TITLE, PlotPropCell.getPropDefault(PlotPropCell.TITLE), ...
	PlotPropCell.ENABLE, PlotPropCell.getPropDefault(PlotPropCell.ENABLE), ...
	PlotPropCell.WAITBAR, PlotPropCell.getPropDefault(PlotPropCell.WAITBAR) ...
	);
	
prop_number = PlotPropCell.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotPropCell.getPropTag(prop));
	switch PlotPropCell.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pr_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pr_3.get(prop), pr_0.get(prop)) && ~isa(pr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pr_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:PlotPropCell')
pr = PlotPropCell( ...
	PlotPropCell.ID, PlotPropCell.getPropDefault(PlotPropCell.ID), ...
	PlotPropCell.BKGCOLOR, PlotPropCell.getPropDefault(PlotPropCell.BKGCOLOR), ...
	PlotPropCell.EL, PlotPropCell.getPropDefault(PlotPropCell.EL), ...
	PlotPropCell.PROP, PlotPropCell.getPropDefault(PlotPropCell.PROP), ...
	PlotPropCell.TITLE, PlotPropCell.getPropDefault(PlotPropCell.TITLE), ...
	PlotPropCell.ENABLE, PlotPropCell.getPropDefault(PlotPropCell.ENABLE), ...
	PlotPropCell.WAITBAR, PlotPropCell.getPropDefault(PlotPropCell.WAITBAR) ...
	);
warning('on', 'BRAPH2:PlotPropCell')

prop_number = PlotPropCell.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PlotPropCell.getPropTag(prop));
	switch PlotPropCell.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(pr.getPropSettings(prop))
				assert( ...
					pr.checkFormat(pr.getPropFormat(prop), pr.get(prop)), ...
					[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
					['PlotPropCell.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					pr.checkFormat(pr.getPropFormat(prop), pr.get(prop), pr.getPropSettings(prop)), ...
					[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
					['PlotPropCell.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:PlotPropCell')
pr = PlotPropCell( ...
	PlotPropCell.ID, PlotPropCell.getPropDefault(PlotPropCell.ID), ...
	PlotPropCell.BKGCOLOR, PlotPropCell.getPropDefault(PlotPropCell.BKGCOLOR), ...
	PlotPropCell.EL, PlotPropCell.getPropDefault(PlotPropCell.EL), ...
	PlotPropCell.PROP, PlotPropCell.getPropDefault(PlotPropCell.PROP), ...
	PlotPropCell.TITLE, PlotPropCell.getPropDefault(PlotPropCell.TITLE), ...
	PlotPropCell.ENABLE, PlotPropCell.getPropDefault(PlotPropCell.ENABLE), ...
	PlotPropCell.WAITBAR, PlotPropCell.getPropDefault(PlotPropCell.WAITBAR) ...
	);
warning('on', 'BRAPH2:PlotPropCell')

for prop = 1:1:PlotPropCell.getPropNumber()
	TAG = upper(PlotPropCell.getPropTag(prop));
	switch PlotPropCell.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(pr.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(pr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				pr.checkFormat(pr.getPropFormat(prop), pr.getr(prop),pr.getPropSettings(prop)), ...
				[BRAPH2.STR ':PlotPropCell:' BRAPH2.BUG_FUNC], ...
				['PlotPropCell.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Example

% draws PlotPropCell and calls update() and redraw()
% note that it doesn't work for category RESULT 
% because it needs to be used with PlotElement() and GUI()
figure('Units', 'normalized', 'Position', [0 .5 1 .5])
et = ETA( ...
    'PROP_CELL_M', {rand(10) eye(10); eye(10) rand(10)}, ...
    'PROP_CELL_P', {3.14 eye(2) rand(3)}, ...
    'PROP_CELL_D', rand(3) ... % note that this works only because of the conditioning (otherwise not a valid cell input)
    );
props = [et.PROP_CELL_M et.PROP_CELL_P et.PROP_CELL_D et.PROP_CELL_R et.PROP_CELL_R_CALC];
for i = 1:1:length(props)
    pr{i} = PlotPropCell('EL', et, 'PROP', props(i));
    pr{i}.draw('BackgroundColor', [i/length(props) .5 (length(props)-i)/length(props)])
    pr{i}.update()
    pr{i}.redraw('X0', (i-1)/length(props) * Plot.w(gcf, 'characters'), ...
        'Width', 1/length(props) * Plot.w(gcf, 'characters'), ...
        'DHeight', 25)
end
close(gcf)

% minimal working version for category RESULT
figure()
p = uipanel('Parent', gcf); % needed for the function refresh that is called when the result is calculated
set(gcf, 'SizeChangedFcn', 'pr_res.update(); pr_res.redraw();') % callback to update panel when figure is resized (in refresh)
et = ETA();
pr_res = PlotPropCell('EL', et, 'PROP', et.PROP_CELL_R_CALC);
pr_res.draw('Parent', p, 'BackgroundColor', [.8 .5 .2])
pr_res.update()
pr_res.redraw()
close(gcf)

