%TEST_PIPELINE

%% Test 1.1: Instantiation - empty

pip = Pipeline();

prop_number = Pipeline.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Pipeline.getPropTag(prop));
	assert( ...
		isa(pip.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
		['Pipeline.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Pipeline.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(pip.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
		['Pipeline.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Pipeline.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Pipeline')
pip = Pipeline( ...
	Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
	Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
	Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
	Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
	);
warning('on', 'BRAPH2:Pipeline')

for prop = 1:1:Pipeline.getPropNumber()
	TAG = upper(Pipeline.getPropTag(prop));
	switch Pipeline.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(pip.getr(prop), Pipeline.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Pipeline.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Pipeline.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(pip.getr(TAG), Pipeline.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Pipeline.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Pipeline.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(pip.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Being a result, Pipeline.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Pipeline.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(pip.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Being a result, Pipeline.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Pipeline.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Pipeline')
pip_0 = Pipeline( ...
	Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
	Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
	Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
	Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
	);
warning('on', 'BRAPH2:Pipeline')

pip_1 = Pipeline( ...
	Pipeline.ID, Callback('EL', pip_0, 'PROP', 1), ...
	Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
	Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
	Pipeline.PS_DICT, Callback('EL', pip_0, 'PROP', 4) ...
	);
	
prop_number = Pipeline.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Pipeline.getPropTag(prop));
	switch Pipeline.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pip_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pip_1.get(prop), pip_0.get(prop)) && ~isa(pip_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pip_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pip_2 = Pipeline( ...
	Pipeline.ID, Callback('EL', pip_1, 'PROP', 1), ...
	Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
	Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
	Pipeline.PS_DICT, Callback('EL', pip_1, 'PROP', 4) ...
	);
	
prop_number = Pipeline.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Pipeline.getPropTag(prop));
	switch Pipeline.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pip_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pip_2.get(prop), pip_0.get(prop)) && ~isa(pip_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pip_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pip_3 = Pipeline( ...
	Pipeline.ID, Callback('EL', pip_2, 'PROP', 1), ...
	Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
	Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
	Pipeline.PS_DICT, Callback('EL', pip_2, 'PROP', 4) ...
	);
	
prop_number = Pipeline.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Pipeline.getPropTag(prop));
	switch Pipeline.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pip_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pip_3.get(prop), pip_0.get(prop)) && ~isa(pip_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pip_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Pipeline')
pip = Pipeline( ...
	Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
	Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
	Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
	Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
	);
warning('on', 'BRAPH2:Pipeline')

prop_number = Pipeline.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Pipeline.getPropTag(prop));
	switch Pipeline.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pip.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pip.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(pip.getPropSettings(prop))
				assert( ...
					pip.checkFormat(pip.getPropFormat(prop), pip.get(prop)), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
					['Pipeline.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					pip.checkFormat(pip.getPropFormat(prop), pip.get(prop), pip.getPropSettings(prop)), ...
					[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
					['Pipeline.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Pipeline')
pip = Pipeline( ...
	Pipeline.ID, Pipeline.getPropDefault(Pipeline.ID), ...
	Pipeline.LABEL, Pipeline.getPropDefault(Pipeline.LABEL), ...
	Pipeline.NOTES, Pipeline.getPropDefault(Pipeline.NOTES), ...
	Pipeline.PS_DICT, Pipeline.getPropDefault(Pipeline.PS_DICT) ...
	);
warning('on', 'BRAPH2:Pipeline')

for prop = 1:1:Pipeline.getPropNumber()
	TAG = upper(Pipeline.getPropTag(prop));
	switch Pipeline.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pip.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pip.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(pip.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(pip.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				pip.checkFormat(pip.getPropFormat(prop), pip.getr(prop),pip.getPropSettings(prop)), ...
				[BRAPH2.STR ':Pipeline:' BRAPH2.BUG_FUNC], ...
				['Pipeline.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

