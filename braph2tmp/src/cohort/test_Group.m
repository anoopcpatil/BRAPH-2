%TEST_GROUP

%% Test 1.1: Instantiation - empty

gr = Group();

prop_number = Group.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Group.getPropTag(prop));
	assert( ...
		isa(gr.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
		['Group.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Group.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(gr.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
		['Group.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Group.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Group')
gr = Group( ...
	Group.ID, Group.getPropDefault(Group.ID), ...
	Group.LABEL, Group.getPropDefault(Group.LABEL), ...
	Group.NOTES, Group.getPropDefault(Group.NOTES), ...
	Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
	Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT) ...
	);
warning('on', 'BRAPH2:Group')

for prop = 1:1:Group.getPropNumber()
	TAG = upper(Group.getPropTag(prop));
	switch Group.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(gr.getr(prop), Group.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Group.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Group.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(gr.getr(TAG), Group.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Group.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Group.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(gr.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Being a result, Group.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Group.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(gr.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Being a result, Group.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Group.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Group')
gr_0 = Group( ...
	Group.ID, Group.getPropDefault(Group.ID), ...
	Group.LABEL, Group.getPropDefault(Group.LABEL), ...
	Group.NOTES, Group.getPropDefault(Group.NOTES), ...
	Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
	Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT) ...
	);
warning('on', 'BRAPH2:Group')

gr_1 = Group( ...
	Group.ID, Callback('EL', gr_0, 'PROP', 1), ...
	Group.LABEL, Group.getPropDefault(Group.LABEL), ...
	Group.NOTES, Group.getPropDefault(Group.NOTES), ...
	Group.SUB_CLASS, Callback('EL', gr_0, 'PROP', 4), ...
	Group.SUB_DICT, Callback('EL', gr_0, 'PROP', 5) ...
	);
	
prop_number = Group.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Group.getPropTag(prop));
	switch Group.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(gr_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(gr_1.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(gr_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
gr_2 = Group( ...
	Group.ID, Callback('EL', gr_1, 'PROP', 1), ...
	Group.LABEL, Group.getPropDefault(Group.LABEL), ...
	Group.NOTES, Group.getPropDefault(Group.NOTES), ...
	Group.SUB_CLASS, Callback('EL', gr_1, 'PROP', 4), ...
	Group.SUB_DICT, Callback('EL', gr_1, 'PROP', 5) ...
	);
	
prop_number = Group.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Group.getPropTag(prop));
	switch Group.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(gr_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(gr_2.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(gr_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
gr_3 = Group( ...
	Group.ID, Callback('EL', gr_2, 'PROP', 1), ...
	Group.LABEL, Group.getPropDefault(Group.LABEL), ...
	Group.NOTES, Group.getPropDefault(Group.NOTES), ...
	Group.SUB_CLASS, Callback('EL', gr_2, 'PROP', 4), ...
	Group.SUB_DICT, Callback('EL', gr_2, 'PROP', 5) ...
	);
	
prop_number = Group.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Group.getPropTag(prop));
	switch Group.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(gr_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(gr_3.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(gr_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Group')
gr = Group( ...
	Group.ID, Group.getPropDefault(Group.ID), ...
	Group.LABEL, Group.getPropDefault(Group.LABEL), ...
	Group.NOTES, Group.getPropDefault(Group.NOTES), ...
	Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
	Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT) ...
	);
warning('on', 'BRAPH2:Group')

prop_number = Group.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Group.getPropTag(prop));
	switch Group.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(gr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(gr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(gr.getPropSettings(prop))
				assert( ...
					gr.checkFormat(gr.getPropFormat(prop), gr.get(prop)), ...
					[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
					['Group.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					gr.checkFormat(gr.getPropFormat(prop), gr.get(prop), gr.getPropSettings(prop)), ...
					[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
					['Group.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Group')
gr = Group( ...
	Group.ID, Group.getPropDefault(Group.ID), ...
	Group.LABEL, Group.getPropDefault(Group.LABEL), ...
	Group.NOTES, Group.getPropDefault(Group.NOTES), ...
	Group.SUB_CLASS, Group.getPropDefault(Group.SUB_CLASS), ...
	Group.SUB_DICT, Group.getPropDefault(Group.SUB_DICT) ...
	);
warning('on', 'BRAPH2:Group')

for prop = 1:1:Group.getPropNumber()
	TAG = upper(Group.getPropTag(prop));
	switch Group.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(gr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(gr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(gr.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(gr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				gr.checkFormat(gr.getPropFormat(prop), gr.getr(prop),gr.getPropSettings(prop)), ...
				[BRAPH2.STR ':Group:' BRAPH2.BUG_FUNC], ...
				['Group.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Instantiation

sub1 = Subject('ID','id1', 'LABEL', 'label1', 'NOTES', 'notes1');
sub2 = Subject('ID','id2', 'LABEL', 'label2', 'NOTES', 'notes2');
sub3 = Subject('ID','id3', 'LABEL', 'label3', 'NOTES', 'notes3');

subject_dict = IndexedDictionary( ...
    'id', 'subject_idict', ...
    'it_class', 'Subject', ...
    'it_key', IndexedDictionary.getPropDefault(IndexedDictionary.IT_KEY), ...
    'it_list', {sub1, sub2, sub3} ...
    );

group = Group('ID', 'id', 'LABEL', 'label', 'NOTES', 'notes', 'SUB_DICT', subject_dict);

