%TEST_MEASURE

%% Test 1.1: Instantiation - empty

m = Measure();

prop_number = Measure.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Measure.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
		['Measure.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Measure.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
		['Measure.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Measure.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Measure')
m = Measure( ...
	Measure.ID, Measure.getPropDefault(Measure.ID), ...
	Measure.LABEL, Measure.getPropDefault(Measure.LABEL), ...
	Measure.NOTES, Measure.getPropDefault(Measure.NOTES), ...
	Measure.G, Measure.getPropDefault(Measure.G), ...
	Measure.M, Measure.getPropDefault(Measure.M) ...
	);
warning('on', 'BRAPH2:Measure')

for prop = 1:1:Measure.getPropNumber()
	TAG = upper(Measure.getPropTag(prop));
	switch Measure.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Measure.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Measure.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Measure.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Measure.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Measure.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Measure.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Being a result, Measure.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Measure.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Being a result, Measure.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Measure.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Measure')
m_0 = Measure( ...
	Measure.ID, Measure.getPropDefault(Measure.ID), ...
	Measure.LABEL, Measure.getPropDefault(Measure.LABEL), ...
	Measure.NOTES, Measure.getPropDefault(Measure.NOTES), ...
	Measure.G, Measure.getPropDefault(Measure.G), ...
	Measure.M, Measure.getPropDefault(Measure.M) ...
	);
warning('on', 'BRAPH2:Measure')

m_1 = Measure( ...
	Measure.ID, Callback('EL', m_0, 'PROP', 1), ...
	Measure.LABEL, Measure.getPropDefault(Measure.LABEL), ...
	Measure.NOTES, Measure.getPropDefault(Measure.NOTES), ...
	Measure.G, Callback('EL', m_0, 'PROP', 4), ...
	Measure.M, NoValue() ...
	);
	
prop_number = Measure.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Measure.getPropTag(prop));
	switch Measure.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Measure( ...
	Measure.ID, Callback('EL', m_1, 'PROP', 1), ...
	Measure.LABEL, Measure.getPropDefault(Measure.LABEL), ...
	Measure.NOTES, Measure.getPropDefault(Measure.NOTES), ...
	Measure.G, Callback('EL', m_1, 'PROP', 4), ...
	Measure.M, NoValue() ...
	);
	
prop_number = Measure.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Measure.getPropTag(prop));
	switch Measure.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Measure( ...
	Measure.ID, Callback('EL', m_2, 'PROP', 1), ...
	Measure.LABEL, Measure.getPropDefault(Measure.LABEL), ...
	Measure.NOTES, Measure.getPropDefault(Measure.NOTES), ...
	Measure.G, Callback('EL', m_2, 'PROP', 4), ...
	Measure.M, NoValue() ...
	);
	
prop_number = Measure.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Measure.getPropTag(prop));
	switch Measure.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Measure')
m = Measure( ...
	Measure.ID, Measure.getPropDefault(Measure.ID), ...
	Measure.LABEL, Measure.getPropDefault(Measure.LABEL), ...
	Measure.NOTES, Measure.getPropDefault(Measure.NOTES), ...
	Measure.G, Measure.getPropDefault(Measure.G), ...
	Measure.M, Measure.getPropDefault(Measure.M) ...
	);
warning('on', 'BRAPH2:Measure')

prop_number = Measure.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Measure.getPropTag(prop));
	switch Measure.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
					['Measure.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
					['Measure.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Measure')
m = Measure( ...
	Measure.ID, Measure.getPropDefault(Measure.ID), ...
	Measure.LABEL, Measure.getPropDefault(Measure.LABEL), ...
	Measure.NOTES, Measure.getPropDefault(Measure.NOTES), ...
	Measure.G, Measure.getPropDefault(Measure.G), ...
	Measure.M, Measure.getPropDefault(Measure.M) ...
	);
warning('on', 'BRAPH2:Measure')

for prop = 1:1:Measure.getPropNumber()
	TAG = upper(Measure.getPropTag(prop));
	switch Measure.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Measure:' BRAPH2.BUG_FUNC], ...
				['Measure.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

