%TEST_MEASUREENSEMBLE

%% Test 1.1: Instantiation - empty

me = MeasureEnsemble();

prop_number = MeasureEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MeasureEnsemble.getPropTag(prop));
	assert( ...
		isa(me.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
		['MeasureEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MeasureEnsemble.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(me.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
		['MeasureEnsemble.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MeasureEnsemble.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:MeasureEnsemble')
me = MeasureEnsemble( ...
	MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
	MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
	MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
	MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
	MeasureEnsemble.MEASUREPARAM, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASUREPARAM), ...
	MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
	MeasureEnsemble.M, MeasureEnsemble.getPropDefault(MeasureEnsemble.M) ...
	);
warning('on', 'BRAPH2:MeasureEnsemble')

for prop = 1:1:MeasureEnsemble.getPropNumber()
	TAG = upper(MeasureEnsemble.getPropTag(prop));
	switch MeasureEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(me.getr(prop), MeasureEnsemble.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by MeasureEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MeasureEnsemble.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(me.getr(TAG), MeasureEnsemble.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by MeasureEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MeasureEnsemble.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(me.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['Being a result, MeasureEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MeasureEnsemble.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(me.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['Being a result, MeasureEnsemble.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MeasureEnsemble.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:MeasureEnsemble')
me_0 = MeasureEnsemble( ...
	MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
	MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
	MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
	MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
	MeasureEnsemble.MEASUREPARAM, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASUREPARAM), ...
	MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
	MeasureEnsemble.M, MeasureEnsemble.getPropDefault(MeasureEnsemble.M) ...
	);
warning('on', 'BRAPH2:MeasureEnsemble')

me_1 = MeasureEnsemble( ...
	MeasureEnsemble.ID, Callback('EL', me_0, 'PROP', 1), ...
	MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
	MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
	MeasureEnsemble.MEASURE, Callback('EL', me_0, 'PROP', 4), ...
	MeasureEnsemble.MEASUREPARAM, Callback('EL', me_0, 'PROP', 5), ...
	MeasureEnsemble.A, Callback('EL', me_0, 'PROP', 6), ...
	MeasureEnsemble.M, NoValue() ...
	);
	
prop_number = MeasureEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MeasureEnsemble.getPropTag(prop));
	switch MeasureEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(me_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(me_1.get(prop), me_0.get(prop)) && ~isa(me_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(me_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
me_2 = MeasureEnsemble( ...
	MeasureEnsemble.ID, Callback('EL', me_1, 'PROP', 1), ...
	MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
	MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
	MeasureEnsemble.MEASURE, Callback('EL', me_1, 'PROP', 4), ...
	MeasureEnsemble.MEASUREPARAM, Callback('EL', me_1, 'PROP', 5), ...
	MeasureEnsemble.A, Callback('EL', me_1, 'PROP', 6), ...
	MeasureEnsemble.M, NoValue() ...
	);
	
prop_number = MeasureEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MeasureEnsemble.getPropTag(prop));
	switch MeasureEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(me_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(me_2.get(prop), me_0.get(prop)) && ~isa(me_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(me_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
me_3 = MeasureEnsemble( ...
	MeasureEnsemble.ID, Callback('EL', me_2, 'PROP', 1), ...
	MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
	MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
	MeasureEnsemble.MEASURE, Callback('EL', me_2, 'PROP', 4), ...
	MeasureEnsemble.MEASUREPARAM, Callback('EL', me_2, 'PROP', 5), ...
	MeasureEnsemble.A, Callback('EL', me_2, 'PROP', 6), ...
	MeasureEnsemble.M, NoValue() ...
	);
	
prop_number = MeasureEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MeasureEnsemble.getPropTag(prop));
	switch MeasureEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(me_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(me_3.get(prop), me_0.get(prop)) && ~isa(me_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(me_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:MeasureEnsemble')
me = MeasureEnsemble( ...
	MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
	MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
	MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
	MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
	MeasureEnsemble.MEASUREPARAM, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASUREPARAM), ...
	MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
	MeasureEnsemble.M, MeasureEnsemble.getPropDefault(MeasureEnsemble.M) ...
	);
warning('on', 'BRAPH2:MeasureEnsemble')

prop_number = MeasureEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MeasureEnsemble.getPropTag(prop));
	switch MeasureEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(me.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(me.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(me.getPropSettings(prop))
				assert( ...
					me.checkFormat(me.getPropFormat(prop), me.get(prop)), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
					['MeasureEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					me.checkFormat(me.getPropFormat(prop), me.get(prop), me.getPropSettings(prop)), ...
					[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
					['MeasureEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:MeasureEnsemble')
me = MeasureEnsemble( ...
	MeasureEnsemble.ID, MeasureEnsemble.getPropDefault(MeasureEnsemble.ID), ...
	MeasureEnsemble.LABEL, MeasureEnsemble.getPropDefault(MeasureEnsemble.LABEL), ...
	MeasureEnsemble.NOTES, MeasureEnsemble.getPropDefault(MeasureEnsemble.NOTES), ...
	MeasureEnsemble.MEASURE, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASURE), ...
	MeasureEnsemble.MEASUREPARAM, MeasureEnsemble.getPropDefault(MeasureEnsemble.MEASUREPARAM), ...
	MeasureEnsemble.A, MeasureEnsemble.getPropDefault(MeasureEnsemble.A), ...
	MeasureEnsemble.M, MeasureEnsemble.getPropDefault(MeasureEnsemble.M) ...
	);
warning('on', 'BRAPH2:MeasureEnsemble')

for prop = 1:1:MeasureEnsemble.getPropNumber()
	TAG = upper(MeasureEnsemble.getPropTag(prop));
	switch MeasureEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(me.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(me.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(me.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(me.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				me.checkFormat(me.getPropFormat(prop), me.getr(prop),me.getPropSettings(prop)), ...
				[BRAPH2.STR ':MeasureEnsemble:' BRAPH2.BUG_FUNC], ...
				['MeasureEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

