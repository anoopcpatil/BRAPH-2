%TEST_COMPAREENSEMBLE

%% Test 1.1: Instantiation - empty

c = CompareEnsemble();

prop_number = CompareEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(CompareEnsemble.getPropTag(prop));
	assert( ...
		isa(c.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
		['CompareEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in CompareEnsemble.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(c.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
		['CompareEnsemble.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in CompareEnsemble.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:CompareEnsemble')
c = CompareEnsemble( ...
	CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
	CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
	CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
	CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
	CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
	CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
	CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
	CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
	CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
	CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
	CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
	CompareEnsemble.PERM_SEEDS, CompareEnsemble.getPropDefault(CompareEnsemble.PERM_SEEDS), ...
	CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A1_PERM_DICT), ...
	CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A2_PERM_DICT), ...
	CompareEnsemble.CP_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.CP_DICT) ...
	);
warning('on', 'BRAPH2:CompareEnsemble')

for prop = 1:1:CompareEnsemble.getPropNumber()
	TAG = upper(CompareEnsemble.getPropTag(prop));
	switch CompareEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(c.getr(prop), CompareEnsemble.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by CompareEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in CompareEnsemble.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(c.getr(TAG), CompareEnsemble.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by CompareEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in CompareEnsemble.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(c.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['Being a result, CompareEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in CompareEnsemble.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(c.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['Being a result, CompareEnsemble.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in CompareEnsemble.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:CompareEnsemble')
c_0 = CompareEnsemble( ...
	CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
	CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
	CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
	CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
	CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
	CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
	CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
	CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
	CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
	CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
	CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
	CompareEnsemble.PERM_SEEDS, CompareEnsemble.getPropDefault(CompareEnsemble.PERM_SEEDS), ...
	CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A1_PERM_DICT), ...
	CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A2_PERM_DICT), ...
	CompareEnsemble.CP_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.CP_DICT) ...
	);
warning('on', 'BRAPH2:CompareEnsemble')

c_1 = CompareEnsemble( ...
	CompareEnsemble.ID, Callback('EL', c_0, 'PROP', 1), ...
	CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
	CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
	CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
	CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
	CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
	CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
	CompareEnsemble.P, Callback('EL', c_0, 'PROP', 8), ...
	CompareEnsemble.LONGITUDINAL, Callback('EL', c_0, 'PROP', 9), ...
	CompareEnsemble.A1, Callback('EL', c_0, 'PROP', 10), ...
	CompareEnsemble.A2, Callback('EL', c_0, 'PROP', 11), ...
	CompareEnsemble.PERM_SEEDS, NoValue(), ...
	CompareEnsemble.A1_PERM_DICT, NoValue(), ...
	CompareEnsemble.A2_PERM_DICT, NoValue(), ...
	CompareEnsemble.CP_DICT, NoValue() ...
	);
	
prop_number = CompareEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(CompareEnsemble.getPropTag(prop));
	switch CompareEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(c_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(c_1.get(prop), c_0.get(prop)) && ~isa(c_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(c_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
c_2 = CompareEnsemble( ...
	CompareEnsemble.ID, Callback('EL', c_1, 'PROP', 1), ...
	CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
	CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
	CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
	CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
	CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
	CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
	CompareEnsemble.P, Callback('EL', c_1, 'PROP', 8), ...
	CompareEnsemble.LONGITUDINAL, Callback('EL', c_1, 'PROP', 9), ...
	CompareEnsemble.A1, Callback('EL', c_1, 'PROP', 10), ...
	CompareEnsemble.A2, Callback('EL', c_1, 'PROP', 11), ...
	CompareEnsemble.PERM_SEEDS, NoValue(), ...
	CompareEnsemble.A1_PERM_DICT, NoValue(), ...
	CompareEnsemble.A2_PERM_DICT, NoValue(), ...
	CompareEnsemble.CP_DICT, NoValue() ...
	);
	
prop_number = CompareEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(CompareEnsemble.getPropTag(prop));
	switch CompareEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(c_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(c_2.get(prop), c_0.get(prop)) && ~isa(c_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(c_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
c_3 = CompareEnsemble( ...
	CompareEnsemble.ID, Callback('EL', c_2, 'PROP', 1), ...
	CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
	CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
	CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
	CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
	CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
	CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
	CompareEnsemble.P, Callback('EL', c_2, 'PROP', 8), ...
	CompareEnsemble.LONGITUDINAL, Callback('EL', c_2, 'PROP', 9), ...
	CompareEnsemble.A1, Callback('EL', c_2, 'PROP', 10), ...
	CompareEnsemble.A2, Callback('EL', c_2, 'PROP', 11), ...
	CompareEnsemble.PERM_SEEDS, NoValue(), ...
	CompareEnsemble.A1_PERM_DICT, NoValue(), ...
	CompareEnsemble.A2_PERM_DICT, NoValue(), ...
	CompareEnsemble.CP_DICT, NoValue() ...
	);
	
prop_number = CompareEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(CompareEnsemble.getPropTag(prop));
	switch CompareEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(c_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(c_3.get(prop), c_0.get(prop)) && ~isa(c_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(c_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:CompareEnsemble')
c = CompareEnsemble( ...
	CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
	CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
	CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
	CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
	CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
	CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
	CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
	CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
	CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
	CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
	CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
	CompareEnsemble.PERM_SEEDS, CompareEnsemble.getPropDefault(CompareEnsemble.PERM_SEEDS), ...
	CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A1_PERM_DICT), ...
	CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A2_PERM_DICT), ...
	CompareEnsemble.CP_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.CP_DICT) ...
	);
warning('on', 'BRAPH2:CompareEnsemble')

prop_number = CompareEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(CompareEnsemble.getPropTag(prop));
	switch CompareEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(c.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(c.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(c.getPropSettings(prop))
				assert( ...
					c.checkFormat(c.getPropFormat(prop), c.get(prop)), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
					['CompareEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					c.checkFormat(c.getPropFormat(prop), c.get(prop), c.getPropSettings(prop)), ...
					[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
					['CompareEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:CompareEnsemble')
c = CompareEnsemble( ...
	CompareEnsemble.ID, CompareEnsemble.getPropDefault(CompareEnsemble.ID), ...
	CompareEnsemble.LABEL, CompareEnsemble.getPropDefault(CompareEnsemble.LABEL), ...
	CompareEnsemble.NOTES, CompareEnsemble.getPropDefault(CompareEnsemble.NOTES), ...
	CompareEnsemble.WAITBAR, CompareEnsemble.getPropDefault(CompareEnsemble.WAITBAR), ...
	CompareEnsemble.VERBOSE, CompareEnsemble.getPropDefault(CompareEnsemble.VERBOSE), ...
	CompareEnsemble.INTERRUPTIBLE, CompareEnsemble.getPropDefault(CompareEnsemble.INTERRUPTIBLE), ...
	CompareEnsemble.MEMORIZE, CompareEnsemble.getPropDefault(CompareEnsemble.MEMORIZE), ...
	CompareEnsemble.P, CompareEnsemble.getPropDefault(CompareEnsemble.P), ...
	CompareEnsemble.LONGITUDINAL, CompareEnsemble.getPropDefault(CompareEnsemble.LONGITUDINAL), ...
	CompareEnsemble.A1, CompareEnsemble.getPropDefault(CompareEnsemble.A1), ...
	CompareEnsemble.A2, CompareEnsemble.getPropDefault(CompareEnsemble.A2), ...
	CompareEnsemble.PERM_SEEDS, CompareEnsemble.getPropDefault(CompareEnsemble.PERM_SEEDS), ...
	CompareEnsemble.A1_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A1_PERM_DICT), ...
	CompareEnsemble.A2_PERM_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.A2_PERM_DICT), ...
	CompareEnsemble.CP_DICT, CompareEnsemble.getPropDefault(CompareEnsemble.CP_DICT) ...
	);
warning('on', 'BRAPH2:CompareEnsemble')

for prop = 1:1:CompareEnsemble.getPropNumber()
	TAG = upper(CompareEnsemble.getPropTag(prop));
	switch CompareEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(c.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(c.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(c.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(c.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				c.checkFormat(c.getPropFormat(prop), c.getr(prop),c.getPropSettings(prop)), ...
				[BRAPH2.STR ':CompareEnsemble:' BRAPH2.BUG_FUNC], ...
				['CompareEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

