%TEST_COMPARISONENSEMBLE

%% Test 1.1: Instantiation - empty

cp = ComparisonEnsemble();

prop_number = ComparisonEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ComparisonEnsemble.getPropTag(prop));
	assert( ...
		isa(cp.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
		['ComparisonEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ComparisonEnsemble.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(cp.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
		['ComparisonEnsemble.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ComparisonEnsemble.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:ComparisonEnsemble')
cp = ComparisonEnsemble( ...
	ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
	ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
	ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
	ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
	ComparisonEnsemble.MEASUREPARAM, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASUREPARAM), ...
	ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
	ComparisonEnsemble.DIFF, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.DIFF), ...
	ComparisonEnsemble.P1, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P1), ...
	ComparisonEnsemble.P2, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P2), ...
	ComparisonEnsemble.CIL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIL), ...
	ComparisonEnsemble.CIU, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIU) ...
	);
warning('on', 'BRAPH2:ComparisonEnsemble')

for prop = 1:1:ComparisonEnsemble.getPropNumber()
	TAG = upper(ComparisonEnsemble.getPropTag(prop));
	switch ComparisonEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(cp.getr(prop), ComparisonEnsemble.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by ComparisonEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ComparisonEnsemble.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(cp.getr(TAG), ComparisonEnsemble.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by ComparisonEnsemble.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ComparisonEnsemble.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(cp.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['Being a result, ComparisonEnsemble.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ComparisonEnsemble.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(cp.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['Being a result, ComparisonEnsemble.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ComparisonEnsemble.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:ComparisonEnsemble')
cp_0 = ComparisonEnsemble( ...
	ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
	ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
	ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
	ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
	ComparisonEnsemble.MEASUREPARAM, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASUREPARAM), ...
	ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
	ComparisonEnsemble.DIFF, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.DIFF), ...
	ComparisonEnsemble.P1, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P1), ...
	ComparisonEnsemble.P2, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P2), ...
	ComparisonEnsemble.CIL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIL), ...
	ComparisonEnsemble.CIU, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIU) ...
	);
warning('on', 'BRAPH2:ComparisonEnsemble')

cp_1 = ComparisonEnsemble( ...
	ComparisonEnsemble.ID, Callback('EL', cp_0, 'PROP', 1), ...
	ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
	ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
	ComparisonEnsemble.MEASURE, Callback('EL', cp_0, 'PROP', 4), ...
	ComparisonEnsemble.MEASUREPARAM, Callback('EL', cp_0, 'PROP', 5), ...
	ComparisonEnsemble.C, Callback('EL', cp_0, 'PROP', 6), ...
	ComparisonEnsemble.DIFF, NoValue(), ...
	ComparisonEnsemble.P1, NoValue(), ...
	ComparisonEnsemble.P2, NoValue(), ...
	ComparisonEnsemble.CIL, NoValue(), ...
	ComparisonEnsemble.CIU, NoValue() ...
	);
	
prop_number = ComparisonEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ComparisonEnsemble.getPropTag(prop));
	switch ComparisonEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(cp_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(cp_1.get(prop), cp_0.get(prop)) && ~isa(cp_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(cp_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
cp_2 = ComparisonEnsemble( ...
	ComparisonEnsemble.ID, Callback('EL', cp_1, 'PROP', 1), ...
	ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
	ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
	ComparisonEnsemble.MEASURE, Callback('EL', cp_1, 'PROP', 4), ...
	ComparisonEnsemble.MEASUREPARAM, Callback('EL', cp_1, 'PROP', 5), ...
	ComparisonEnsemble.C, Callback('EL', cp_1, 'PROP', 6), ...
	ComparisonEnsemble.DIFF, NoValue(), ...
	ComparisonEnsemble.P1, NoValue(), ...
	ComparisonEnsemble.P2, NoValue(), ...
	ComparisonEnsemble.CIL, NoValue(), ...
	ComparisonEnsemble.CIU, NoValue() ...
	);
	
prop_number = ComparisonEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ComparisonEnsemble.getPropTag(prop));
	switch ComparisonEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(cp_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(cp_2.get(prop), cp_0.get(prop)) && ~isa(cp_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(cp_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
cp_3 = ComparisonEnsemble( ...
	ComparisonEnsemble.ID, Callback('EL', cp_2, 'PROP', 1), ...
	ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
	ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
	ComparisonEnsemble.MEASURE, Callback('EL', cp_2, 'PROP', 4), ...
	ComparisonEnsemble.MEASUREPARAM, Callback('EL', cp_2, 'PROP', 5), ...
	ComparisonEnsemble.C, Callback('EL', cp_2, 'PROP', 6), ...
	ComparisonEnsemble.DIFF, NoValue(), ...
	ComparisonEnsemble.P1, NoValue(), ...
	ComparisonEnsemble.P2, NoValue(), ...
	ComparisonEnsemble.CIL, NoValue(), ...
	ComparisonEnsemble.CIU, NoValue() ...
	);
	
prop_number = ComparisonEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ComparisonEnsemble.getPropTag(prop));
	switch ComparisonEnsemble.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(cp_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(cp_3.get(prop), cp_0.get(prop)) && ~isa(cp_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(cp_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:ComparisonEnsemble')
cp = ComparisonEnsemble( ...
	ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
	ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
	ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
	ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
	ComparisonEnsemble.MEASUREPARAM, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASUREPARAM), ...
	ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
	ComparisonEnsemble.DIFF, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.DIFF), ...
	ComparisonEnsemble.P1, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P1), ...
	ComparisonEnsemble.P2, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P2), ...
	ComparisonEnsemble.CIL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIL), ...
	ComparisonEnsemble.CIU, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIU) ...
	);
warning('on', 'BRAPH2:ComparisonEnsemble')

prop_number = ComparisonEnsemble.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ComparisonEnsemble.getPropTag(prop));
	switch ComparisonEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(cp.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(cp.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(cp.getPropSettings(prop))
				assert( ...
					cp.checkFormat(cp.getPropFormat(prop), cp.get(prop)), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
					['ComparisonEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					cp.checkFormat(cp.getPropFormat(prop), cp.get(prop), cp.getPropSettings(prop)), ...
					[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
					['ComparisonEnsemble.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:ComparisonEnsemble')
cp = ComparisonEnsemble( ...
	ComparisonEnsemble.ID, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.ID), ...
	ComparisonEnsemble.LABEL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.LABEL), ...
	ComparisonEnsemble.NOTES, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.NOTES), ...
	ComparisonEnsemble.MEASURE, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASURE), ...
	ComparisonEnsemble.MEASUREPARAM, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.MEASUREPARAM), ...
	ComparisonEnsemble.C, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.C), ...
	ComparisonEnsemble.DIFF, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.DIFF), ...
	ComparisonEnsemble.P1, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P1), ...
	ComparisonEnsemble.P2, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.P2), ...
	ComparisonEnsemble.CIL, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIL), ...
	ComparisonEnsemble.CIU, ComparisonEnsemble.getPropDefault(ComparisonEnsemble.CIU) ...
	);
warning('on', 'BRAPH2:ComparisonEnsemble')

for prop = 1:1:ComparisonEnsemble.getPropNumber()
	TAG = upper(ComparisonEnsemble.getPropTag(prop));
	switch ComparisonEnsemble.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(cp.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(cp.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(cp.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(cp.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				cp.checkFormat(cp.getPropFormat(prop), cp.getr(prop),cp.getPropSettings(prop)), ...
				[BRAPH2.STR ':ComparisonEnsemble:' BRAPH2.BUG_FUNC], ...
				['ComparisonEnsemble.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

