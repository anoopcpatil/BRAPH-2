%TEST_PPCOMPARISONGROUP_DIFF

%% Test 1.1: Instantiation - empty

pr = PPComparisonGroup_Diff();

prop_number = PPComparisonGroup_Diff.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PPComparisonGroup_Diff.getPropTag(prop));
	assert( ...
		isa(pr.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
		['PPComparisonGroup_Diff.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PPComparisonGroup_Diff.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(pr.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
		['PPComparisonGroup_Diff.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PPComparisonGroup_Diff.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:PPComparisonGroup_Diff')
pr = PPComparisonGroup_Diff( ...
	PPComparisonGroup_Diff.ID, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ID), ...
	PPComparisonGroup_Diff.BKGCOLOR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.BKGCOLOR), ...
	PPComparisonGroup_Diff.EL, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.EL), ...
	PPComparisonGroup_Diff.PROP, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.PROP), ...
	PPComparisonGroup_Diff.TITLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.TITLE), ...
	PPComparisonGroup_Diff.ENABLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ENABLE), ...
	PPComparisonGroup_Diff.WAITBAR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.WAITBAR) ...
	);
warning('on', 'BRAPH2:PPComparisonGroup_Diff')

for prop = 1:1:PPComparisonGroup_Diff.getPropNumber()
	TAG = upper(PPComparisonGroup_Diff.getPropTag(prop));
	switch PPComparisonGroup_Diff.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(pr.getr(prop), PPComparisonGroup_Diff.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by PPComparisonGroup_Diff.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PPComparisonGroup_Diff.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(pr.getr(TAG), PPComparisonGroup_Diff.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by PPComparisonGroup_Diff.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PPComparisonGroup_Diff.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(pr.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['Being a result, PPComparisonGroup_Diff.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PPComparisonGroup_Diff.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(pr.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['Being a result, PPComparisonGroup_Diff.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PPComparisonGroup_Diff.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:PPComparisonGroup_Diff')
pr_0 = PPComparisonGroup_Diff( ...
	PPComparisonGroup_Diff.ID, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ID), ...
	PPComparisonGroup_Diff.BKGCOLOR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.BKGCOLOR), ...
	PPComparisonGroup_Diff.EL, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.EL), ...
	PPComparisonGroup_Diff.PROP, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.PROP), ...
	PPComparisonGroup_Diff.TITLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.TITLE), ...
	PPComparisonGroup_Diff.ENABLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ENABLE), ...
	PPComparisonGroup_Diff.WAITBAR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.WAITBAR) ...
	);
warning('on', 'BRAPH2:PPComparisonGroup_Diff')

pr_1 = PPComparisonGroup_Diff( ...
	PPComparisonGroup_Diff.ID, Callback('EL', pr_0, 'PROP', 1), ...
	PPComparisonGroup_Diff.BKGCOLOR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.BKGCOLOR), ...
	PPComparisonGroup_Diff.EL, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.EL), ...
	PPComparisonGroup_Diff.PROP, Callback('EL', pr_0, 'PROP', 4), ...
	PPComparisonGroup_Diff.TITLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.TITLE), ...
	PPComparisonGroup_Diff.ENABLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ENABLE), ...
	PPComparisonGroup_Diff.WAITBAR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.WAITBAR) ...
	);
	
prop_number = PPComparisonGroup_Diff.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PPComparisonGroup_Diff.getPropTag(prop));
	switch PPComparisonGroup_Diff.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pr_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pr_1.get(prop), pr_0.get(prop)) && ~isa(pr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pr_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pr_2 = PPComparisonGroup_Diff( ...
	PPComparisonGroup_Diff.ID, Callback('EL', pr_1, 'PROP', 1), ...
	PPComparisonGroup_Diff.BKGCOLOR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.BKGCOLOR), ...
	PPComparisonGroup_Diff.EL, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.EL), ...
	PPComparisonGroup_Diff.PROP, Callback('EL', pr_1, 'PROP', 4), ...
	PPComparisonGroup_Diff.TITLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.TITLE), ...
	PPComparisonGroup_Diff.ENABLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ENABLE), ...
	PPComparisonGroup_Diff.WAITBAR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.WAITBAR) ...
	);
	
prop_number = PPComparisonGroup_Diff.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PPComparisonGroup_Diff.getPropTag(prop));
	switch PPComparisonGroup_Diff.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pr_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pr_2.get(prop), pr_0.get(prop)) && ~isa(pr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pr_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
pr_3 = PPComparisonGroup_Diff( ...
	PPComparisonGroup_Diff.ID, Callback('EL', pr_2, 'PROP', 1), ...
	PPComparisonGroup_Diff.BKGCOLOR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.BKGCOLOR), ...
	PPComparisonGroup_Diff.EL, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.EL), ...
	PPComparisonGroup_Diff.PROP, Callback('EL', pr_2, 'PROP', 4), ...
	PPComparisonGroup_Diff.TITLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.TITLE), ...
	PPComparisonGroup_Diff.ENABLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ENABLE), ...
	PPComparisonGroup_Diff.WAITBAR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.WAITBAR) ...
	);
	
prop_number = PPComparisonGroup_Diff.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PPComparisonGroup_Diff.getPropTag(prop));
	switch PPComparisonGroup_Diff.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(pr_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(pr_3.get(prop), pr_0.get(prop)) && ~isa(pr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(pr_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:PPComparisonGroup_Diff')
pr = PPComparisonGroup_Diff( ...
	PPComparisonGroup_Diff.ID, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ID), ...
	PPComparisonGroup_Diff.BKGCOLOR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.BKGCOLOR), ...
	PPComparisonGroup_Diff.EL, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.EL), ...
	PPComparisonGroup_Diff.PROP, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.PROP), ...
	PPComparisonGroup_Diff.TITLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.TITLE), ...
	PPComparisonGroup_Diff.ENABLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ENABLE), ...
	PPComparisonGroup_Diff.WAITBAR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.WAITBAR) ...
	);
warning('on', 'BRAPH2:PPComparisonGroup_Diff')

prop_number = PPComparisonGroup_Diff.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PPComparisonGroup_Diff.getPropTag(prop));
	switch PPComparisonGroup_Diff.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(pr.getPropSettings(prop))
				assert( ...
					pr.checkFormat(pr.getPropFormat(prop), pr.get(prop)), ...
					[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
					['PPComparisonGroup_Diff.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					pr.checkFormat(pr.getPropFormat(prop), pr.get(prop), pr.getPropSettings(prop)), ...
					[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
					['PPComparisonGroup_Diff.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:PPComparisonGroup_Diff')
pr = PPComparisonGroup_Diff( ...
	PPComparisonGroup_Diff.ID, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ID), ...
	PPComparisonGroup_Diff.BKGCOLOR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.BKGCOLOR), ...
	PPComparisonGroup_Diff.EL, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.EL), ...
	PPComparisonGroup_Diff.PROP, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.PROP), ...
	PPComparisonGroup_Diff.TITLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.TITLE), ...
	PPComparisonGroup_Diff.ENABLE, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.ENABLE), ...
	PPComparisonGroup_Diff.WAITBAR, PPComparisonGroup_Diff.getPropDefault(PPComparisonGroup_Diff.WAITBAR) ...
	);
warning('on', 'BRAPH2:PPComparisonGroup_Diff')

for prop = 1:1:PPComparisonGroup_Diff.getPropNumber()
	TAG = upper(PPComparisonGroup_Diff.getPropTag(prop));
	switch PPComparisonGroup_Diff.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(pr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(pr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(pr.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(pr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				pr.checkFormat(pr.getPropFormat(prop), pr.getr(prop),pr.getPropSettings(prop)), ...
				[BRAPH2.STR ':PPComparisonGroup_Diff:' BRAPH2.BUG_FUNC], ...
				['PPComparisonGroup_Diff.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

