%TEST_NNBASE

%% Test 1.1: Instantiation - empty

nn = NNBase();

prop_number = NNBase.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNBase.getPropTag(prop));
	assert( ...
		isa(nn.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
		['NNBase.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNBase.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nn.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
		['NNBase.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNBase.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNBase')
nn = NNBase( ...
	NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
	NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
	NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
	NNBase.GR, NNBase.getPropDefault(NNBase.GR), ...
	NNBase.MODEL, NNBase.getPropDefault(NNBase.MODEL) ...
	);
warning('on', 'BRAPH2:NNBase')

for prop = 1:1:NNBase.getPropNumber()
	TAG = upper(NNBase.getPropTag(prop));
	switch NNBase.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nn.getr(prop), NNBase.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNBase.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNBase.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nn.getr(TAG), NNBase.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNBase.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNBase.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nn.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNBase.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNBase.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nn.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNBase.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNBase.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNBase')
nn_0 = NNBase( ...
	NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
	NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
	NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
	NNBase.GR, NNBase.getPropDefault(NNBase.GR), ...
	NNBase.MODEL, NNBase.getPropDefault(NNBase.MODEL) ...
	);
warning('on', 'BRAPH2:NNBase')

nn_1 = NNBase( ...
	NNBase.ID, Callback('EL', nn_0, 'PROP', 1), ...
	NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
	NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
	NNBase.GR, Callback('EL', nn_0, 'PROP', 4), ...
	NNBase.MODEL, NoValue() ...
	);
	
prop_number = NNBase.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNBase.getPropTag(prop));
	switch NNBase.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nn_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nn_1.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nn_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nn_2 = NNBase( ...
	NNBase.ID, Callback('EL', nn_1, 'PROP', 1), ...
	NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
	NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
	NNBase.GR, Callback('EL', nn_1, 'PROP', 4), ...
	NNBase.MODEL, NoValue() ...
	);
	
prop_number = NNBase.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNBase.getPropTag(prop));
	switch NNBase.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nn_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nn_2.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nn_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nn_3 = NNBase( ...
	NNBase.ID, Callback('EL', nn_2, 'PROP', 1), ...
	NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
	NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
	NNBase.GR, Callback('EL', nn_2, 'PROP', 4), ...
	NNBase.MODEL, NoValue() ...
	);
	
prop_number = NNBase.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNBase.getPropTag(prop));
	switch NNBase.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nn_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nn_3.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nn_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNBase')
nn = NNBase( ...
	NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
	NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
	NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
	NNBase.GR, NNBase.getPropDefault(NNBase.GR), ...
	NNBase.MODEL, NNBase.getPropDefault(NNBase.MODEL) ...
	);
warning('on', 'BRAPH2:NNBase')

prop_number = NNBase.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNBase.getPropTag(prop));
	switch NNBase.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nn.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nn.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nn.getPropSettings(prop))
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.get(prop)), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
					['NNBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.get(prop), nn.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
					['NNBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNBase')
nn = NNBase( ...
	NNBase.ID, NNBase.getPropDefault(NNBase.ID), ...
	NNBase.LABEL, NNBase.getPropDefault(NNBase.LABEL), ...
	NNBase.NOTES, NNBase.getPropDefault(NNBase.NOTES), ...
	NNBase.GR, NNBase.getPropDefault(NNBase.GR), ...
	NNBase.MODEL, NNBase.getPropDefault(NNBase.MODEL) ...
	);
warning('on', 'BRAPH2:NNBase')

for prop = 1:1:NNBase.getPropNumber()
	TAG = upper(NNBase.getPropTag(prop));
	switch NNBase.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nn.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nn.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nn.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nn.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNBase:' BRAPH2.BUG_FUNC], ...
				['NNBase.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Net import and export

net = squeezenet;
img = rand(net.Layers(1).InputSize);
pred_from_original_net = predict(net, img);

net_braph = NNBase().to_net(NNBase().from_net(squeezenet));
pred_from_braph = predict(net_braph, img);

assert(max(abs(pred_from_braph - pred_from_original_net)) < 1E-06, ...
    [BRAPH2.STR ':NNBase:' BRAPH2.BUG_ERR], ...
    'Prediction is not being calculated correctly for neural networks.')

