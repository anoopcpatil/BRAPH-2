%TEST_NNGROUP

%% Test 1.1: Instantiation - empty

gr = NNGroup();

prop_number = NNGroup.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNGroup.getPropTag(prop));
	assert( ...
		isa(gr.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
		['NNGroup.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNGroup.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(gr.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
		['NNGroup.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNGroup.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNGroup')
gr = NNGroup( ...
	NNGroup.ID, NNGroup.getPropDefault(NNGroup.ID), ...
	NNGroup.LABEL, NNGroup.getPropDefault(NNGroup.LABEL), ...
	NNGroup.NOTES, NNGroup.getPropDefault(NNGroup.NOTES), ...
	NNGroup.SUB_CLASS, NNGroup.getPropDefault(NNGroup.SUB_CLASS), ...
	NNGroup.SUB_DICT, NNGroup.getPropDefault(NNGroup.SUB_DICT), ...
	NNGroup.INPUTS, NNGroup.getPropDefault(NNGroup.INPUTS), ...
	NNGroup.TARGETS, NNGroup.getPropDefault(NNGroup.TARGETS), ...
	NNGroup.G, NNGroup.getPropDefault(NNGroup.G) ...
	);
warning('on', 'BRAPH2:NNGroup')

for prop = 1:1:NNGroup.getPropNumber()
	TAG = upper(NNGroup.getPropTag(prop));
	switch NNGroup.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(gr.getr(prop), NNGroup.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNGroup.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNGroup.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(gr.getr(TAG), NNGroup.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNGroup.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNGroup.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(gr.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNGroup.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNGroup.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(gr.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNGroup.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNGroup.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNGroup')
gr_0 = NNGroup( ...
	NNGroup.ID, NNGroup.getPropDefault(NNGroup.ID), ...
	NNGroup.LABEL, NNGroup.getPropDefault(NNGroup.LABEL), ...
	NNGroup.NOTES, NNGroup.getPropDefault(NNGroup.NOTES), ...
	NNGroup.SUB_CLASS, NNGroup.getPropDefault(NNGroup.SUB_CLASS), ...
	NNGroup.SUB_DICT, NNGroup.getPropDefault(NNGroup.SUB_DICT), ...
	NNGroup.INPUTS, NNGroup.getPropDefault(NNGroup.INPUTS), ...
	NNGroup.TARGETS, NNGroup.getPropDefault(NNGroup.TARGETS), ...
	NNGroup.G, NNGroup.getPropDefault(NNGroup.G) ...
	);
warning('on', 'BRAPH2:NNGroup')

gr_1 = NNGroup( ...
	NNGroup.ID, Callback('EL', gr_0, 'PROP', 1), ...
	NNGroup.LABEL, NNGroup.getPropDefault(NNGroup.LABEL), ...
	NNGroup.NOTES, NNGroup.getPropDefault(NNGroup.NOTES), ...
	NNGroup.SUB_CLASS, Callback('EL', gr_0, 'PROP', 4), ...
	NNGroup.SUB_DICT, Callback('EL', gr_0, 'PROP', 5), ...
	NNGroup.INPUTS, NoValue(), ...
	NNGroup.TARGETS, NoValue(), ...
	NNGroup.G, NoValue() ...
	);
	
prop_number = NNGroup.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNGroup.getPropTag(prop));
	switch NNGroup.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(gr_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(gr_1.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(gr_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
gr_2 = NNGroup( ...
	NNGroup.ID, Callback('EL', gr_1, 'PROP', 1), ...
	NNGroup.LABEL, NNGroup.getPropDefault(NNGroup.LABEL), ...
	NNGroup.NOTES, NNGroup.getPropDefault(NNGroup.NOTES), ...
	NNGroup.SUB_CLASS, Callback('EL', gr_1, 'PROP', 4), ...
	NNGroup.SUB_DICT, Callback('EL', gr_1, 'PROP', 5), ...
	NNGroup.INPUTS, NoValue(), ...
	NNGroup.TARGETS, NoValue(), ...
	NNGroup.G, NoValue() ...
	);
	
prop_number = NNGroup.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNGroup.getPropTag(prop));
	switch NNGroup.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(gr_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(gr_2.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(gr_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
gr_3 = NNGroup( ...
	NNGroup.ID, Callback('EL', gr_2, 'PROP', 1), ...
	NNGroup.LABEL, NNGroup.getPropDefault(NNGroup.LABEL), ...
	NNGroup.NOTES, NNGroup.getPropDefault(NNGroup.NOTES), ...
	NNGroup.SUB_CLASS, Callback('EL', gr_2, 'PROP', 4), ...
	NNGroup.SUB_DICT, Callback('EL', gr_2, 'PROP', 5), ...
	NNGroup.INPUTS, NoValue(), ...
	NNGroup.TARGETS, NoValue(), ...
	NNGroup.G, NoValue() ...
	);
	
prop_number = NNGroup.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNGroup.getPropTag(prop));
	switch NNGroup.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(gr_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(gr_3.get(prop), gr_0.get(prop)) && ~isa(gr_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(gr_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNGroup')
gr = NNGroup( ...
	NNGroup.ID, NNGroup.getPropDefault(NNGroup.ID), ...
	NNGroup.LABEL, NNGroup.getPropDefault(NNGroup.LABEL), ...
	NNGroup.NOTES, NNGroup.getPropDefault(NNGroup.NOTES), ...
	NNGroup.SUB_CLASS, NNGroup.getPropDefault(NNGroup.SUB_CLASS), ...
	NNGroup.SUB_DICT, NNGroup.getPropDefault(NNGroup.SUB_DICT), ...
	NNGroup.INPUTS, NNGroup.getPropDefault(NNGroup.INPUTS), ...
	NNGroup.TARGETS, NNGroup.getPropDefault(NNGroup.TARGETS), ...
	NNGroup.G, NNGroup.getPropDefault(NNGroup.G) ...
	);
warning('on', 'BRAPH2:NNGroup')

prop_number = NNGroup.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNGroup.getPropTag(prop));
	switch NNGroup.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(gr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(gr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(gr.getPropSettings(prop))
				assert( ...
					gr.checkFormat(gr.getPropFormat(prop), gr.get(prop)), ...
					[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
					['NNGroup.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					gr.checkFormat(gr.getPropFormat(prop), gr.get(prop), gr.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
					['NNGroup.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNGroup')
gr = NNGroup( ...
	NNGroup.ID, NNGroup.getPropDefault(NNGroup.ID), ...
	NNGroup.LABEL, NNGroup.getPropDefault(NNGroup.LABEL), ...
	NNGroup.NOTES, NNGroup.getPropDefault(NNGroup.NOTES), ...
	NNGroup.SUB_CLASS, NNGroup.getPropDefault(NNGroup.SUB_CLASS), ...
	NNGroup.SUB_DICT, NNGroup.getPropDefault(NNGroup.SUB_DICT), ...
	NNGroup.INPUTS, NNGroup.getPropDefault(NNGroup.INPUTS), ...
	NNGroup.TARGETS, NNGroup.getPropDefault(NNGroup.TARGETS), ...
	NNGroup.G, NNGroup.getPropDefault(NNGroup.G) ...
	);
warning('on', 'BRAPH2:NNGroup')

for prop = 1:1:NNGroup.getPropNumber()
	TAG = upper(NNGroup.getPropTag(prop));
	switch NNGroup.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(gr.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(gr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(gr.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(gr.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				gr.checkFormat(gr.getPropFormat(prop), gr.getr(prop),gr.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNGroup:' BRAPH2.BUG_FUNC], ...
				['NNGroup.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

