%TEST_NNEVALUATOR

%% Test 1.1: Instantiation - empty

nne = NNEvaluator();

prop_number = NNEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNEvaluator.getPropTag(prop));
	assert( ...
		isa(nne.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
		['NNEvaluator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNEvaluator.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nne.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
		['NNEvaluator.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNEvaluator.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNEvaluator')
nne = NNEvaluator( ...
	NNEvaluator.ID, NNEvaluator.getPropDefault(NNEvaluator.ID), ...
	NNEvaluator.LABEL, NNEvaluator.getPropDefault(NNEvaluator.LABEL), ...
	NNEvaluator.NOTES, NNEvaluator.getPropDefault(NNEvaluator.NOTES), ...
	NNEvaluator.NN, NNEvaluator.getPropDefault(NNEvaluator.NN), ...
	NNEvaluator.GR, NNEvaluator.getPropDefault(NNEvaluator.GR), ...
	NNEvaluator.GR_PREDICTION, NNEvaluator.getPropDefault(NNEvaluator.GR_PREDICTION), ...
	NNEvaluator.FEATURE_MAP, NNEvaluator.getPropDefault(NNEvaluator.FEATURE_MAP) ...
	);
warning('on', 'BRAPH2:NNEvaluator')

for prop = 1:1:NNEvaluator.getPropNumber()
	TAG = upper(NNEvaluator.getPropTag(prop));
	switch NNEvaluator.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nne.getr(prop), NNEvaluator.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNEvaluator.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNEvaluator.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nne.getr(TAG), NNEvaluator.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNEvaluator.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNEvaluator.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nne.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNEvaluator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNEvaluator.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nne.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNEvaluator.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNEvaluator.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNEvaluator')
nne_0 = NNEvaluator( ...
	NNEvaluator.ID, NNEvaluator.getPropDefault(NNEvaluator.ID), ...
	NNEvaluator.LABEL, NNEvaluator.getPropDefault(NNEvaluator.LABEL), ...
	NNEvaluator.NOTES, NNEvaluator.getPropDefault(NNEvaluator.NOTES), ...
	NNEvaluator.NN, NNEvaluator.getPropDefault(NNEvaluator.NN), ...
	NNEvaluator.GR, NNEvaluator.getPropDefault(NNEvaluator.GR), ...
	NNEvaluator.GR_PREDICTION, NNEvaluator.getPropDefault(NNEvaluator.GR_PREDICTION), ...
	NNEvaluator.FEATURE_MAP, NNEvaluator.getPropDefault(NNEvaluator.FEATURE_MAP) ...
	);
warning('on', 'BRAPH2:NNEvaluator')

nne_1 = NNEvaluator( ...
	NNEvaluator.ID, Callback('EL', nne_0, 'PROP', 1), ...
	NNEvaluator.LABEL, NNEvaluator.getPropDefault(NNEvaluator.LABEL), ...
	NNEvaluator.NOTES, NNEvaluator.getPropDefault(NNEvaluator.NOTES), ...
	NNEvaluator.NN, Callback('EL', nne_0, 'PROP', 4), ...
	NNEvaluator.GR, Callback('EL', nne_0, 'PROP', 5), ...
	NNEvaluator.GR_PREDICTION, NoValue(), ...
	NNEvaluator.FEATURE_MAP, NoValue() ...
	);
	
prop_number = NNEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNEvaluator.getPropTag(prop));
	switch NNEvaluator.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nne_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nne_1.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nne_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nne_2 = NNEvaluator( ...
	NNEvaluator.ID, Callback('EL', nne_1, 'PROP', 1), ...
	NNEvaluator.LABEL, NNEvaluator.getPropDefault(NNEvaluator.LABEL), ...
	NNEvaluator.NOTES, NNEvaluator.getPropDefault(NNEvaluator.NOTES), ...
	NNEvaluator.NN, Callback('EL', nne_1, 'PROP', 4), ...
	NNEvaluator.GR, Callback('EL', nne_1, 'PROP', 5), ...
	NNEvaluator.GR_PREDICTION, NoValue(), ...
	NNEvaluator.FEATURE_MAP, NoValue() ...
	);
	
prop_number = NNEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNEvaluator.getPropTag(prop));
	switch NNEvaluator.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nne_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nne_2.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nne_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nne_3 = NNEvaluator( ...
	NNEvaluator.ID, Callback('EL', nne_2, 'PROP', 1), ...
	NNEvaluator.LABEL, NNEvaluator.getPropDefault(NNEvaluator.LABEL), ...
	NNEvaluator.NOTES, NNEvaluator.getPropDefault(NNEvaluator.NOTES), ...
	NNEvaluator.NN, Callback('EL', nne_2, 'PROP', 4), ...
	NNEvaluator.GR, Callback('EL', nne_2, 'PROP', 5), ...
	NNEvaluator.GR_PREDICTION, NoValue(), ...
	NNEvaluator.FEATURE_MAP, NoValue() ...
	);
	
prop_number = NNEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNEvaluator.getPropTag(prop));
	switch NNEvaluator.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nne_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nne_3.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nne_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNEvaluator')
nne = NNEvaluator( ...
	NNEvaluator.ID, NNEvaluator.getPropDefault(NNEvaluator.ID), ...
	NNEvaluator.LABEL, NNEvaluator.getPropDefault(NNEvaluator.LABEL), ...
	NNEvaluator.NOTES, NNEvaluator.getPropDefault(NNEvaluator.NOTES), ...
	NNEvaluator.NN, NNEvaluator.getPropDefault(NNEvaluator.NN), ...
	NNEvaluator.GR, NNEvaluator.getPropDefault(NNEvaluator.GR), ...
	NNEvaluator.GR_PREDICTION, NNEvaluator.getPropDefault(NNEvaluator.GR_PREDICTION), ...
	NNEvaluator.FEATURE_MAP, NNEvaluator.getPropDefault(NNEvaluator.FEATURE_MAP) ...
	);
warning('on', 'BRAPH2:NNEvaluator')

prop_number = NNEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNEvaluator.getPropTag(prop));
	switch NNEvaluator.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nne.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nne.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nne.getPropSettings(prop))
				assert( ...
					nne.checkFormat(nne.getPropFormat(prop), nne.get(prop)), ...
					[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
					['NNEvaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nne.checkFormat(nne.getPropFormat(prop), nne.get(prop), nne.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
					['NNEvaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNEvaluator')
nne = NNEvaluator( ...
	NNEvaluator.ID, NNEvaluator.getPropDefault(NNEvaluator.ID), ...
	NNEvaluator.LABEL, NNEvaluator.getPropDefault(NNEvaluator.LABEL), ...
	NNEvaluator.NOTES, NNEvaluator.getPropDefault(NNEvaluator.NOTES), ...
	NNEvaluator.NN, NNEvaluator.getPropDefault(NNEvaluator.NN), ...
	NNEvaluator.GR, NNEvaluator.getPropDefault(NNEvaluator.GR), ...
	NNEvaluator.GR_PREDICTION, NNEvaluator.getPropDefault(NNEvaluator.GR_PREDICTION), ...
	NNEvaluator.FEATURE_MAP, NNEvaluator.getPropDefault(NNEvaluator.FEATURE_MAP) ...
	);
warning('on', 'BRAPH2:NNEvaluator')

for prop = 1:1:NNEvaluator.getPropNumber()
	TAG = upper(NNEvaluator.getPropTag(prop));
	switch NNEvaluator.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nne.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nne.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nne.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nne.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nne.checkFormat(nne.getPropFormat(prop), nne.getr(prop),nne.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNEvaluator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

