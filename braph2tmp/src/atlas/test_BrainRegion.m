%TEST_BRAINREGION

%% Test 1.1: Instantiation - empty

br = BrainRegion();

prop_number = BrainRegion.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BrainRegion.getPropTag(prop));
	assert( ...
		isa(br.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
		['BrainRegion.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in BrainRegion.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(br.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
		['BrainRegion.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in BrainRegion.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:BrainRegion')
br = BrainRegion( ...
	BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
	BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
	BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
	BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
	BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
	BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
	);
warning('on', 'BRAPH2:BrainRegion')

for prop = 1:1:BrainRegion.getPropNumber()
	TAG = upper(BrainRegion.getPropTag(prop));
	switch BrainRegion.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(br.getr(prop), BrainRegion.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by BrainRegion.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in BrainRegion.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(br.getr(TAG), BrainRegion.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by BrainRegion.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in BrainRegion.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(br.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['Being a result, BrainRegion.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in BrainRegion.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(br.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['Being a result, BrainRegion.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in BrainRegion.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:BrainRegion')
br_0 = BrainRegion( ...
	BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
	BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
	BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
	BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
	BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
	BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
	);
warning('on', 'BRAPH2:BrainRegion')

br_1 = BrainRegion( ...
	BrainRegion.ID, Callback('EL', br_0, 'PROP', 1), ...
	BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
	BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
	BrainRegion.X, Callback('EL', br_0, 'PROP', 4), ...
	BrainRegion.Y, Callback('EL', br_0, 'PROP', 5), ...
	BrainRegion.Z, Callback('EL', br_0, 'PROP', 6) ...
	);
	
prop_number = BrainRegion.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BrainRegion.getPropTag(prop));
	switch BrainRegion.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(br_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(br_1.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(br_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
br_2 = BrainRegion( ...
	BrainRegion.ID, Callback('EL', br_1, 'PROP', 1), ...
	BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
	BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
	BrainRegion.X, Callback('EL', br_1, 'PROP', 4), ...
	BrainRegion.Y, Callback('EL', br_1, 'PROP', 5), ...
	BrainRegion.Z, Callback('EL', br_1, 'PROP', 6) ...
	);
	
prop_number = BrainRegion.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BrainRegion.getPropTag(prop));
	switch BrainRegion.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(br_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(br_2.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(br_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
br_3 = BrainRegion( ...
	BrainRegion.ID, Callback('EL', br_2, 'PROP', 1), ...
	BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
	BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
	BrainRegion.X, Callback('EL', br_2, 'PROP', 4), ...
	BrainRegion.Y, Callback('EL', br_2, 'PROP', 5), ...
	BrainRegion.Z, Callback('EL', br_2, 'PROP', 6) ...
	);
	
prop_number = BrainRegion.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BrainRegion.getPropTag(prop));
	switch BrainRegion.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(br_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(br_3.get(prop), br_0.get(prop)) && ~isa(br_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(br_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:BrainRegion')
br = BrainRegion( ...
	BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
	BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
	BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
	BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
	BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
	BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
	);
warning('on', 'BRAPH2:BrainRegion')

prop_number = BrainRegion.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BrainRegion.getPropTag(prop));
	switch BrainRegion.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(br.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(br.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(br.getPropSettings(prop))
				assert( ...
					br.checkFormat(br.getPropFormat(prop), br.get(prop)), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
					['BrainRegion.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					br.checkFormat(br.getPropFormat(prop), br.get(prop), br.getPropSettings(prop)), ...
					[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
					['BrainRegion.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:BrainRegion')
br = BrainRegion( ...
	BrainRegion.ID, BrainRegion.getPropDefault(BrainRegion.ID), ...
	BrainRegion.LABEL, BrainRegion.getPropDefault(BrainRegion.LABEL), ...
	BrainRegion.NOTES, BrainRegion.getPropDefault(BrainRegion.NOTES), ...
	BrainRegion.X, BrainRegion.getPropDefault(BrainRegion.X), ...
	BrainRegion.Y, BrainRegion.getPropDefault(BrainRegion.Y), ...
	BrainRegion.Z, BrainRegion.getPropDefault(BrainRegion.Z) ...
	);
warning('on', 'BRAPH2:BrainRegion')

for prop = 1:1:BrainRegion.getPropNumber()
	TAG = upper(BrainRegion.getPropTag(prop));
	switch BrainRegion.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(br.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(br.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(br.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(br.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				br.checkFormat(br.getPropFormat(prop), br.getr(prop),br.getPropSettings(prop)), ...
				[BRAPH2.STR ':BrainRegion:' BRAPH2.BUG_FUNC], ...
				['BrainRegion.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Basic functions

br = BrainRegion('ID', 'BR1', 'LABEL', 'brain region', 'Notes', 'Notes on brain region.', 'X', -1, 'Y', -2, 'Z', -3);

assert(ischar(br.tostring()), ...
    [BRAPH2.STR ':BrainRegion:' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.tostring() must return a string.')

%% Test 6: Get methods

id = 'BR1';
label = 'brain region 1';
notes = 'Notes on brain region 1.';
x = 1;
y = 2;
z = 3;
br = BrainRegion('ID', id, 'LABEL', label, 'NOTES', notes, 'X', x, 'Y', y, 'Z', z);

assert(isequal(br.get('ID'), id), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.get() does not work.')
assert(isequal(br.get('LABEL'), label), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.get() does not work.')
assert(isequal(br.get('NOTES'), notes), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.get() does not work.')
assert(isequal(br.get('X'), x), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.get() does not work.')
assert(isequal(br.get('Y'), y), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.get() does not work.')
assert(isequal(br.get('Z'), z), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.get() does not work.')

%% Test 7: Set methods

br = BrainRegion();
br.set('ID', 'br2');
br.set('LABEL', 'lab2');
br.set('NOTES', 'notes2');
br.set('X', 1);
br.set('Y', 2);
br.set('Z', 3);

assert(isequal(br.get('ID'), 'br2'), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.set() does not work.')
assert(isequal(br.get('LABEL'), 'lab2'), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.set() does not work.')
assert(isequal(br.get('NOTES'), 'notes2'), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.set() does not work.')
assert(isequal(br.get('X'), 1), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.set() does not work.')
assert(isequal(br.get('Y'), 2), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.set() does not work.')
assert(isequal(br.get('Z'), 3), ...
    [BRAPH2.STR ':' class(br) ':' BRAPH2.WRONG_OUTPUT], ...
    'BrainRegion.set() does not work.')

