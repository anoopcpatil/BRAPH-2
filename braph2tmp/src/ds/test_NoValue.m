%TEST_NOVALUE

%% Test 1.1: Instantiation - empty

nv = NoValue();

prop_number = NoValue.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NoValue.getPropTag(prop));
	assert( ...
		isa(nv.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
		['NoValue.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NoValue.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nv.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
		['NoValue.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NoValue.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NoValue')
nv = NoValue( ...
	);
warning('on', 'BRAPH2:NoValue')

for prop = 1:1:NoValue.getPropNumber()
	TAG = upper(NoValue.getPropTag(prop));
	switch NoValue.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nv.getr(prop), NoValue.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NoValue.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NoValue.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nv.getr(TAG), NoValue.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NoValue.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NoValue.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nv.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['Being a result, NoValue.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NoValue.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nv.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['Being a result, NoValue.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NoValue.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NoValue')
nv_0 = NoValue( ...
	);
warning('on', 'BRAPH2:NoValue')

nv_1 = NoValue( ...
	);
	
prop_number = NoValue.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NoValue.getPropTag(prop));
	switch NoValue.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nv_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nv_1.get(prop), nv_0.get(prop)) && ~isa(nv_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nv_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nv_2 = NoValue( ...
	);
	
prop_number = NoValue.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NoValue.getPropTag(prop));
	switch NoValue.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nv_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nv_2.get(prop), nv_0.get(prop)) && ~isa(nv_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nv_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nv_3 = NoValue( ...
	);
	
prop_number = NoValue.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NoValue.getPropTag(prop));
	switch NoValue.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nv_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nv_3.get(prop), nv_0.get(prop)) && ~isa(nv_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nv_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NoValue')
nv = NoValue( ...
	);
warning('on', 'BRAPH2:NoValue')

prop_number = NoValue.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NoValue.getPropTag(prop));
	switch NoValue.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nv.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nv.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nv.getPropSettings(prop))
				assert( ...
					nv.checkFormat(nv.getPropFormat(prop), nv.get(prop)), ...
					[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
					['NoValue.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nv.checkFormat(nv.getPropFormat(prop), nv.get(prop), nv.getPropSettings(prop)), ...
					[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
					['NoValue.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NoValue')
nv = NoValue( ...
	);
warning('on', 'BRAPH2:NoValue')

for prop = 1:1:NoValue.getPropNumber()
	TAG = upper(NoValue.getPropTag(prop));
	switch NoValue.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nv.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nv.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nv.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nv.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nv.checkFormat(nv.getPropFormat(prop), nv.getr(prop),nv.getPropSettings(prop)), ...
				[BRAPH2.STR ':NoValue:' BRAPH2.BUG_FUNC], ...
				['NoValue.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Copy

nv = NoValue.getNoValue();

nv_copy = nv.copy();

assert( ...
    nv == nv_copy, ...
    [BRAPH2.STR ':NoValue:' BRAPH2.BUG_COPY], ...
    ['The copy of a NoValue must return a pointer to the persistent NoValue.getNoValue().'] ...
    )

%% Test 6: Clone

nv = NoValue.getNoValue();

nv_clone = nv.clone();

assert( ...
    nv == nv_clone, ...
    [BRAPH2.STR ':NoValue:' BRAPH2.BUG_CLONE], ...
    ['The clone of a NoValue must return a pointer to the persistent NoValue.getNoValue().'] ...
    )

%% Test 7: JSON

nv = NoValue.getNoValue();

json = nv.encodeJSON();

nv_json = NoValue.decodeJSON(json);

assert( ...
    nv == nv_json, ...
    [BRAPH2.STR ':NoValue:' BRAPH2.BUG_JSON], ...
    ['The encoding/decoding of a NoValue must return a pointer to the persistent NoValue.getNoValue().'] ...
    )

