%TEST_ETD1

%% Test 1.1: Instantiation - empty

et = ETD1();

prop_number = ETD1.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETD1.getPropTag(prop));
	assert( ...
		isa(et.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
		['ETD1.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ETD1.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(et.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
		['ETD1.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ETD1.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:ETD1')
et = ETD1( ...
	ETD1.UNO, ETD1.getPropDefault(ETD1.UNO), ...
	ETD1.DUE, ETD1.getPropDefault(ETD1.DUE), ...
	ETD1.TRE, ETD1.getPropDefault(ETD1.TRE) ...
	);
warning('on', 'BRAPH2:ETD1')

for prop = 1:1:ETD1.getPropNumber()
	TAG = upper(ETD1.getPropTag(prop));
	switch ETD1.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(et.getr(prop), ETD1.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by ETD1.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ETD1.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(et.getr(TAG), ETD1.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by ETD1.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ETD1.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(et.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['Being a result, ETD1.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ETD1.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(et.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['Being a result, ETD1.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ETD1.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:ETD1')
et_0 = ETD1( ...
	ETD1.UNO, ETD1.getPropDefault(ETD1.UNO), ...
	ETD1.DUE, ETD1.getPropDefault(ETD1.DUE), ...
	ETD1.TRE, ETD1.getPropDefault(ETD1.TRE) ...
	);
warning('on', 'BRAPH2:ETD1')

et_1 = ETD1( ...
	ETD1.UNO, Callback('EL', et_0, 'PROP', 1), ...
	ETD1.DUE, Callback('EL', et_0, 'PROP', 2), ...
	ETD1.TRE, Callback('EL', et_0, 'PROP', 3) ...
	);
	
prop_number = ETD1.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETD1.getPropTag(prop));
	switch ETD1.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(et_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(et_1.get(prop), et_0.get(prop)) && ~isa(et_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(et_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
et_2 = ETD1( ...
	ETD1.UNO, Callback('EL', et_1, 'PROP', 1), ...
	ETD1.DUE, Callback('EL', et_1, 'PROP', 2), ...
	ETD1.TRE, Callback('EL', et_1, 'PROP', 3) ...
	);
	
prop_number = ETD1.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETD1.getPropTag(prop));
	switch ETD1.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(et_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(et_2.get(prop), et_0.get(prop)) && ~isa(et_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(et_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
et_3 = ETD1( ...
	ETD1.UNO, Callback('EL', et_2, 'PROP', 1), ...
	ETD1.DUE, Callback('EL', et_2, 'PROP', 2), ...
	ETD1.TRE, Callback('EL', et_2, 'PROP', 3) ...
	);
	
prop_number = ETD1.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETD1.getPropTag(prop));
	switch ETD1.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(et_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(et_3.get(prop), et_0.get(prop)) && ~isa(et_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(et_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:ETD1')
et = ETD1( ...
	ETD1.UNO, ETD1.getPropDefault(ETD1.UNO), ...
	ETD1.DUE, ETD1.getPropDefault(ETD1.DUE), ...
	ETD1.TRE, ETD1.getPropDefault(ETD1.TRE) ...
	);
warning('on', 'BRAPH2:ETD1')

prop_number = ETD1.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETD1.getPropTag(prop));
	switch ETD1.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(et.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(et.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(et.getPropSettings(prop))
				assert( ...
					et.checkFormat(et.getPropFormat(prop), et.get(prop)), ...
					[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
					['ETD1.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					et.checkFormat(et.getPropFormat(prop), et.get(prop), et.getPropSettings(prop)), ...
					[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
					['ETD1.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:ETD1')
et = ETD1( ...
	ETD1.UNO, ETD1.getPropDefault(ETD1.UNO), ...
	ETD1.DUE, ETD1.getPropDefault(ETD1.DUE), ...
	ETD1.TRE, ETD1.getPropDefault(ETD1.TRE) ...
	);
warning('on', 'BRAPH2:ETD1')

for prop = 1:1:ETD1.getPropNumber()
	TAG = upper(ETD1.getPropTag(prop));
	switch ETD1.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(et.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(et.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(et.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(et.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				et.checkFormat(et.getPropFormat(prop), et.getr(prop),et.getPropSettings(prop)), ...
				[BRAPH2.STR ':ETD1:' BRAPH2.BUG_FUNC], ...
				['ETD1.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Multiple values

et = ETD1();

assert_with_error("varargin{1}.set('UNO', 1)", ...
    [BRAPH2.STR ':ETD1:' BRAPH2.WRONG_INPUT], ...
    et)

assert_with_error("varargin{1}.set('DUE', 2)", ...
    [BRAPH2.STR ':ETD1:' BRAPH2.WRONG_INPUT], ...
    et)

assert_with_error("varargin{1}.set('TRE', 3)", ...
    [BRAPH2.STR ':ETD1:' BRAPH2.WRONG_INPUT], ...
    et)

assert_with_error("varargin{1}.set('UNO', 1, 'DUE', 2, 'TRE', 3)", ...
    [BRAPH2.STR ':ETD1:' BRAPH2.WRONG_INPUT], ...
    et)

et.set('UNO', 3.14, 'DUE', 3.14, 'TRE', 3.14)

