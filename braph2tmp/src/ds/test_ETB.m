%TEST_ETB

%% Test 1.1: Instantiation - empty

et = ETB();

prop_number = ETB.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETB.getPropTag(prop));
	assert( ...
		isa(et.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
		['ETB.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ETB.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(et.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
		['ETB.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in ETB.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:ETB')
et = ETB( ...
	ETB.ID, ETB.getPropDefault(ETB.ID), ...
	ETB.PROP_EMPTY_M, ETB.getPropDefault(ETB.PROP_EMPTY_M), ...
	ETB.PROP_STRING_P, ETB.getPropDefault(ETB.PROP_STRING_P), ...
	ETB.PROP_LOGICAL_M, ETB.getPropDefault(ETB.PROP_LOGICAL_M), ...
	ETB.PROP_OPTION_M, ETB.getPropDefault(ETB.PROP_OPTION_M), ...
	ETB.PROP_CLASS_M, ETB.getPropDefault(ETB.PROP_CLASS_M), ...
	ETB.PROP_CLASSLIST_M, ETB.getPropDefault(ETB.PROP_CLASSLIST_M), ...
	ETB.PROP_ITEM_M, ETB.getPropDefault(ETB.PROP_ITEM_M), ...
	ETB.PROP_ITEMLIST_M, ETB.getPropDefault(ETB.PROP_ITEMLIST_M), ...
	ETB.PROP_IDICT_M, ETB.getPropDefault(ETB.PROP_IDICT_M), ...
	ETB.PROP_SCALAR_M, ETB.getPropDefault(ETB.PROP_SCALAR_M), ...
	ETB.PROP_RVECTOR_M, ETB.getPropDefault(ETB.PROP_RVECTOR_M), ...
	ETB.PROP_CVECTOR_M, ETB.getPropDefault(ETB.PROP_CVECTOR_M), ...
	ETB.PROP_MATRIX_M, ETB.getPropDefault(ETB.PROP_MATRIX_M), ...
	ETB.PROP_SMATRIX_M, ETB.getPropDefault(ETB.PROP_SMATRIX_M), ...
	ETB.PROP_CELL_M, ETB.getPropDefault(ETB.PROP_CELL_M) ...
	);
warning('on', 'BRAPH2:ETB')

for prop = 1:1:ETB.getPropNumber()
	TAG = upper(ETB.getPropTag(prop));
	switch ETB.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(et.getr(prop), ETB.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by ETB.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ETB.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(et.getr(TAG), ETB.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by ETB.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in ETB.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(et.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['Being a result, ETB.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ETB.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(et.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['Being a result, ETB.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in ETB.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:ETB')
et_0 = ETB( ...
	ETB.ID, ETB.getPropDefault(ETB.ID), ...
	ETB.PROP_EMPTY_M, ETB.getPropDefault(ETB.PROP_EMPTY_M), ...
	ETB.PROP_STRING_P, ETB.getPropDefault(ETB.PROP_STRING_P), ...
	ETB.PROP_LOGICAL_M, ETB.getPropDefault(ETB.PROP_LOGICAL_M), ...
	ETB.PROP_OPTION_M, ETB.getPropDefault(ETB.PROP_OPTION_M), ...
	ETB.PROP_CLASS_M, ETB.getPropDefault(ETB.PROP_CLASS_M), ...
	ETB.PROP_CLASSLIST_M, ETB.getPropDefault(ETB.PROP_CLASSLIST_M), ...
	ETB.PROP_ITEM_M, ETB.getPropDefault(ETB.PROP_ITEM_M), ...
	ETB.PROP_ITEMLIST_M, ETB.getPropDefault(ETB.PROP_ITEMLIST_M), ...
	ETB.PROP_IDICT_M, ETB.getPropDefault(ETB.PROP_IDICT_M), ...
	ETB.PROP_SCALAR_M, ETB.getPropDefault(ETB.PROP_SCALAR_M), ...
	ETB.PROP_RVECTOR_M, ETB.getPropDefault(ETB.PROP_RVECTOR_M), ...
	ETB.PROP_CVECTOR_M, ETB.getPropDefault(ETB.PROP_CVECTOR_M), ...
	ETB.PROP_MATRIX_M, ETB.getPropDefault(ETB.PROP_MATRIX_M), ...
	ETB.PROP_SMATRIX_M, ETB.getPropDefault(ETB.PROP_SMATRIX_M), ...
	ETB.PROP_CELL_M, ETB.getPropDefault(ETB.PROP_CELL_M) ...
	);
warning('on', 'BRAPH2:ETB')

et_1 = ETB( ...
	ETB.ID, Callback('EL', et_0, 'PROP', 1), ...
	ETB.PROP_EMPTY_M, ETB.getPropDefault(ETB.PROP_EMPTY_M), ...
	ETB.PROP_STRING_P, Callback('EL', et_0, 'PROP', 3), ...
	ETB.PROP_LOGICAL_M, ETB.getPropDefault(ETB.PROP_LOGICAL_M), ...
	ETB.PROP_OPTION_M, ETB.getPropDefault(ETB.PROP_OPTION_M), ...
	ETB.PROP_CLASS_M, ETB.getPropDefault(ETB.PROP_CLASS_M), ...
	ETB.PROP_CLASSLIST_M, ETB.getPropDefault(ETB.PROP_CLASSLIST_M), ...
	ETB.PROP_ITEM_M, ETB.getPropDefault(ETB.PROP_ITEM_M), ...
	ETB.PROP_ITEMLIST_M, ETB.getPropDefault(ETB.PROP_ITEMLIST_M), ...
	ETB.PROP_IDICT_M, ETB.getPropDefault(ETB.PROP_IDICT_M), ...
	ETB.PROP_SCALAR_M, ETB.getPropDefault(ETB.PROP_SCALAR_M), ...
	ETB.PROP_RVECTOR_M, ETB.getPropDefault(ETB.PROP_RVECTOR_M), ...
	ETB.PROP_CVECTOR_M, ETB.getPropDefault(ETB.PROP_CVECTOR_M), ...
	ETB.PROP_MATRIX_M, ETB.getPropDefault(ETB.PROP_MATRIX_M), ...
	ETB.PROP_SMATRIX_M, ETB.getPropDefault(ETB.PROP_SMATRIX_M), ...
	ETB.PROP_CELL_M, ETB.getPropDefault(ETB.PROP_CELL_M) ...
	);
	
prop_number = ETB.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETB.getPropTag(prop));
	switch ETB.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(et_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(et_1.get(prop), et_0.get(prop)) && ~isa(et_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(et_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
et_2 = ETB( ...
	ETB.ID, Callback('EL', et_1, 'PROP', 1), ...
	ETB.PROP_EMPTY_M, ETB.getPropDefault(ETB.PROP_EMPTY_M), ...
	ETB.PROP_STRING_P, Callback('EL', et_1, 'PROP', 3), ...
	ETB.PROP_LOGICAL_M, ETB.getPropDefault(ETB.PROP_LOGICAL_M), ...
	ETB.PROP_OPTION_M, ETB.getPropDefault(ETB.PROP_OPTION_M), ...
	ETB.PROP_CLASS_M, ETB.getPropDefault(ETB.PROP_CLASS_M), ...
	ETB.PROP_CLASSLIST_M, ETB.getPropDefault(ETB.PROP_CLASSLIST_M), ...
	ETB.PROP_ITEM_M, ETB.getPropDefault(ETB.PROP_ITEM_M), ...
	ETB.PROP_ITEMLIST_M, ETB.getPropDefault(ETB.PROP_ITEMLIST_M), ...
	ETB.PROP_IDICT_M, ETB.getPropDefault(ETB.PROP_IDICT_M), ...
	ETB.PROP_SCALAR_M, ETB.getPropDefault(ETB.PROP_SCALAR_M), ...
	ETB.PROP_RVECTOR_M, ETB.getPropDefault(ETB.PROP_RVECTOR_M), ...
	ETB.PROP_CVECTOR_M, ETB.getPropDefault(ETB.PROP_CVECTOR_M), ...
	ETB.PROP_MATRIX_M, ETB.getPropDefault(ETB.PROP_MATRIX_M), ...
	ETB.PROP_SMATRIX_M, ETB.getPropDefault(ETB.PROP_SMATRIX_M), ...
	ETB.PROP_CELL_M, ETB.getPropDefault(ETB.PROP_CELL_M) ...
	);
	
prop_number = ETB.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETB.getPropTag(prop));
	switch ETB.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(et_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(et_2.get(prop), et_0.get(prop)) && ~isa(et_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(et_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
et_3 = ETB( ...
	ETB.ID, Callback('EL', et_2, 'PROP', 1), ...
	ETB.PROP_EMPTY_M, ETB.getPropDefault(ETB.PROP_EMPTY_M), ...
	ETB.PROP_STRING_P, Callback('EL', et_2, 'PROP', 3), ...
	ETB.PROP_LOGICAL_M, ETB.getPropDefault(ETB.PROP_LOGICAL_M), ...
	ETB.PROP_OPTION_M, ETB.getPropDefault(ETB.PROP_OPTION_M), ...
	ETB.PROP_CLASS_M, ETB.getPropDefault(ETB.PROP_CLASS_M), ...
	ETB.PROP_CLASSLIST_M, ETB.getPropDefault(ETB.PROP_CLASSLIST_M), ...
	ETB.PROP_ITEM_M, ETB.getPropDefault(ETB.PROP_ITEM_M), ...
	ETB.PROP_ITEMLIST_M, ETB.getPropDefault(ETB.PROP_ITEMLIST_M), ...
	ETB.PROP_IDICT_M, ETB.getPropDefault(ETB.PROP_IDICT_M), ...
	ETB.PROP_SCALAR_M, ETB.getPropDefault(ETB.PROP_SCALAR_M), ...
	ETB.PROP_RVECTOR_M, ETB.getPropDefault(ETB.PROP_RVECTOR_M), ...
	ETB.PROP_CVECTOR_M, ETB.getPropDefault(ETB.PROP_CVECTOR_M), ...
	ETB.PROP_MATRIX_M, ETB.getPropDefault(ETB.PROP_MATRIX_M), ...
	ETB.PROP_SMATRIX_M, ETB.getPropDefault(ETB.PROP_SMATRIX_M), ...
	ETB.PROP_CELL_M, ETB.getPropDefault(ETB.PROP_CELL_M) ...
	);
	
prop_number = ETB.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETB.getPropTag(prop));
	switch ETB.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(et_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(et_3.get(prop), et_0.get(prop)) && ~isa(et_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(et_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:ETB')
et = ETB( ...
	ETB.ID, ETB.getPropDefault(ETB.ID), ...
	ETB.PROP_EMPTY_M, ETB.getPropDefault(ETB.PROP_EMPTY_M), ...
	ETB.PROP_STRING_P, ETB.getPropDefault(ETB.PROP_STRING_P), ...
	ETB.PROP_LOGICAL_M, ETB.getPropDefault(ETB.PROP_LOGICAL_M), ...
	ETB.PROP_OPTION_M, ETB.getPropDefault(ETB.PROP_OPTION_M), ...
	ETB.PROP_CLASS_M, ETB.getPropDefault(ETB.PROP_CLASS_M), ...
	ETB.PROP_CLASSLIST_M, ETB.getPropDefault(ETB.PROP_CLASSLIST_M), ...
	ETB.PROP_ITEM_M, ETB.getPropDefault(ETB.PROP_ITEM_M), ...
	ETB.PROP_ITEMLIST_M, ETB.getPropDefault(ETB.PROP_ITEMLIST_M), ...
	ETB.PROP_IDICT_M, ETB.getPropDefault(ETB.PROP_IDICT_M), ...
	ETB.PROP_SCALAR_M, ETB.getPropDefault(ETB.PROP_SCALAR_M), ...
	ETB.PROP_RVECTOR_M, ETB.getPropDefault(ETB.PROP_RVECTOR_M), ...
	ETB.PROP_CVECTOR_M, ETB.getPropDefault(ETB.PROP_CVECTOR_M), ...
	ETB.PROP_MATRIX_M, ETB.getPropDefault(ETB.PROP_MATRIX_M), ...
	ETB.PROP_SMATRIX_M, ETB.getPropDefault(ETB.PROP_SMATRIX_M), ...
	ETB.PROP_CELL_M, ETB.getPropDefault(ETB.PROP_CELL_M) ...
	);
warning('on', 'BRAPH2:ETB')

prop_number = ETB.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(ETB.getPropTag(prop));
	switch ETB.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(et.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(et.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(et.getPropSettings(prop))
				assert( ...
					et.checkFormat(et.getPropFormat(prop), et.get(prop)), ...
					[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
					['ETB.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					et.checkFormat(et.getPropFormat(prop), et.get(prop), et.getPropSettings(prop)), ...
					[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
					['ETB.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:ETB')
et = ETB( ...
	ETB.ID, ETB.getPropDefault(ETB.ID), ...
	ETB.PROP_EMPTY_M, ETB.getPropDefault(ETB.PROP_EMPTY_M), ...
	ETB.PROP_STRING_P, ETB.getPropDefault(ETB.PROP_STRING_P), ...
	ETB.PROP_LOGICAL_M, ETB.getPropDefault(ETB.PROP_LOGICAL_M), ...
	ETB.PROP_OPTION_M, ETB.getPropDefault(ETB.PROP_OPTION_M), ...
	ETB.PROP_CLASS_M, ETB.getPropDefault(ETB.PROP_CLASS_M), ...
	ETB.PROP_CLASSLIST_M, ETB.getPropDefault(ETB.PROP_CLASSLIST_M), ...
	ETB.PROP_ITEM_M, ETB.getPropDefault(ETB.PROP_ITEM_M), ...
	ETB.PROP_ITEMLIST_M, ETB.getPropDefault(ETB.PROP_ITEMLIST_M), ...
	ETB.PROP_IDICT_M, ETB.getPropDefault(ETB.PROP_IDICT_M), ...
	ETB.PROP_SCALAR_M, ETB.getPropDefault(ETB.PROP_SCALAR_M), ...
	ETB.PROP_RVECTOR_M, ETB.getPropDefault(ETB.PROP_RVECTOR_M), ...
	ETB.PROP_CVECTOR_M, ETB.getPropDefault(ETB.PROP_CVECTOR_M), ...
	ETB.PROP_MATRIX_M, ETB.getPropDefault(ETB.PROP_MATRIX_M), ...
	ETB.PROP_SMATRIX_M, ETB.getPropDefault(ETB.PROP_SMATRIX_M), ...
	ETB.PROP_CELL_M, ETB.getPropDefault(ETB.PROP_CELL_M) ...
	);
warning('on', 'BRAPH2:ETB')

for prop = 1:1:ETB.getPropNumber()
	TAG = upper(ETB.getPropTag(prop));
	switch ETB.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(et.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(et.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(et.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(et.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				et.checkFormat(et.getPropFormat(prop), et.getr(prop),et.getPropSettings(prop)), ...
				[BRAPH2.STR ':ETB:' BRAPH2.BUG_FUNC], ...
				['ETB.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: JSON

et = ETB();

et.set('PROP_EMPTY_M', []) % 1
et.set('PROP_STRING_P', 'a new ''''string') % 2
et.set('PROP_LOGICAL_M', true) % 3
et.set('PROP_OPTION_M', 'two') % 4
et.set('PROP_CLASS_M', 'ETB') % 5
et.set('PROP_CLASSLIST_M', {'ETB'}) % 6
et.set('PROP_ITEM_M', ETB()) % 7
et.set('PROP_ITEMLIST_M', {ETB(), ETB(), ETB(), ETB(), ETB()}) % 8
et.set('PROP_IDICT_M', IndexedDictionary('ID', 'dict M', ...
    'it_class', 'ETB', ...
    'it_key', 3, ...
    'it_list', { ...
        ETB('PROP_STRING_P', '1') ...
        ETB('PROP_STRING_P', '2') ...
        ETB('PROP_STRING_P', '3') ...
        ETB('PROP_STRING_P', '4') ...
        ETB('PROP_STRING_P', '5') ...
        ETB('PROP_STRING_P', '6') ...
        } ...
    )) % 9 
et.set('PROP_SCALAR_M', 3.14) % 10
et.set('PROP_RVECTOR_M', [1:1:10]) % 11
et.set('PROP_CVECTOR_M', [1:1:10]') % 12
et.set('PROP_MATRIX_M', [1:1:4]' * [1:1:3]) % 13
et.set('PROP_SMATRIX_M', eye(10)) % 14
et.set('PROP_CELL_M', {ones(2), ones(3); ones(4), 1}) % 15

[json, struct, el_list] = encodeJSON(et);

% json = regexprep(json, '{"class":', '\n{"class":'); 
% json = regexprep(json, ',"props":[{', ',"props":[\n\t{');
% json = regexprep(json, '},{', '},{\n\t');
% json = regexprep(json, '"prop":', '\n\t"prop":');
% json = regexprep(json, '"tag":', '\n\t"tag":');
% json = regexprep(json, '"value":', '\n\t"value":');
% json = regexprep(json, ',"seed":', ',\n\t"seed":');
% json = regexprep(json, ',"locked":', ',\n\t"locked":');
% json = regexprep(json, ',"checked":', ',\n\t"checked":');
% json = regexprep(json, '},{', '\n\t},{');
% disp(json)

[et_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);

assert(isequal(et_dec, et))

