%TEST_NNCLASSIFIERDATASPLIT

%% Test 1.1: Instantiation - empty

nnds = NNClassifierDataSplit();

prop_number = NNClassifierDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierDataSplit.getPropTag(prop));
	assert( ...
		isa(nnds.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
		['NNClassifierDataSplit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNClassifierDataSplit.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nnds.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
		['NNClassifierDataSplit.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNClassifierDataSplit.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNClassifierDataSplit')
nnds = NNClassifierDataSplit( ...
	NNClassifierDataSplit.ID, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.ID), ...
	NNClassifierDataSplit.LABEL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.LABEL), ...
	NNClassifierDataSplit.NOTES, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.NOTES), ...
	NNClassifierDataSplit.WAITBAR, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.WAITBAR), ...
	NNClassifierDataSplit.GR_TRAIN, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN), ...
	NNClassifierDataSplit.GR_VAL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL), ...
	NNClassifierDataSplit.FEATURE_MASK, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_MASK), ...
	NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNClassifierDataSplit.GR_TRAIN_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN_FS), ...
	NNClassifierDataSplit.GR_VAL_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL_FS), ...
	NNClassifierDataSplit.GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR1), ...
	NNClassifierDataSplit.GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR2), ...
	NNClassifierDataSplit.SPLIT_GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR1), ...
	NNClassifierDataSplit.SPLIT_GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR2) ...
	);
warning('on', 'BRAPH2:NNClassifierDataSplit')

for prop = 1:1:NNClassifierDataSplit.getPropNumber()
	TAG = upper(NNClassifierDataSplit.getPropTag(prop));
	switch NNClassifierDataSplit.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nnds.getr(prop), NNClassifierDataSplit.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNClassifierDataSplit.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNClassifierDataSplit.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nnds.getr(TAG), NNClassifierDataSplit.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNClassifierDataSplit.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNClassifierDataSplit.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nnds.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNClassifierDataSplit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNClassifierDataSplit.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nnds.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNClassifierDataSplit.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNClassifierDataSplit.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNClassifierDataSplit')
nnds_0 = NNClassifierDataSplit( ...
	NNClassifierDataSplit.ID, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.ID), ...
	NNClassifierDataSplit.LABEL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.LABEL), ...
	NNClassifierDataSplit.NOTES, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.NOTES), ...
	NNClassifierDataSplit.WAITBAR, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.WAITBAR), ...
	NNClassifierDataSplit.GR_TRAIN, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN), ...
	NNClassifierDataSplit.GR_VAL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL), ...
	NNClassifierDataSplit.FEATURE_MASK, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_MASK), ...
	NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNClassifierDataSplit.GR_TRAIN_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN_FS), ...
	NNClassifierDataSplit.GR_VAL_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL_FS), ...
	NNClassifierDataSplit.GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR1), ...
	NNClassifierDataSplit.GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR2), ...
	NNClassifierDataSplit.SPLIT_GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR1), ...
	NNClassifierDataSplit.SPLIT_GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR2) ...
	);
warning('on', 'BRAPH2:NNClassifierDataSplit')

nnds_1 = NNClassifierDataSplit( ...
	NNClassifierDataSplit.ID, Callback('EL', nnds_0, 'PROP', 1), ...
	NNClassifierDataSplit.LABEL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.LABEL), ...
	NNClassifierDataSplit.NOTES, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.NOTES), ...
	NNClassifierDataSplit.WAITBAR, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.WAITBAR), ...
	NNClassifierDataSplit.GR_TRAIN, NoValue(), ...
	NNClassifierDataSplit.GR_VAL, NoValue(), ...
	NNClassifierDataSplit.FEATURE_MASK, Callback('EL', nnds_0, 'PROP', 7), ...
	NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS, NoValue(), ...
	NNClassifierDataSplit.GR_TRAIN_FS, NoValue(), ...
	NNClassifierDataSplit.GR_VAL_FS, NoValue(), ...
	NNClassifierDataSplit.GR1, Callback('EL', nnds_0, 'PROP', 11), ...
	NNClassifierDataSplit.GR2, Callback('EL', nnds_0, 'PROP', 12), ...
	NNClassifierDataSplit.SPLIT_GR1, Callback('EL', nnds_0, 'PROP', 13), ...
	NNClassifierDataSplit.SPLIT_GR2, Callback('EL', nnds_0, 'PROP', 14) ...
	);
	
prop_number = NNClassifierDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierDataSplit.getPropTag(prop));
	switch NNClassifierDataSplit.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnds_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnds_1.get(prop), nnds_0.get(prop)) && ~isa(nnds_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnds_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nnds_2 = NNClassifierDataSplit( ...
	NNClassifierDataSplit.ID, Callback('EL', nnds_1, 'PROP', 1), ...
	NNClassifierDataSplit.LABEL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.LABEL), ...
	NNClassifierDataSplit.NOTES, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.NOTES), ...
	NNClassifierDataSplit.WAITBAR, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.WAITBAR), ...
	NNClassifierDataSplit.GR_TRAIN, NoValue(), ...
	NNClassifierDataSplit.GR_VAL, NoValue(), ...
	NNClassifierDataSplit.FEATURE_MASK, Callback('EL', nnds_1, 'PROP', 7), ...
	NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS, NoValue(), ...
	NNClassifierDataSplit.GR_TRAIN_FS, NoValue(), ...
	NNClassifierDataSplit.GR_VAL_FS, NoValue(), ...
	NNClassifierDataSplit.GR1, Callback('EL', nnds_1, 'PROP', 11), ...
	NNClassifierDataSplit.GR2, Callback('EL', nnds_1, 'PROP', 12), ...
	NNClassifierDataSplit.SPLIT_GR1, Callback('EL', nnds_1, 'PROP', 13), ...
	NNClassifierDataSplit.SPLIT_GR2, Callback('EL', nnds_1, 'PROP', 14) ...
	);
	
prop_number = NNClassifierDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierDataSplit.getPropTag(prop));
	switch NNClassifierDataSplit.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnds_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnds_2.get(prop), nnds_0.get(prop)) && ~isa(nnds_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnds_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nnds_3 = NNClassifierDataSplit( ...
	NNClassifierDataSplit.ID, Callback('EL', nnds_2, 'PROP', 1), ...
	NNClassifierDataSplit.LABEL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.LABEL), ...
	NNClassifierDataSplit.NOTES, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.NOTES), ...
	NNClassifierDataSplit.WAITBAR, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.WAITBAR), ...
	NNClassifierDataSplit.GR_TRAIN, NoValue(), ...
	NNClassifierDataSplit.GR_VAL, NoValue(), ...
	NNClassifierDataSplit.FEATURE_MASK, Callback('EL', nnds_2, 'PROP', 7), ...
	NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS, NoValue(), ...
	NNClassifierDataSplit.GR_TRAIN_FS, NoValue(), ...
	NNClassifierDataSplit.GR_VAL_FS, NoValue(), ...
	NNClassifierDataSplit.GR1, Callback('EL', nnds_2, 'PROP', 11), ...
	NNClassifierDataSplit.GR2, Callback('EL', nnds_2, 'PROP', 12), ...
	NNClassifierDataSplit.SPLIT_GR1, Callback('EL', nnds_2, 'PROP', 13), ...
	NNClassifierDataSplit.SPLIT_GR2, Callback('EL', nnds_2, 'PROP', 14) ...
	);
	
prop_number = NNClassifierDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierDataSplit.getPropTag(prop));
	switch NNClassifierDataSplit.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnds_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnds_3.get(prop), nnds_0.get(prop)) && ~isa(nnds_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnds_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNClassifierDataSplit')
nnds = NNClassifierDataSplit( ...
	NNClassifierDataSplit.ID, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.ID), ...
	NNClassifierDataSplit.LABEL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.LABEL), ...
	NNClassifierDataSplit.NOTES, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.NOTES), ...
	NNClassifierDataSplit.WAITBAR, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.WAITBAR), ...
	NNClassifierDataSplit.GR_TRAIN, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN), ...
	NNClassifierDataSplit.GR_VAL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL), ...
	NNClassifierDataSplit.FEATURE_MASK, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_MASK), ...
	NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNClassifierDataSplit.GR_TRAIN_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN_FS), ...
	NNClassifierDataSplit.GR_VAL_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL_FS), ...
	NNClassifierDataSplit.GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR1), ...
	NNClassifierDataSplit.GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR2), ...
	NNClassifierDataSplit.SPLIT_GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR1), ...
	NNClassifierDataSplit.SPLIT_GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR2) ...
	);
warning('on', 'BRAPH2:NNClassifierDataSplit')

prop_number = NNClassifierDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierDataSplit.getPropTag(prop));
	switch NNClassifierDataSplit.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nnds.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nnds.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nnds.getPropSettings(prop))
				assert( ...
					nnds.checkFormat(nnds.getPropFormat(prop), nnds.get(prop)), ...
					[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
					['NNClassifierDataSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nnds.checkFormat(nnds.getPropFormat(prop), nnds.get(prop), nnds.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
					['NNClassifierDataSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNClassifierDataSplit')
nnds = NNClassifierDataSplit( ...
	NNClassifierDataSplit.ID, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.ID), ...
	NNClassifierDataSplit.LABEL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.LABEL), ...
	NNClassifierDataSplit.NOTES, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.NOTES), ...
	NNClassifierDataSplit.WAITBAR, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.WAITBAR), ...
	NNClassifierDataSplit.GR_TRAIN, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN), ...
	NNClassifierDataSplit.GR_VAL, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL), ...
	NNClassifierDataSplit.FEATURE_MASK, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_MASK), ...
	NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNClassifierDataSplit.GR_TRAIN_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_TRAIN_FS), ...
	NNClassifierDataSplit.GR_VAL_FS, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR_VAL_FS), ...
	NNClassifierDataSplit.GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR1), ...
	NNClassifierDataSplit.GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.GR2), ...
	NNClassifierDataSplit.SPLIT_GR1, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR1), ...
	NNClassifierDataSplit.SPLIT_GR2, NNClassifierDataSplit.getPropDefault(NNClassifierDataSplit.SPLIT_GR2) ...
	);
warning('on', 'BRAPH2:NNClassifierDataSplit')

for prop = 1:1:NNClassifierDataSplit.getPropNumber()
	TAG = upper(NNClassifierDataSplit.getPropTag(prop));
	switch NNClassifierDataSplit.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nnds.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nnds.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nnds.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nnds.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nnds.checkFormat(nnds.getPropFormat(prop), nnds.getr(prop),nnds.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNClassifierDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNClassifierDataSplit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

