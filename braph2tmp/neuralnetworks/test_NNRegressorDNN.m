%TEST_NNREGRESSORDNN

%% Test 1.1: Instantiation - empty

nn = NNRegressorDNN();

prop_number = NNRegressorDNN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDNN.getPropTag(prop));
	assert( ...
		isa(nn.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
		['NNRegressorDNN.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNRegressorDNN.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nn.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
		['NNRegressorDNN.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNRegressorDNN.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNRegressorDNN')
nn = NNRegressorDNN( ...
	NNRegressorDNN.ID, NNRegressorDNN.getPropDefault(NNRegressorDNN.ID), ...
	NNRegressorDNN.LABEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.LABEL), ...
	NNRegressorDNN.NOTES, NNRegressorDNN.getPropDefault(NNRegressorDNN.NOTES), ...
	NNRegressorDNN.GR, NNRegressorDNN.getPropDefault(NNRegressorDNN.GR), ...
	NNRegressorDNN.MODEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.MODEL), ...
	NNRegressorDNN.LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.LAYERS), ...
	NNRegressorDNN.BATCH, NNRegressorDNN.getPropDefault(NNRegressorDNN.BATCH), ...
	NNRegressorDNN.EPOCHS, NNRegressorDNN.getPropDefault(NNRegressorDNN.EPOCHS), ...
	NNRegressorDNN.SHUFFLE, NNRegressorDNN.getPropDefault(NNRegressorDNN.SHUFFLE), ...
	NNRegressorDNN.SOLVER, NNRegressorDNN.getPropDefault(NNRegressorDNN.SOLVER), ...
	NNRegressorDNN.VERBOSE, NNRegressorDNN.getPropDefault(NNRegressorDNN.VERBOSE), ...
	NNRegressorDNN.PLOT_TRAINING, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_TRAINING), ...
	NNRegressorDNN.PLOT_LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_LAYERS), ...
	NNRegressorDNN.INPUT_FORMAT, NNRegressorDNN.getPropDefault(NNRegressorDNN.INPUT_FORMAT) ...
	);
warning('on', 'BRAPH2:NNRegressorDNN')

for prop = 1:1:NNRegressorDNN.getPropNumber()
	TAG = upper(NNRegressorDNN.getPropTag(prop));
	switch NNRegressorDNN.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nn.getr(prop), NNRegressorDNN.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNRegressorDNN.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNRegressorDNN.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nn.getr(TAG), NNRegressorDNN.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNRegressorDNN.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNRegressorDNN.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nn.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNRegressorDNN.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNRegressorDNN.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nn.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNRegressorDNN.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNRegressorDNN.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNRegressorDNN')
nn_0 = NNRegressorDNN( ...
	NNRegressorDNN.ID, NNRegressorDNN.getPropDefault(NNRegressorDNN.ID), ...
	NNRegressorDNN.LABEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.LABEL), ...
	NNRegressorDNN.NOTES, NNRegressorDNN.getPropDefault(NNRegressorDNN.NOTES), ...
	NNRegressorDNN.GR, NNRegressorDNN.getPropDefault(NNRegressorDNN.GR), ...
	NNRegressorDNN.MODEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.MODEL), ...
	NNRegressorDNN.LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.LAYERS), ...
	NNRegressorDNN.BATCH, NNRegressorDNN.getPropDefault(NNRegressorDNN.BATCH), ...
	NNRegressorDNN.EPOCHS, NNRegressorDNN.getPropDefault(NNRegressorDNN.EPOCHS), ...
	NNRegressorDNN.SHUFFLE, NNRegressorDNN.getPropDefault(NNRegressorDNN.SHUFFLE), ...
	NNRegressorDNN.SOLVER, NNRegressorDNN.getPropDefault(NNRegressorDNN.SOLVER), ...
	NNRegressorDNN.VERBOSE, NNRegressorDNN.getPropDefault(NNRegressorDNN.VERBOSE), ...
	NNRegressorDNN.PLOT_TRAINING, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_TRAINING), ...
	NNRegressorDNN.PLOT_LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_LAYERS), ...
	NNRegressorDNN.INPUT_FORMAT, NNRegressorDNN.getPropDefault(NNRegressorDNN.INPUT_FORMAT) ...
	);
warning('on', 'BRAPH2:NNRegressorDNN')

nn_1 = NNRegressorDNN( ...
	NNRegressorDNN.ID, Callback('EL', nn_0, 'PROP', 1), ...
	NNRegressorDNN.LABEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.LABEL), ...
	NNRegressorDNN.NOTES, NNRegressorDNN.getPropDefault(NNRegressorDNN.NOTES), ...
	NNRegressorDNN.GR, Callback('EL', nn_0, 'PROP', 4), ...
	NNRegressorDNN.MODEL, NoValue(), ...
	NNRegressorDNN.LAYERS, Callback('EL', nn_0, 'PROP', 6), ...
	NNRegressorDNN.BATCH, Callback('EL', nn_0, 'PROP', 7), ...
	NNRegressorDNN.EPOCHS, Callback('EL', nn_0, 'PROP', 8), ...
	NNRegressorDNN.SHUFFLE, Callback('EL', nn_0, 'PROP', 9), ...
	NNRegressorDNN.SOLVER, Callback('EL', nn_0, 'PROP', 10), ...
	NNRegressorDNN.VERBOSE, Callback('EL', nn_0, 'PROP', 11), ...
	NNRegressorDNN.PLOT_TRAINING, Callback('EL', nn_0, 'PROP', 12), ...
	NNRegressorDNN.PLOT_LAYERS, Callback('EL', nn_0, 'PROP', 13), ...
	NNRegressorDNN.INPUT_FORMAT, Callback('EL', nn_0, 'PROP', 14) ...
	);
	
prop_number = NNRegressorDNN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDNN.getPropTag(prop));
	switch NNRegressorDNN.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nn_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nn_1.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nn_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nn_2 = NNRegressorDNN( ...
	NNRegressorDNN.ID, Callback('EL', nn_1, 'PROP', 1), ...
	NNRegressorDNN.LABEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.LABEL), ...
	NNRegressorDNN.NOTES, NNRegressorDNN.getPropDefault(NNRegressorDNN.NOTES), ...
	NNRegressorDNN.GR, Callback('EL', nn_1, 'PROP', 4), ...
	NNRegressorDNN.MODEL, NoValue(), ...
	NNRegressorDNN.LAYERS, Callback('EL', nn_1, 'PROP', 6), ...
	NNRegressorDNN.BATCH, Callback('EL', nn_1, 'PROP', 7), ...
	NNRegressorDNN.EPOCHS, Callback('EL', nn_1, 'PROP', 8), ...
	NNRegressorDNN.SHUFFLE, Callback('EL', nn_1, 'PROP', 9), ...
	NNRegressorDNN.SOLVER, Callback('EL', nn_1, 'PROP', 10), ...
	NNRegressorDNN.VERBOSE, Callback('EL', nn_1, 'PROP', 11), ...
	NNRegressorDNN.PLOT_TRAINING, Callback('EL', nn_1, 'PROP', 12), ...
	NNRegressorDNN.PLOT_LAYERS, Callback('EL', nn_1, 'PROP', 13), ...
	NNRegressorDNN.INPUT_FORMAT, Callback('EL', nn_1, 'PROP', 14) ...
	);
	
prop_number = NNRegressorDNN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDNN.getPropTag(prop));
	switch NNRegressorDNN.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nn_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nn_2.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nn_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nn_3 = NNRegressorDNN( ...
	NNRegressorDNN.ID, Callback('EL', nn_2, 'PROP', 1), ...
	NNRegressorDNN.LABEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.LABEL), ...
	NNRegressorDNN.NOTES, NNRegressorDNN.getPropDefault(NNRegressorDNN.NOTES), ...
	NNRegressorDNN.GR, Callback('EL', nn_2, 'PROP', 4), ...
	NNRegressorDNN.MODEL, NoValue(), ...
	NNRegressorDNN.LAYERS, Callback('EL', nn_2, 'PROP', 6), ...
	NNRegressorDNN.BATCH, Callback('EL', nn_2, 'PROP', 7), ...
	NNRegressorDNN.EPOCHS, Callback('EL', nn_2, 'PROP', 8), ...
	NNRegressorDNN.SHUFFLE, Callback('EL', nn_2, 'PROP', 9), ...
	NNRegressorDNN.SOLVER, Callback('EL', nn_2, 'PROP', 10), ...
	NNRegressorDNN.VERBOSE, Callback('EL', nn_2, 'PROP', 11), ...
	NNRegressorDNN.PLOT_TRAINING, Callback('EL', nn_2, 'PROP', 12), ...
	NNRegressorDNN.PLOT_LAYERS, Callback('EL', nn_2, 'PROP', 13), ...
	NNRegressorDNN.INPUT_FORMAT, Callback('EL', nn_2, 'PROP', 14) ...
	);
	
prop_number = NNRegressorDNN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDNN.getPropTag(prop));
	switch NNRegressorDNN.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nn_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nn_3.get(prop), nn_0.get(prop)) && ~isa(nn_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nn_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNRegressorDNN')
nn = NNRegressorDNN( ...
	NNRegressorDNN.ID, NNRegressorDNN.getPropDefault(NNRegressorDNN.ID), ...
	NNRegressorDNN.LABEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.LABEL), ...
	NNRegressorDNN.NOTES, NNRegressorDNN.getPropDefault(NNRegressorDNN.NOTES), ...
	NNRegressorDNN.GR, NNRegressorDNN.getPropDefault(NNRegressorDNN.GR), ...
	NNRegressorDNN.MODEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.MODEL), ...
	NNRegressorDNN.LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.LAYERS), ...
	NNRegressorDNN.BATCH, NNRegressorDNN.getPropDefault(NNRegressorDNN.BATCH), ...
	NNRegressorDNN.EPOCHS, NNRegressorDNN.getPropDefault(NNRegressorDNN.EPOCHS), ...
	NNRegressorDNN.SHUFFLE, NNRegressorDNN.getPropDefault(NNRegressorDNN.SHUFFLE), ...
	NNRegressorDNN.SOLVER, NNRegressorDNN.getPropDefault(NNRegressorDNN.SOLVER), ...
	NNRegressorDNN.VERBOSE, NNRegressorDNN.getPropDefault(NNRegressorDNN.VERBOSE), ...
	NNRegressorDNN.PLOT_TRAINING, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_TRAINING), ...
	NNRegressorDNN.PLOT_LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_LAYERS), ...
	NNRegressorDNN.INPUT_FORMAT, NNRegressorDNN.getPropDefault(NNRegressorDNN.INPUT_FORMAT) ...
	);
warning('on', 'BRAPH2:NNRegressorDNN')

prop_number = NNRegressorDNN.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDNN.getPropTag(prop));
	switch NNRegressorDNN.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nn.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nn.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nn.getPropSettings(prop))
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.get(prop)), ...
					[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
					['NNRegressorDNN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nn.checkFormat(nn.getPropFormat(prop), nn.get(prop), nn.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
					['NNRegressorDNN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNRegressorDNN')
nn = NNRegressorDNN( ...
	NNRegressorDNN.ID, NNRegressorDNN.getPropDefault(NNRegressorDNN.ID), ...
	NNRegressorDNN.LABEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.LABEL), ...
	NNRegressorDNN.NOTES, NNRegressorDNN.getPropDefault(NNRegressorDNN.NOTES), ...
	NNRegressorDNN.GR, NNRegressorDNN.getPropDefault(NNRegressorDNN.GR), ...
	NNRegressorDNN.MODEL, NNRegressorDNN.getPropDefault(NNRegressorDNN.MODEL), ...
	NNRegressorDNN.LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.LAYERS), ...
	NNRegressorDNN.BATCH, NNRegressorDNN.getPropDefault(NNRegressorDNN.BATCH), ...
	NNRegressorDNN.EPOCHS, NNRegressorDNN.getPropDefault(NNRegressorDNN.EPOCHS), ...
	NNRegressorDNN.SHUFFLE, NNRegressorDNN.getPropDefault(NNRegressorDNN.SHUFFLE), ...
	NNRegressorDNN.SOLVER, NNRegressorDNN.getPropDefault(NNRegressorDNN.SOLVER), ...
	NNRegressorDNN.VERBOSE, NNRegressorDNN.getPropDefault(NNRegressorDNN.VERBOSE), ...
	NNRegressorDNN.PLOT_TRAINING, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_TRAINING), ...
	NNRegressorDNN.PLOT_LAYERS, NNRegressorDNN.getPropDefault(NNRegressorDNN.PLOT_LAYERS), ...
	NNRegressorDNN.INPUT_FORMAT, NNRegressorDNN.getPropDefault(NNRegressorDNN.INPUT_FORMAT) ...
	);
warning('on', 'BRAPH2:NNRegressorDNN')

for prop = 1:1:NNRegressorDNN.getPropNumber()
	TAG = upper(NNRegressorDNN.getPropTag(prop));
	switch NNRegressorDNN.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nn.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nn.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nn.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nn.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nn.checkFormat(nn.getPropFormat(prop), nn.getr(prop),nn.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNRegressorDNN:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDNN.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

