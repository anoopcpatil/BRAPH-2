%TEST_NNREGRESSORDATASPLIT

%% Test 1.1: Instantiation - empty

nnds = NNRegressorDataSplit();

prop_number = NNRegressorDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDataSplit.getPropTag(prop));
	assert( ...
		isa(nnds.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
		['NNRegressorDataSplit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNRegressorDataSplit.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nnds.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
		['NNRegressorDataSplit.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNRegressorDataSplit.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNRegressorDataSplit')
nnds = NNRegressorDataSplit( ...
	NNRegressorDataSplit.ID, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.ID), ...
	NNRegressorDataSplit.LABEL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.LABEL), ...
	NNRegressorDataSplit.NOTES, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.NOTES), ...
	NNRegressorDataSplit.WAITBAR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.WAITBAR), ...
	NNRegressorDataSplit.GR_TRAIN, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN), ...
	NNRegressorDataSplit.GR_VAL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL), ...
	NNRegressorDataSplit.FEATURE_MASK, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_MASK), ...
	NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNRegressorDataSplit.GR_TRAIN_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN_FS), ...
	NNRegressorDataSplit.GR_VAL_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL_FS), ...
	NNRegressorDataSplit.GR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR), ...
	NNRegressorDataSplit.SPLIT, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.SPLIT) ...
	);
warning('on', 'BRAPH2:NNRegressorDataSplit')

for prop = 1:1:NNRegressorDataSplit.getPropNumber()
	TAG = upper(NNRegressorDataSplit.getPropTag(prop));
	switch NNRegressorDataSplit.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nnds.getr(prop), NNRegressorDataSplit.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNRegressorDataSplit.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNRegressorDataSplit.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nnds.getr(TAG), NNRegressorDataSplit.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNRegressorDataSplit.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNRegressorDataSplit.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nnds.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNRegressorDataSplit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNRegressorDataSplit.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nnds.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNRegressorDataSplit.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNRegressorDataSplit.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNRegressorDataSplit')
nnds_0 = NNRegressorDataSplit( ...
	NNRegressorDataSplit.ID, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.ID), ...
	NNRegressorDataSplit.LABEL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.LABEL), ...
	NNRegressorDataSplit.NOTES, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.NOTES), ...
	NNRegressorDataSplit.WAITBAR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.WAITBAR), ...
	NNRegressorDataSplit.GR_TRAIN, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN), ...
	NNRegressorDataSplit.GR_VAL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL), ...
	NNRegressorDataSplit.FEATURE_MASK, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_MASK), ...
	NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNRegressorDataSplit.GR_TRAIN_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN_FS), ...
	NNRegressorDataSplit.GR_VAL_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL_FS), ...
	NNRegressorDataSplit.GR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR), ...
	NNRegressorDataSplit.SPLIT, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.SPLIT) ...
	);
warning('on', 'BRAPH2:NNRegressorDataSplit')

nnds_1 = NNRegressorDataSplit( ...
	NNRegressorDataSplit.ID, Callback('EL', nnds_0, 'PROP', 1), ...
	NNRegressorDataSplit.LABEL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.LABEL), ...
	NNRegressorDataSplit.NOTES, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.NOTES), ...
	NNRegressorDataSplit.WAITBAR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.WAITBAR), ...
	NNRegressorDataSplit.GR_TRAIN, NoValue(), ...
	NNRegressorDataSplit.GR_VAL, NoValue(), ...
	NNRegressorDataSplit.FEATURE_MASK, Callback('EL', nnds_0, 'PROP', 7), ...
	NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS, NoValue(), ...
	NNRegressorDataSplit.GR_TRAIN_FS, NoValue(), ...
	NNRegressorDataSplit.GR_VAL_FS, NoValue(), ...
	NNRegressorDataSplit.GR, Callback('EL', nnds_0, 'PROP', 11), ...
	NNRegressorDataSplit.SPLIT, Callback('EL', nnds_0, 'PROP', 12) ...
	);
	
prop_number = NNRegressorDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDataSplit.getPropTag(prop));
	switch NNRegressorDataSplit.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnds_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnds_1.get(prop), nnds_0.get(prop)) && ~isa(nnds_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnds_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nnds_2 = NNRegressorDataSplit( ...
	NNRegressorDataSplit.ID, Callback('EL', nnds_1, 'PROP', 1), ...
	NNRegressorDataSplit.LABEL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.LABEL), ...
	NNRegressorDataSplit.NOTES, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.NOTES), ...
	NNRegressorDataSplit.WAITBAR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.WAITBAR), ...
	NNRegressorDataSplit.GR_TRAIN, NoValue(), ...
	NNRegressorDataSplit.GR_VAL, NoValue(), ...
	NNRegressorDataSplit.FEATURE_MASK, Callback('EL', nnds_1, 'PROP', 7), ...
	NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS, NoValue(), ...
	NNRegressorDataSplit.GR_TRAIN_FS, NoValue(), ...
	NNRegressorDataSplit.GR_VAL_FS, NoValue(), ...
	NNRegressorDataSplit.GR, Callback('EL', nnds_1, 'PROP', 11), ...
	NNRegressorDataSplit.SPLIT, Callback('EL', nnds_1, 'PROP', 12) ...
	);
	
prop_number = NNRegressorDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDataSplit.getPropTag(prop));
	switch NNRegressorDataSplit.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnds_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnds_2.get(prop), nnds_0.get(prop)) && ~isa(nnds_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnds_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nnds_3 = NNRegressorDataSplit( ...
	NNRegressorDataSplit.ID, Callback('EL', nnds_2, 'PROP', 1), ...
	NNRegressorDataSplit.LABEL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.LABEL), ...
	NNRegressorDataSplit.NOTES, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.NOTES), ...
	NNRegressorDataSplit.WAITBAR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.WAITBAR), ...
	NNRegressorDataSplit.GR_TRAIN, NoValue(), ...
	NNRegressorDataSplit.GR_VAL, NoValue(), ...
	NNRegressorDataSplit.FEATURE_MASK, Callback('EL', nnds_2, 'PROP', 7), ...
	NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS, NoValue(), ...
	NNRegressorDataSplit.GR_TRAIN_FS, NoValue(), ...
	NNRegressorDataSplit.GR_VAL_FS, NoValue(), ...
	NNRegressorDataSplit.GR, Callback('EL', nnds_2, 'PROP', 11), ...
	NNRegressorDataSplit.SPLIT, Callback('EL', nnds_2, 'PROP', 12) ...
	);
	
prop_number = NNRegressorDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDataSplit.getPropTag(prop));
	switch NNRegressorDataSplit.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nnds_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nnds_3.get(prop), nnds_0.get(prop)) && ~isa(nnds_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nnds_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNRegressorDataSplit')
nnds = NNRegressorDataSplit( ...
	NNRegressorDataSplit.ID, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.ID), ...
	NNRegressorDataSplit.LABEL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.LABEL), ...
	NNRegressorDataSplit.NOTES, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.NOTES), ...
	NNRegressorDataSplit.WAITBAR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.WAITBAR), ...
	NNRegressorDataSplit.GR_TRAIN, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN), ...
	NNRegressorDataSplit.GR_VAL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL), ...
	NNRegressorDataSplit.FEATURE_MASK, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_MASK), ...
	NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNRegressorDataSplit.GR_TRAIN_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN_FS), ...
	NNRegressorDataSplit.GR_VAL_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL_FS), ...
	NNRegressorDataSplit.GR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR), ...
	NNRegressorDataSplit.SPLIT, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.SPLIT) ...
	);
warning('on', 'BRAPH2:NNRegressorDataSplit')

prop_number = NNRegressorDataSplit.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNRegressorDataSplit.getPropTag(prop));
	switch NNRegressorDataSplit.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nnds.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nnds.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nnds.getPropSettings(prop))
				assert( ...
					nnds.checkFormat(nnds.getPropFormat(prop), nnds.get(prop)), ...
					[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
					['NNRegressorDataSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nnds.checkFormat(nnds.getPropFormat(prop), nnds.get(prop), nnds.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
					['NNRegressorDataSplit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNRegressorDataSplit')
nnds = NNRegressorDataSplit( ...
	NNRegressorDataSplit.ID, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.ID), ...
	NNRegressorDataSplit.LABEL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.LABEL), ...
	NNRegressorDataSplit.NOTES, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.NOTES), ...
	NNRegressorDataSplit.WAITBAR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.WAITBAR), ...
	NNRegressorDataSplit.GR_TRAIN, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN), ...
	NNRegressorDataSplit.GR_VAL, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL), ...
	NNRegressorDataSplit.FEATURE_MASK, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_MASK), ...
	NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.FEATURE_SELECTION_ANALYSIS), ...
	NNRegressorDataSplit.GR_TRAIN_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_TRAIN_FS), ...
	NNRegressorDataSplit.GR_VAL_FS, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR_VAL_FS), ...
	NNRegressorDataSplit.GR, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.GR), ...
	NNRegressorDataSplit.SPLIT, NNRegressorDataSplit.getPropDefault(NNRegressorDataSplit.SPLIT) ...
	);
warning('on', 'BRAPH2:NNRegressorDataSplit')

for prop = 1:1:NNRegressorDataSplit.getPropNumber()
	TAG = upper(NNRegressorDataSplit.getPropTag(prop));
	switch NNRegressorDataSplit.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nnds.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nnds.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nnds.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nnds.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nnds.checkFormat(nnds.getPropFormat(prop), nnds.getr(prop),nnds.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNRegressorDataSplit:' BRAPH2.BUG_FUNC], ...
				['NNRegressorDataSplit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

