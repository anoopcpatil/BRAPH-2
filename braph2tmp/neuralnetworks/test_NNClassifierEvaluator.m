%TEST_NNCLASSIFIEREVALUATOR

%% Test 1.1: Instantiation - empty

nne = NNClassifierEvaluator();

prop_number = NNClassifierEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierEvaluator.getPropTag(prop));
	assert( ...
		isa(nne.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
		['NNClassifierEvaluator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNClassifierEvaluator.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(nne.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
		['NNClassifierEvaluator.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in NNClassifierEvaluator.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:NNClassifierEvaluator')
nne = NNClassifierEvaluator( ...
	NNClassifierEvaluator.ID, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.ID), ...
	NNClassifierEvaluator.LABEL, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.LABEL), ...
	NNClassifierEvaluator.NOTES, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NOTES), ...
	NNClassifierEvaluator.NN, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NN), ...
	NNClassifierEvaluator.GR, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR), ...
	NNClassifierEvaluator.GR_PREDICTION, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR_PREDICTION), ...
	NNClassifierEvaluator.FEATURE_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.FEATURE_MAP), ...
	NNClassifierEvaluator.PLOT_CM, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_CM), ...
	NNClassifierEvaluator.PLOT_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_MAP), ...
	NNClassifierEvaluator.PLOT_ROC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_ROC), ...
	NNClassifierEvaluator.AUC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.AUC), ...
	NNClassifierEvaluator.CONFUSION_MATRIX, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.CONFUSION_MATRIX) ...
	);
warning('on', 'BRAPH2:NNClassifierEvaluator')

for prop = 1:1:NNClassifierEvaluator.getPropNumber()
	TAG = upper(NNClassifierEvaluator.getPropTag(prop));
	switch NNClassifierEvaluator.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(nne.getr(prop), NNClassifierEvaluator.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by NNClassifierEvaluator.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNClassifierEvaluator.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(nne.getr(TAG), NNClassifierEvaluator.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by NNClassifierEvaluator.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in NNClassifierEvaluator.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(nne.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNClassifierEvaluator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNClassifierEvaluator.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(nne.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['Being a result, NNClassifierEvaluator.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in NNClassifierEvaluator.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:NNClassifierEvaluator')
nne_0 = NNClassifierEvaluator( ...
	NNClassifierEvaluator.ID, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.ID), ...
	NNClassifierEvaluator.LABEL, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.LABEL), ...
	NNClassifierEvaluator.NOTES, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NOTES), ...
	NNClassifierEvaluator.NN, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NN), ...
	NNClassifierEvaluator.GR, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR), ...
	NNClassifierEvaluator.GR_PREDICTION, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR_PREDICTION), ...
	NNClassifierEvaluator.FEATURE_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.FEATURE_MAP), ...
	NNClassifierEvaluator.PLOT_CM, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_CM), ...
	NNClassifierEvaluator.PLOT_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_MAP), ...
	NNClassifierEvaluator.PLOT_ROC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_ROC), ...
	NNClassifierEvaluator.AUC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.AUC), ...
	NNClassifierEvaluator.CONFUSION_MATRIX, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.CONFUSION_MATRIX) ...
	);
warning('on', 'BRAPH2:NNClassifierEvaluator')

nne_1 = NNClassifierEvaluator( ...
	NNClassifierEvaluator.ID, Callback('EL', nne_0, 'PROP', 1), ...
	NNClassifierEvaluator.LABEL, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.LABEL), ...
	NNClassifierEvaluator.NOTES, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NOTES), ...
	NNClassifierEvaluator.NN, Callback('EL', nne_0, 'PROP', 4), ...
	NNClassifierEvaluator.GR, Callback('EL', nne_0, 'PROP', 5), ...
	NNClassifierEvaluator.GR_PREDICTION, NoValue(), ...
	NNClassifierEvaluator.FEATURE_MAP, NoValue(), ...
	NNClassifierEvaluator.PLOT_CM, Callback('EL', nne_0, 'PROP', 8), ...
	NNClassifierEvaluator.PLOT_MAP, Callback('EL', nne_0, 'PROP', 9), ...
	NNClassifierEvaluator.PLOT_ROC, Callback('EL', nne_0, 'PROP', 10), ...
	NNClassifierEvaluator.AUC, NoValue(), ...
	NNClassifierEvaluator.CONFUSION_MATRIX, NoValue() ...
	);
	
prop_number = NNClassifierEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierEvaluator.getPropTag(prop));
	switch NNClassifierEvaluator.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nne_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nne_1.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nne_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nne_2 = NNClassifierEvaluator( ...
	NNClassifierEvaluator.ID, Callback('EL', nne_1, 'PROP', 1), ...
	NNClassifierEvaluator.LABEL, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.LABEL), ...
	NNClassifierEvaluator.NOTES, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NOTES), ...
	NNClassifierEvaluator.NN, Callback('EL', nne_1, 'PROP', 4), ...
	NNClassifierEvaluator.GR, Callback('EL', nne_1, 'PROP', 5), ...
	NNClassifierEvaluator.GR_PREDICTION, NoValue(), ...
	NNClassifierEvaluator.FEATURE_MAP, NoValue(), ...
	NNClassifierEvaluator.PLOT_CM, Callback('EL', nne_1, 'PROP', 8), ...
	NNClassifierEvaluator.PLOT_MAP, Callback('EL', nne_1, 'PROP', 9), ...
	NNClassifierEvaluator.PLOT_ROC, Callback('EL', nne_1, 'PROP', 10), ...
	NNClassifierEvaluator.AUC, NoValue(), ...
	NNClassifierEvaluator.CONFUSION_MATRIX, NoValue() ...
	);
	
prop_number = NNClassifierEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierEvaluator.getPropTag(prop));
	switch NNClassifierEvaluator.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nne_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nne_2.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nne_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
nne_3 = NNClassifierEvaluator( ...
	NNClassifierEvaluator.ID, Callback('EL', nne_2, 'PROP', 1), ...
	NNClassifierEvaluator.LABEL, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.LABEL), ...
	NNClassifierEvaluator.NOTES, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NOTES), ...
	NNClassifierEvaluator.NN, Callback('EL', nne_2, 'PROP', 4), ...
	NNClassifierEvaluator.GR, Callback('EL', nne_2, 'PROP', 5), ...
	NNClassifierEvaluator.GR_PREDICTION, NoValue(), ...
	NNClassifierEvaluator.FEATURE_MAP, NoValue(), ...
	NNClassifierEvaluator.PLOT_CM, Callback('EL', nne_2, 'PROP', 8), ...
	NNClassifierEvaluator.PLOT_MAP, Callback('EL', nne_2, 'PROP', 9), ...
	NNClassifierEvaluator.PLOT_ROC, Callback('EL', nne_2, 'PROP', 10), ...
	NNClassifierEvaluator.AUC, NoValue(), ...
	NNClassifierEvaluator.CONFUSION_MATRIX, NoValue() ...
	);
	
prop_number = NNClassifierEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierEvaluator.getPropTag(prop));
	switch NNClassifierEvaluator.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(nne_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(nne_3.get(prop), nne_0.get(prop)) && ~isa(nne_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(nne_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:NNClassifierEvaluator')
nne = NNClassifierEvaluator( ...
	NNClassifierEvaluator.ID, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.ID), ...
	NNClassifierEvaluator.LABEL, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.LABEL), ...
	NNClassifierEvaluator.NOTES, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NOTES), ...
	NNClassifierEvaluator.NN, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NN), ...
	NNClassifierEvaluator.GR, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR), ...
	NNClassifierEvaluator.GR_PREDICTION, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR_PREDICTION), ...
	NNClassifierEvaluator.FEATURE_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.FEATURE_MAP), ...
	NNClassifierEvaluator.PLOT_CM, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_CM), ...
	NNClassifierEvaluator.PLOT_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_MAP), ...
	NNClassifierEvaluator.PLOT_ROC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_ROC), ...
	NNClassifierEvaluator.AUC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.AUC), ...
	NNClassifierEvaluator.CONFUSION_MATRIX, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.CONFUSION_MATRIX) ...
	);
warning('on', 'BRAPH2:NNClassifierEvaluator')

prop_number = NNClassifierEvaluator.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(NNClassifierEvaluator.getPropTag(prop));
	switch NNClassifierEvaluator.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nne.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nne.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(nne.getPropSettings(prop))
				assert( ...
					nne.checkFormat(nne.getPropFormat(prop), nne.get(prop)), ...
					[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
					['NNClassifierEvaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					nne.checkFormat(nne.getPropFormat(prop), nne.get(prop), nne.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
					['NNClassifierEvaluator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:NNClassifierEvaluator')
nne = NNClassifierEvaluator( ...
	NNClassifierEvaluator.ID, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.ID), ...
	NNClassifierEvaluator.LABEL, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.LABEL), ...
	NNClassifierEvaluator.NOTES, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NOTES), ...
	NNClassifierEvaluator.NN, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.NN), ...
	NNClassifierEvaluator.GR, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR), ...
	NNClassifierEvaluator.GR_PREDICTION, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.GR_PREDICTION), ...
	NNClassifierEvaluator.FEATURE_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.FEATURE_MAP), ...
	NNClassifierEvaluator.PLOT_CM, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_CM), ...
	NNClassifierEvaluator.PLOT_MAP, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_MAP), ...
	NNClassifierEvaluator.PLOT_ROC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.PLOT_ROC), ...
	NNClassifierEvaluator.AUC, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.AUC), ...
	NNClassifierEvaluator.CONFUSION_MATRIX, NNClassifierEvaluator.getPropDefault(NNClassifierEvaluator.CONFUSION_MATRIX) ...
	);
warning('on', 'BRAPH2:NNClassifierEvaluator')

for prop = 1:1:NNClassifierEvaluator.getPropNumber()
	TAG = upper(NNClassifierEvaluator.getPropTag(prop));
	switch NNClassifierEvaluator.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(nne.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(nne.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(nne.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(nne.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				nne.checkFormat(nne.getPropFormat(prop), nne.getr(prop),nne.getPropSettings(prop)), ...
				[BRAPH2.STR ':NNClassifierEvaluator:' BRAPH2.BUG_FUNC], ...
				['NNClassifierEvaluator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

