%TEST_MULTIGRAPHBUD

%% Test 1.1: Instantiation - empty

g = MultigraphBUD();

prop_number = MultigraphBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUD.getPropTag(prop));
	assert( ...
		isa(g.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
		['MultigraphBUD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultigraphBUD.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(g.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
		['MultigraphBUD.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultigraphBUD.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:MultigraphBUD')
g = MultigraphBUD( ...
	MultigraphBUD.ID, MultigraphBUD.getPropDefault(MultigraphBUD.ID), ...
	MultigraphBUD.LABEL, MultigraphBUD.getPropDefault(MultigraphBUD.LABEL), ...
	MultigraphBUD.NOTES, MultigraphBUD.getPropDefault(MultigraphBUD.NOTES), ...
	MultigraphBUD.BRAINATLAS, MultigraphBUD.getPropDefault(MultigraphBUD.BRAINATLAS), ...
	MultigraphBUD.A, MultigraphBUD.getPropDefault(MultigraphBUD.A), ...
	MultigraphBUD.M_DICT, MultigraphBUD.getPropDefault(MultigraphBUD.M_DICT), ...
	MultigraphBUD.B, MultigraphBUD.getPropDefault(MultigraphBUD.B), ...
	MultigraphBUD.ATTEMPTSPEREDGE, MultigraphBUD.getPropDefault(MultigraphBUD.ATTEMPTSPEREDGE), ...
	MultigraphBUD.NUMBEROFWEIGHTS, MultigraphBUD.getPropDefault(MultigraphBUD.NUMBEROFWEIGHTS), ...
	MultigraphBUD.DENSITIES, MultigraphBUD.getPropDefault(MultigraphBUD.DENSITIES) ...
	);
warning('on', 'BRAPH2:MultigraphBUD')

for prop = 1:1:MultigraphBUD.getPropNumber()
	TAG = upper(MultigraphBUD.getPropTag(prop));
	switch MultigraphBUD.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(g.getr(prop), MultigraphBUD.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by MultigraphBUD.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultigraphBUD.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(g.getr(TAG), MultigraphBUD.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by MultigraphBUD.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultigraphBUD.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(g.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultigraphBUD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultigraphBUD.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(g.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultigraphBUD.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultigraphBUD.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:MultigraphBUD')
g_0 = MultigraphBUD( ...
	MultigraphBUD.ID, MultigraphBUD.getPropDefault(MultigraphBUD.ID), ...
	MultigraphBUD.LABEL, MultigraphBUD.getPropDefault(MultigraphBUD.LABEL), ...
	MultigraphBUD.NOTES, MultigraphBUD.getPropDefault(MultigraphBUD.NOTES), ...
	MultigraphBUD.BRAINATLAS, MultigraphBUD.getPropDefault(MultigraphBUD.BRAINATLAS), ...
	MultigraphBUD.A, MultigraphBUD.getPropDefault(MultigraphBUD.A), ...
	MultigraphBUD.M_DICT, MultigraphBUD.getPropDefault(MultigraphBUD.M_DICT), ...
	MultigraphBUD.B, MultigraphBUD.getPropDefault(MultigraphBUD.B), ...
	MultigraphBUD.ATTEMPTSPEREDGE, MultigraphBUD.getPropDefault(MultigraphBUD.ATTEMPTSPEREDGE), ...
	MultigraphBUD.NUMBEROFWEIGHTS, MultigraphBUD.getPropDefault(MultigraphBUD.NUMBEROFWEIGHTS), ...
	MultigraphBUD.DENSITIES, MultigraphBUD.getPropDefault(MultigraphBUD.DENSITIES) ...
	);
warning('on', 'BRAPH2:MultigraphBUD')

g_1 = MultigraphBUD( ...
	MultigraphBUD.ID, Callback('EL', g_0, 'PROP', 1), ...
	MultigraphBUD.LABEL, MultigraphBUD.getPropDefault(MultigraphBUD.LABEL), ...
	MultigraphBUD.NOTES, MultigraphBUD.getPropDefault(MultigraphBUD.NOTES), ...
	MultigraphBUD.BRAINATLAS, Callback('EL', g_0, 'PROP', 4), ...
	MultigraphBUD.A, NoValue(), ...
	MultigraphBUD.M_DICT, NoValue(), ...
	MultigraphBUD.B, Callback('EL', g_0, 'PROP', 7), ...
	MultigraphBUD.ATTEMPTSPEREDGE, Callback('EL', g_0, 'PROP', 8), ...
	MultigraphBUD.NUMBEROFWEIGHTS, Callback('EL', g_0, 'PROP', 9), ...
	MultigraphBUD.DENSITIES, Callback('EL', g_0, 'PROP', 10) ...
	);
	
prop_number = MultigraphBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUD.getPropTag(prop));
	switch MultigraphBUD.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_2 = MultigraphBUD( ...
	MultigraphBUD.ID, Callback('EL', g_1, 'PROP', 1), ...
	MultigraphBUD.LABEL, MultigraphBUD.getPropDefault(MultigraphBUD.LABEL), ...
	MultigraphBUD.NOTES, MultigraphBUD.getPropDefault(MultigraphBUD.NOTES), ...
	MultigraphBUD.BRAINATLAS, Callback('EL', g_1, 'PROP', 4), ...
	MultigraphBUD.A, NoValue(), ...
	MultigraphBUD.M_DICT, NoValue(), ...
	MultigraphBUD.B, Callback('EL', g_1, 'PROP', 7), ...
	MultigraphBUD.ATTEMPTSPEREDGE, Callback('EL', g_1, 'PROP', 8), ...
	MultigraphBUD.NUMBEROFWEIGHTS, Callback('EL', g_1, 'PROP', 9), ...
	MultigraphBUD.DENSITIES, Callback('EL', g_1, 'PROP', 10) ...
	);
	
prop_number = MultigraphBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUD.getPropTag(prop));
	switch MultigraphBUD.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_3 = MultigraphBUD( ...
	MultigraphBUD.ID, Callback('EL', g_2, 'PROP', 1), ...
	MultigraphBUD.LABEL, MultigraphBUD.getPropDefault(MultigraphBUD.LABEL), ...
	MultigraphBUD.NOTES, MultigraphBUD.getPropDefault(MultigraphBUD.NOTES), ...
	MultigraphBUD.BRAINATLAS, Callback('EL', g_2, 'PROP', 4), ...
	MultigraphBUD.A, NoValue(), ...
	MultigraphBUD.M_DICT, NoValue(), ...
	MultigraphBUD.B, Callback('EL', g_2, 'PROP', 7), ...
	MultigraphBUD.ATTEMPTSPEREDGE, Callback('EL', g_2, 'PROP', 8), ...
	MultigraphBUD.NUMBEROFWEIGHTS, Callback('EL', g_2, 'PROP', 9), ...
	MultigraphBUD.DENSITIES, Callback('EL', g_2, 'PROP', 10) ...
	);
	
prop_number = MultigraphBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUD.getPropTag(prop));
	switch MultigraphBUD.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:MultigraphBUD')
g = MultigraphBUD( ...
	MultigraphBUD.ID, MultigraphBUD.getPropDefault(MultigraphBUD.ID), ...
	MultigraphBUD.LABEL, MultigraphBUD.getPropDefault(MultigraphBUD.LABEL), ...
	MultigraphBUD.NOTES, MultigraphBUD.getPropDefault(MultigraphBUD.NOTES), ...
	MultigraphBUD.BRAINATLAS, MultigraphBUD.getPropDefault(MultigraphBUD.BRAINATLAS), ...
	MultigraphBUD.A, MultigraphBUD.getPropDefault(MultigraphBUD.A), ...
	MultigraphBUD.M_DICT, MultigraphBUD.getPropDefault(MultigraphBUD.M_DICT), ...
	MultigraphBUD.B, MultigraphBUD.getPropDefault(MultigraphBUD.B), ...
	MultigraphBUD.ATTEMPTSPEREDGE, MultigraphBUD.getPropDefault(MultigraphBUD.ATTEMPTSPEREDGE), ...
	MultigraphBUD.NUMBEROFWEIGHTS, MultigraphBUD.getPropDefault(MultigraphBUD.NUMBEROFWEIGHTS), ...
	MultigraphBUD.DENSITIES, MultigraphBUD.getPropDefault(MultigraphBUD.DENSITIES) ...
	);
warning('on', 'BRAPH2:MultigraphBUD')

prop_number = MultigraphBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUD.getPropTag(prop));
	switch MultigraphBUD.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(g.getPropSettings(prop))
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
					[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
					['MultigraphBUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
					[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
					['MultigraphBUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:MultigraphBUD')
g = MultigraphBUD( ...
	MultigraphBUD.ID, MultigraphBUD.getPropDefault(MultigraphBUD.ID), ...
	MultigraphBUD.LABEL, MultigraphBUD.getPropDefault(MultigraphBUD.LABEL), ...
	MultigraphBUD.NOTES, MultigraphBUD.getPropDefault(MultigraphBUD.NOTES), ...
	MultigraphBUD.BRAINATLAS, MultigraphBUD.getPropDefault(MultigraphBUD.BRAINATLAS), ...
	MultigraphBUD.A, MultigraphBUD.getPropDefault(MultigraphBUD.A), ...
	MultigraphBUD.M_DICT, MultigraphBUD.getPropDefault(MultigraphBUD.M_DICT), ...
	MultigraphBUD.B, MultigraphBUD.getPropDefault(MultigraphBUD.B), ...
	MultigraphBUD.ATTEMPTSPEREDGE, MultigraphBUD.getPropDefault(MultigraphBUD.ATTEMPTSPEREDGE), ...
	MultigraphBUD.NUMBEROFWEIGHTS, MultigraphBUD.getPropDefault(MultigraphBUD.NUMBEROFWEIGHTS), ...
	MultigraphBUD.DENSITIES, MultigraphBUD.getPropDefault(MultigraphBUD.DENSITIES) ...
	);
warning('on', 'BRAPH2:MultigraphBUD')

for prop = 1:1:MultigraphBUD.getPropNumber()
	TAG = upper(MultigraphBUD.getPropTag(prop));
	switch MultigraphBUD.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(g.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
				[BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Constructor

B = [
     0 .1 .2 .3 .4
    .1  0 .5 .6 .7
    .2 .5  0 .8 .9
    .3 .6 .8  0  1
    .4 .7 .9  1  0
    ];
g = MultigraphBUD('B', B, 'DENSITIES', [0 55 100]);

A = g.get('A');

assert( ...
    sum(sum(A{1, 1})) == 0 && ...
    sum(sum(A{2, 2})) == 10 && ...
    sum(sum(A{3, 3})) == 20, ...
    [BRAPH2.STR ':MultigraphBUD:' BRAPH2.BUG_ERR], ...
    'MultigraphBUD is not constructing well.')

