%TEST_GRAPHBU

%% Test 1.1: Instantiation - empty

g = GraphBU();

prop_number = GraphBU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(GraphBU.getPropTag(prop));
	assert( ...
		isa(g.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
		['GraphBU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in GraphBU.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(g.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
		['GraphBU.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in GraphBU.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:GraphBU')
g = GraphBU( ...
	GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
	GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
	GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
	GraphBU.BRAINATLAS, GraphBU.getPropDefault(GraphBU.BRAINATLAS), ...
	GraphBU.A, GraphBU.getPropDefault(GraphBU.A), ...
	GraphBU.M_DICT, GraphBU.getPropDefault(GraphBU.M_DICT), ...
	GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
	GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE) ...
	);
warning('on', 'BRAPH2:GraphBU')

for prop = 1:1:GraphBU.getPropNumber()
	TAG = upper(GraphBU.getPropTag(prop));
	switch GraphBU.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(g.getr(prop), GraphBU.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by GraphBU.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in GraphBU.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(g.getr(TAG), GraphBU.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by GraphBU.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in GraphBU.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(g.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['Being a result, GraphBU.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in GraphBU.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(g.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['Being a result, GraphBU.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in GraphBU.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:GraphBU')
g_0 = GraphBU( ...
	GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
	GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
	GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
	GraphBU.BRAINATLAS, GraphBU.getPropDefault(GraphBU.BRAINATLAS), ...
	GraphBU.A, GraphBU.getPropDefault(GraphBU.A), ...
	GraphBU.M_DICT, GraphBU.getPropDefault(GraphBU.M_DICT), ...
	GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
	GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE) ...
	);
warning('on', 'BRAPH2:GraphBU')

g_1 = GraphBU( ...
	GraphBU.ID, Callback('EL', g_0, 'PROP', 1), ...
	GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
	GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
	GraphBU.BRAINATLAS, Callback('EL', g_0, 'PROP', 4), ...
	GraphBU.A, NoValue(), ...
	GraphBU.M_DICT, NoValue(), ...
	GraphBU.B, Callback('EL', g_0, 'PROP', 7), ...
	GraphBU.ATTEMPTSPEREDGE, Callback('EL', g_0, 'PROP', 8) ...
	);
	
prop_number = GraphBU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(GraphBU.getPropTag(prop));
	switch GraphBU.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_2 = GraphBU( ...
	GraphBU.ID, Callback('EL', g_1, 'PROP', 1), ...
	GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
	GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
	GraphBU.BRAINATLAS, Callback('EL', g_1, 'PROP', 4), ...
	GraphBU.A, NoValue(), ...
	GraphBU.M_DICT, NoValue(), ...
	GraphBU.B, Callback('EL', g_1, 'PROP', 7), ...
	GraphBU.ATTEMPTSPEREDGE, Callback('EL', g_1, 'PROP', 8) ...
	);
	
prop_number = GraphBU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(GraphBU.getPropTag(prop));
	switch GraphBU.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_3 = GraphBU( ...
	GraphBU.ID, Callback('EL', g_2, 'PROP', 1), ...
	GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
	GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
	GraphBU.BRAINATLAS, Callback('EL', g_2, 'PROP', 4), ...
	GraphBU.A, NoValue(), ...
	GraphBU.M_DICT, NoValue(), ...
	GraphBU.B, Callback('EL', g_2, 'PROP', 7), ...
	GraphBU.ATTEMPTSPEREDGE, Callback('EL', g_2, 'PROP', 8) ...
	);
	
prop_number = GraphBU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(GraphBU.getPropTag(prop));
	switch GraphBU.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:GraphBU')
g = GraphBU( ...
	GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
	GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
	GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
	GraphBU.BRAINATLAS, GraphBU.getPropDefault(GraphBU.BRAINATLAS), ...
	GraphBU.A, GraphBU.getPropDefault(GraphBU.A), ...
	GraphBU.M_DICT, GraphBU.getPropDefault(GraphBU.M_DICT), ...
	GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
	GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE) ...
	);
warning('on', 'BRAPH2:GraphBU')

prop_number = GraphBU.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(GraphBU.getPropTag(prop));
	switch GraphBU.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(g.getPropSettings(prop))
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
					['GraphBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
					[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
					['GraphBU.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:GraphBU')
g = GraphBU( ...
	GraphBU.ID, GraphBU.getPropDefault(GraphBU.ID), ...
	GraphBU.LABEL, GraphBU.getPropDefault(GraphBU.LABEL), ...
	GraphBU.NOTES, GraphBU.getPropDefault(GraphBU.NOTES), ...
	GraphBU.BRAINATLAS, GraphBU.getPropDefault(GraphBU.BRAINATLAS), ...
	GraphBU.A, GraphBU.getPropDefault(GraphBU.A), ...
	GraphBU.M_DICT, GraphBU.getPropDefault(GraphBU.M_DICT), ...
	GraphBU.B, GraphBU.getPropDefault(GraphBU.B), ...
	GraphBU.ATTEMPTSPEREDGE, GraphBU.getPropDefault(GraphBU.ATTEMPTSPEREDGE) ...
	);
warning('on', 'BRAPH2:GraphBU')

for prop = 1:1:GraphBU.getPropNumber()
	TAG = upper(GraphBU.getPropTag(prop));
	switch GraphBU.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(g.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
				[BRAPH2.STR ':GraphBU:' BRAPH2.BUG_FUNC], ...
				['GraphBU.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Constructor

B = rand(randi(10));
g = GraphBU('B', B);

A = {symmetrize(binarize(semipositivize(dediagonalize(B))))};

assert(isequal(g.get('A'), A), ...
       [BRAPH2.STR ':GraphBU:' BRAPH2.BUG_ERR], ...
       'GraphBU is not constructing well.')

