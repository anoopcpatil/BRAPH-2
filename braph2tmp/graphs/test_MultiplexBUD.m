%TEST_MULTIPLEXBUD

%% Test 1.1: Instantiation - empty

g = MultiplexBUD();

prop_number = MultiplexBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexBUD.getPropTag(prop));
	assert( ...
		isa(g.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
		['MultiplexBUD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultiplexBUD.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(g.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
		['MultiplexBUD.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultiplexBUD.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:MultiplexBUD')
g = MultiplexBUD( ...
	MultiplexBUD.ID, MultiplexBUD.getPropDefault(MultiplexBUD.ID), ...
	MultiplexBUD.LABEL, MultiplexBUD.getPropDefault(MultiplexBUD.LABEL), ...
	MultiplexBUD.NOTES, MultiplexBUD.getPropDefault(MultiplexBUD.NOTES), ...
	MultiplexBUD.BRAINATLAS, MultiplexBUD.getPropDefault(MultiplexBUD.BRAINATLAS), ...
	MultiplexBUD.A, MultiplexBUD.getPropDefault(MultiplexBUD.A), ...
	MultiplexBUD.M_DICT, MultiplexBUD.getPropDefault(MultiplexBUD.M_DICT), ...
	MultiplexBUD.B, MultiplexBUD.getPropDefault(MultiplexBUD.B), ...
	MultiplexBUD.ATTEMPTSPEREDGE, MultiplexBUD.getPropDefault(MultiplexBUD.ATTEMPTSPEREDGE), ...
	MultiplexBUD.NUMBEROFWEIGHTS, MultiplexBUD.getPropDefault(MultiplexBUD.NUMBEROFWEIGHTS), ...
	MultiplexBUD.DENSITIES, MultiplexBUD.getPropDefault(MultiplexBUD.DENSITIES), ...
	MultiplexBUD.NODELABELS, MultiplexBUD.getPropDefault(MultiplexBUD.NODELABELS) ...
	);
warning('on', 'BRAPH2:MultiplexBUD')

for prop = 1:1:MultiplexBUD.getPropNumber()
	TAG = upper(MultiplexBUD.getPropTag(prop));
	switch MultiplexBUD.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(g.getr(prop), MultiplexBUD.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by MultiplexBUD.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultiplexBUD.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(g.getr(TAG), MultiplexBUD.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by MultiplexBUD.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultiplexBUD.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(g.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultiplexBUD.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultiplexBUD.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(g.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultiplexBUD.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultiplexBUD.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:MultiplexBUD')
g_0 = MultiplexBUD( ...
	MultiplexBUD.ID, MultiplexBUD.getPropDefault(MultiplexBUD.ID), ...
	MultiplexBUD.LABEL, MultiplexBUD.getPropDefault(MultiplexBUD.LABEL), ...
	MultiplexBUD.NOTES, MultiplexBUD.getPropDefault(MultiplexBUD.NOTES), ...
	MultiplexBUD.BRAINATLAS, MultiplexBUD.getPropDefault(MultiplexBUD.BRAINATLAS), ...
	MultiplexBUD.A, MultiplexBUD.getPropDefault(MultiplexBUD.A), ...
	MultiplexBUD.M_DICT, MultiplexBUD.getPropDefault(MultiplexBUD.M_DICT), ...
	MultiplexBUD.B, MultiplexBUD.getPropDefault(MultiplexBUD.B), ...
	MultiplexBUD.ATTEMPTSPEREDGE, MultiplexBUD.getPropDefault(MultiplexBUD.ATTEMPTSPEREDGE), ...
	MultiplexBUD.NUMBEROFWEIGHTS, MultiplexBUD.getPropDefault(MultiplexBUD.NUMBEROFWEIGHTS), ...
	MultiplexBUD.DENSITIES, MultiplexBUD.getPropDefault(MultiplexBUD.DENSITIES), ...
	MultiplexBUD.NODELABELS, MultiplexBUD.getPropDefault(MultiplexBUD.NODELABELS) ...
	);
warning('on', 'BRAPH2:MultiplexBUD')

g_1 = MultiplexBUD( ...
	MultiplexBUD.ID, Callback('EL', g_0, 'PROP', 1), ...
	MultiplexBUD.LABEL, MultiplexBUD.getPropDefault(MultiplexBUD.LABEL), ...
	MultiplexBUD.NOTES, MultiplexBUD.getPropDefault(MultiplexBUD.NOTES), ...
	MultiplexBUD.BRAINATLAS, Callback('EL', g_0, 'PROP', 4), ...
	MultiplexBUD.A, NoValue(), ...
	MultiplexBUD.M_DICT, NoValue(), ...
	MultiplexBUD.B, Callback('EL', g_0, 'PROP', 7), ...
	MultiplexBUD.ATTEMPTSPEREDGE, Callback('EL', g_0, 'PROP', 8), ...
	MultiplexBUD.NUMBEROFWEIGHTS, Callback('EL', g_0, 'PROP', 9), ...
	MultiplexBUD.DENSITIES, Callback('EL', g_0, 'PROP', 10), ...
	MultiplexBUD.NODELABELS, MultiplexBUD.getPropDefault(MultiplexBUD.NODELABELS) ...
	);
	
prop_number = MultiplexBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexBUD.getPropTag(prop));
	switch MultiplexBUD.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_2 = MultiplexBUD( ...
	MultiplexBUD.ID, Callback('EL', g_1, 'PROP', 1), ...
	MultiplexBUD.LABEL, MultiplexBUD.getPropDefault(MultiplexBUD.LABEL), ...
	MultiplexBUD.NOTES, MultiplexBUD.getPropDefault(MultiplexBUD.NOTES), ...
	MultiplexBUD.BRAINATLAS, Callback('EL', g_1, 'PROP', 4), ...
	MultiplexBUD.A, NoValue(), ...
	MultiplexBUD.M_DICT, NoValue(), ...
	MultiplexBUD.B, Callback('EL', g_1, 'PROP', 7), ...
	MultiplexBUD.ATTEMPTSPEREDGE, Callback('EL', g_1, 'PROP', 8), ...
	MultiplexBUD.NUMBEROFWEIGHTS, Callback('EL', g_1, 'PROP', 9), ...
	MultiplexBUD.DENSITIES, Callback('EL', g_1, 'PROP', 10), ...
	MultiplexBUD.NODELABELS, MultiplexBUD.getPropDefault(MultiplexBUD.NODELABELS) ...
	);
	
prop_number = MultiplexBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexBUD.getPropTag(prop));
	switch MultiplexBUD.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_3 = MultiplexBUD( ...
	MultiplexBUD.ID, Callback('EL', g_2, 'PROP', 1), ...
	MultiplexBUD.LABEL, MultiplexBUD.getPropDefault(MultiplexBUD.LABEL), ...
	MultiplexBUD.NOTES, MultiplexBUD.getPropDefault(MultiplexBUD.NOTES), ...
	MultiplexBUD.BRAINATLAS, Callback('EL', g_2, 'PROP', 4), ...
	MultiplexBUD.A, NoValue(), ...
	MultiplexBUD.M_DICT, NoValue(), ...
	MultiplexBUD.B, Callback('EL', g_2, 'PROP', 7), ...
	MultiplexBUD.ATTEMPTSPEREDGE, Callback('EL', g_2, 'PROP', 8), ...
	MultiplexBUD.NUMBEROFWEIGHTS, Callback('EL', g_2, 'PROP', 9), ...
	MultiplexBUD.DENSITIES, Callback('EL', g_2, 'PROP', 10), ...
	MultiplexBUD.NODELABELS, MultiplexBUD.getPropDefault(MultiplexBUD.NODELABELS) ...
	);
	
prop_number = MultiplexBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexBUD.getPropTag(prop));
	switch MultiplexBUD.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:MultiplexBUD')
g = MultiplexBUD( ...
	MultiplexBUD.ID, MultiplexBUD.getPropDefault(MultiplexBUD.ID), ...
	MultiplexBUD.LABEL, MultiplexBUD.getPropDefault(MultiplexBUD.LABEL), ...
	MultiplexBUD.NOTES, MultiplexBUD.getPropDefault(MultiplexBUD.NOTES), ...
	MultiplexBUD.BRAINATLAS, MultiplexBUD.getPropDefault(MultiplexBUD.BRAINATLAS), ...
	MultiplexBUD.A, MultiplexBUD.getPropDefault(MultiplexBUD.A), ...
	MultiplexBUD.M_DICT, MultiplexBUD.getPropDefault(MultiplexBUD.M_DICT), ...
	MultiplexBUD.B, MultiplexBUD.getPropDefault(MultiplexBUD.B), ...
	MultiplexBUD.ATTEMPTSPEREDGE, MultiplexBUD.getPropDefault(MultiplexBUD.ATTEMPTSPEREDGE), ...
	MultiplexBUD.NUMBEROFWEIGHTS, MultiplexBUD.getPropDefault(MultiplexBUD.NUMBEROFWEIGHTS), ...
	MultiplexBUD.DENSITIES, MultiplexBUD.getPropDefault(MultiplexBUD.DENSITIES), ...
	MultiplexBUD.NODELABELS, MultiplexBUD.getPropDefault(MultiplexBUD.NODELABELS) ...
	);
warning('on', 'BRAPH2:MultiplexBUD')

prop_number = MultiplexBUD.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexBUD.getPropTag(prop));
	switch MultiplexBUD.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(g.getPropSettings(prop))
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
					[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
					['MultiplexBUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
					[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
					['MultiplexBUD.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:MultiplexBUD')
g = MultiplexBUD( ...
	MultiplexBUD.ID, MultiplexBUD.getPropDefault(MultiplexBUD.ID), ...
	MultiplexBUD.LABEL, MultiplexBUD.getPropDefault(MultiplexBUD.LABEL), ...
	MultiplexBUD.NOTES, MultiplexBUD.getPropDefault(MultiplexBUD.NOTES), ...
	MultiplexBUD.BRAINATLAS, MultiplexBUD.getPropDefault(MultiplexBUD.BRAINATLAS), ...
	MultiplexBUD.A, MultiplexBUD.getPropDefault(MultiplexBUD.A), ...
	MultiplexBUD.M_DICT, MultiplexBUD.getPropDefault(MultiplexBUD.M_DICT), ...
	MultiplexBUD.B, MultiplexBUD.getPropDefault(MultiplexBUD.B), ...
	MultiplexBUD.ATTEMPTSPEREDGE, MultiplexBUD.getPropDefault(MultiplexBUD.ATTEMPTSPEREDGE), ...
	MultiplexBUD.NUMBEROFWEIGHTS, MultiplexBUD.getPropDefault(MultiplexBUD.NUMBEROFWEIGHTS), ...
	MultiplexBUD.DENSITIES, MultiplexBUD.getPropDefault(MultiplexBUD.DENSITIES), ...
	MultiplexBUD.NODELABELS, MultiplexBUD.getPropDefault(MultiplexBUD.NODELABELS) ...
	);
warning('on', 'BRAPH2:MultiplexBUD')

for prop = 1:1:MultiplexBUD.getPropNumber()
	TAG = upper(MultiplexBUD.getPropTag(prop));
	switch MultiplexBUD.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(g.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
				[BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_FUNC], ...
				['MultiplexBUD.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Constructor

A = [
     0 .1 .2 .3 .4
    .1  0 .5 .6 .7
    .2 .5  0 .8 .9
    .3 .6 .8  0  1
    .4 .7 .9  1  0
    ];
B = {A, A};

g = MultiplexBUD('B', B, 'DENSITIES', [0 55 100]);

A = g.get('A');

assert( ...
    sum(sum(A{1, 1})) == 0 && ...
    sum(sum(A{2, 2})) == 0 && ...
    sum(sum(A{3, 3})) == 10 && ...
    sum(sum(A{4, 4})) == 10 && ...
    sum(sum(A{5, 5})) == 20 && ...
    sum(sum(A{6, 6})) == 20, ...
    [BRAPH2.STR ':MultiplexBUD:' BRAPH2.BUG_ERR], ...
    'MultiplexBUD is not constructing well.')

