%TEST_MULTIGRAPHBUT

%% Test 1.1: Instantiation - empty

g = MultigraphBUT();

prop_number = MultigraphBUT.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUT.getPropTag(prop));
	assert( ...
		isa(g.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
		['MultigraphBUT.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultigraphBUT.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(g.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
		['MultigraphBUT.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultigraphBUT.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:MultigraphBUT')
g = MultigraphBUT( ...
	MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
	MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
	MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
	MultigraphBUT.BRAINATLAS, MultigraphBUT.getPropDefault(MultigraphBUT.BRAINATLAS), ...
	MultigraphBUT.A, MultigraphBUT.getPropDefault(MultigraphBUT.A), ...
	MultigraphBUT.M_DICT, MultigraphBUT.getPropDefault(MultigraphBUT.M_DICT), ...
	MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
	MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
	MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
	MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
	);
warning('on', 'BRAPH2:MultigraphBUT')

for prop = 1:1:MultigraphBUT.getPropNumber()
	TAG = upper(MultigraphBUT.getPropTag(prop));
	switch MultigraphBUT.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(g.getr(prop), MultigraphBUT.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by MultigraphBUT.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultigraphBUT.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(g.getr(TAG), MultigraphBUT.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by MultigraphBUT.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultigraphBUT.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(g.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultigraphBUT.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultigraphBUT.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(g.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultigraphBUT.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultigraphBUT.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:MultigraphBUT')
g_0 = MultigraphBUT( ...
	MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
	MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
	MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
	MultigraphBUT.BRAINATLAS, MultigraphBUT.getPropDefault(MultigraphBUT.BRAINATLAS), ...
	MultigraphBUT.A, MultigraphBUT.getPropDefault(MultigraphBUT.A), ...
	MultigraphBUT.M_DICT, MultigraphBUT.getPropDefault(MultigraphBUT.M_DICT), ...
	MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
	MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
	MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
	MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
	);
warning('on', 'BRAPH2:MultigraphBUT')

g_1 = MultigraphBUT( ...
	MultigraphBUT.ID, Callback('EL', g_0, 'PROP', 1), ...
	MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
	MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
	MultigraphBUT.BRAINATLAS, Callback('EL', g_0, 'PROP', 4), ...
	MultigraphBUT.A, NoValue(), ...
	MultigraphBUT.M_DICT, NoValue(), ...
	MultigraphBUT.B, Callback('EL', g_0, 'PROP', 7), ...
	MultigraphBUT.ATTEMPTSPEREDGE, Callback('EL', g_0, 'PROP', 8), ...
	MultigraphBUT.NUMBEROFWEIGHTS, Callback('EL', g_0, 'PROP', 9), ...
	MultigraphBUT.THRESHOLDS, Callback('EL', g_0, 'PROP', 10) ...
	);
	
prop_number = MultigraphBUT.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUT.getPropTag(prop));
	switch MultigraphBUT.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_1.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_2 = MultigraphBUT( ...
	MultigraphBUT.ID, Callback('EL', g_1, 'PROP', 1), ...
	MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
	MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
	MultigraphBUT.BRAINATLAS, Callback('EL', g_1, 'PROP', 4), ...
	MultigraphBUT.A, NoValue(), ...
	MultigraphBUT.M_DICT, NoValue(), ...
	MultigraphBUT.B, Callback('EL', g_1, 'PROP', 7), ...
	MultigraphBUT.ATTEMPTSPEREDGE, Callback('EL', g_1, 'PROP', 8), ...
	MultigraphBUT.NUMBEROFWEIGHTS, Callback('EL', g_1, 'PROP', 9), ...
	MultigraphBUT.THRESHOLDS, Callback('EL', g_1, 'PROP', 10) ...
	);
	
prop_number = MultigraphBUT.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUT.getPropTag(prop));
	switch MultigraphBUT.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_2.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
g_3 = MultigraphBUT( ...
	MultigraphBUT.ID, Callback('EL', g_2, 'PROP', 1), ...
	MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
	MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
	MultigraphBUT.BRAINATLAS, Callback('EL', g_2, 'PROP', 4), ...
	MultigraphBUT.A, NoValue(), ...
	MultigraphBUT.M_DICT, NoValue(), ...
	MultigraphBUT.B, Callback('EL', g_2, 'PROP', 7), ...
	MultigraphBUT.ATTEMPTSPEREDGE, Callback('EL', g_2, 'PROP', 8), ...
	MultigraphBUT.NUMBEROFWEIGHTS, Callback('EL', g_2, 'PROP', 9), ...
	MultigraphBUT.THRESHOLDS, Callback('EL', g_2, 'PROP', 10) ...
	);
	
prop_number = MultigraphBUT.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUT.getPropTag(prop));
	switch MultigraphBUT.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(g_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(g_3.get(prop), g_0.get(prop)) && ~isa(g_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(g_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:MultigraphBUT')
g = MultigraphBUT( ...
	MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
	MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
	MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
	MultigraphBUT.BRAINATLAS, MultigraphBUT.getPropDefault(MultigraphBUT.BRAINATLAS), ...
	MultigraphBUT.A, MultigraphBUT.getPropDefault(MultigraphBUT.A), ...
	MultigraphBUT.M_DICT, MultigraphBUT.getPropDefault(MultigraphBUT.M_DICT), ...
	MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
	MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
	MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
	MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
	);
warning('on', 'BRAPH2:MultigraphBUT')

prop_number = MultigraphBUT.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultigraphBUT.getPropTag(prop));
	switch MultigraphBUT.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(g.getPropSettings(prop))
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop)), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
					['MultigraphBUT.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					g.checkFormat(g.getPropFormat(prop), g.get(prop), g.getPropSettings(prop)), ...
					[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
					['MultigraphBUT.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:MultigraphBUT')
g = MultigraphBUT( ...
	MultigraphBUT.ID, MultigraphBUT.getPropDefault(MultigraphBUT.ID), ...
	MultigraphBUT.LABEL, MultigraphBUT.getPropDefault(MultigraphBUT.LABEL), ...
	MultigraphBUT.NOTES, MultigraphBUT.getPropDefault(MultigraphBUT.NOTES), ...
	MultigraphBUT.BRAINATLAS, MultigraphBUT.getPropDefault(MultigraphBUT.BRAINATLAS), ...
	MultigraphBUT.A, MultigraphBUT.getPropDefault(MultigraphBUT.A), ...
	MultigraphBUT.M_DICT, MultigraphBUT.getPropDefault(MultigraphBUT.M_DICT), ...
	MultigraphBUT.B, MultigraphBUT.getPropDefault(MultigraphBUT.B), ...
	MultigraphBUT.ATTEMPTSPEREDGE, MultigraphBUT.getPropDefault(MultigraphBUT.ATTEMPTSPEREDGE), ...
	MultigraphBUT.NUMBEROFWEIGHTS, MultigraphBUT.getPropDefault(MultigraphBUT.NUMBEROFWEIGHTS), ...
	MultigraphBUT.THRESHOLDS, MultigraphBUT.getPropDefault(MultigraphBUT.THRESHOLDS) ...
	);
warning('on', 'BRAPH2:MultigraphBUT')

for prop = 1:1:MultigraphBUT.getPropNumber()
	TAG = upper(MultigraphBUT.getPropTag(prop));
	switch MultigraphBUT.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(g.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(g.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(g.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				g.checkFormat(g.getPropFormat(prop), g.getr(prop),g.getPropSettings(prop)), ...
				[BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_FUNC], ...
				['MultigraphBUT.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: Constructor

B = [
    0 .1 .2 .3 .4
    .1 0 .1 .2 .3
    .2 .1 0 .1 .2
    .3 .2 .1 0 .1
    .4 .3 .2 .1 0
    ];
g = MultigraphBUT('B', B, 'THRESHOLDS', [0 .1 .2 .3 .4 .5]);

A = g.get('A');

assert(isequal( ...
    A{1, 1}, ...
    [
    0 1 1 1 1
    1 0 1 1 1
    1 1 0 1 1
    1 1 1 0 1
    1 1 1 1 0
    ]) ...
    && ...
    isequal( ...
    A{2, 2}, ...
    [
    0 0 1 1 1
    0 0 0 1 1
    1 0 0 0 1
    1 1 0 0 0
    1 1 1 0 0
    ]) ...
    && ...
    isequal( ...
    A{3, 3}, ...
    [
    0 0 0 1 1
    0 0 0 0 1
    0 0 0 0 0
    1 0 0 0 0
    1 1 0 0 0
    ]) ...
    && ...
    isequal( ...
    A{4, 4}, ...
    [
    0 0 0 0 1
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    1 0 0 0 0
    ]) ...
    && ...
    isequal( ...
    A{5, 5}, ...
    [
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    ]) ...
    && ...
    isequal( ...
    A{6, 6}, ...
    [
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
    ]), ...
    [BRAPH2.STR ':MultigraphBUT:' BRAPH2.BUG_ERR], ...
    'MultigraphBUT is not constructing well.')

