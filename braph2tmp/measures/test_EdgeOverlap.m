%TEST_EDGEOVERLAP

%% Test 1.1: Instantiation - empty

m = EdgeOverlap();

prop_number = EdgeOverlap.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(EdgeOverlap.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
		['EdgeOverlap.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in EdgeOverlap.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
		['EdgeOverlap.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in EdgeOverlap.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:EdgeOverlap')
m = EdgeOverlap( ...
	EdgeOverlap.ID, EdgeOverlap.getPropDefault(EdgeOverlap.ID), ...
	EdgeOverlap.LABEL, EdgeOverlap.getPropDefault(EdgeOverlap.LABEL), ...
	EdgeOverlap.NOTES, EdgeOverlap.getPropDefault(EdgeOverlap.NOTES), ...
	EdgeOverlap.G, EdgeOverlap.getPropDefault(EdgeOverlap.G), ...
	EdgeOverlap.M, EdgeOverlap.getPropDefault(EdgeOverlap.M) ...
	);
warning('on', 'BRAPH2:EdgeOverlap')

for prop = 1:1:EdgeOverlap.getPropNumber()
	TAG = upper(EdgeOverlap.getPropTag(prop));
	switch EdgeOverlap.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), EdgeOverlap.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by EdgeOverlap.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in EdgeOverlap.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), EdgeOverlap.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by EdgeOverlap.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in EdgeOverlap.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['Being a result, EdgeOverlap.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in EdgeOverlap.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['Being a result, EdgeOverlap.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in EdgeOverlap.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:EdgeOverlap')
m_0 = EdgeOverlap( ...
	EdgeOverlap.ID, EdgeOverlap.getPropDefault(EdgeOverlap.ID), ...
	EdgeOverlap.LABEL, EdgeOverlap.getPropDefault(EdgeOverlap.LABEL), ...
	EdgeOverlap.NOTES, EdgeOverlap.getPropDefault(EdgeOverlap.NOTES), ...
	EdgeOverlap.G, EdgeOverlap.getPropDefault(EdgeOverlap.G), ...
	EdgeOverlap.M, EdgeOverlap.getPropDefault(EdgeOverlap.M) ...
	);
warning('on', 'BRAPH2:EdgeOverlap')

m_1 = EdgeOverlap( ...
	EdgeOverlap.ID, Callback('EL', m_0, 'PROP', 1), ...
	EdgeOverlap.LABEL, EdgeOverlap.getPropDefault(EdgeOverlap.LABEL), ...
	EdgeOverlap.NOTES, EdgeOverlap.getPropDefault(EdgeOverlap.NOTES), ...
	EdgeOverlap.G, Callback('EL', m_0, 'PROP', 4), ...
	EdgeOverlap.M, NoValue() ...
	);
	
prop_number = EdgeOverlap.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(EdgeOverlap.getPropTag(prop));
	switch EdgeOverlap.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = EdgeOverlap( ...
	EdgeOverlap.ID, Callback('EL', m_1, 'PROP', 1), ...
	EdgeOverlap.LABEL, EdgeOverlap.getPropDefault(EdgeOverlap.LABEL), ...
	EdgeOverlap.NOTES, EdgeOverlap.getPropDefault(EdgeOverlap.NOTES), ...
	EdgeOverlap.G, Callback('EL', m_1, 'PROP', 4), ...
	EdgeOverlap.M, NoValue() ...
	);
	
prop_number = EdgeOverlap.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(EdgeOverlap.getPropTag(prop));
	switch EdgeOverlap.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = EdgeOverlap( ...
	EdgeOverlap.ID, Callback('EL', m_2, 'PROP', 1), ...
	EdgeOverlap.LABEL, EdgeOverlap.getPropDefault(EdgeOverlap.LABEL), ...
	EdgeOverlap.NOTES, EdgeOverlap.getPropDefault(EdgeOverlap.NOTES), ...
	EdgeOverlap.G, Callback('EL', m_2, 'PROP', 4), ...
	EdgeOverlap.M, NoValue() ...
	);
	
prop_number = EdgeOverlap.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(EdgeOverlap.getPropTag(prop));
	switch EdgeOverlap.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:EdgeOverlap')
m = EdgeOverlap( ...
	EdgeOverlap.ID, EdgeOverlap.getPropDefault(EdgeOverlap.ID), ...
	EdgeOverlap.LABEL, EdgeOverlap.getPropDefault(EdgeOverlap.LABEL), ...
	EdgeOverlap.NOTES, EdgeOverlap.getPropDefault(EdgeOverlap.NOTES), ...
	EdgeOverlap.G, EdgeOverlap.getPropDefault(EdgeOverlap.G), ...
	EdgeOverlap.M, EdgeOverlap.getPropDefault(EdgeOverlap.M) ...
	);
warning('on', 'BRAPH2:EdgeOverlap')

prop_number = EdgeOverlap.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(EdgeOverlap.getPropTag(prop));
	switch EdgeOverlap.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
					['EdgeOverlap.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
					['EdgeOverlap.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:EdgeOverlap')
m = EdgeOverlap( ...
	EdgeOverlap.ID, EdgeOverlap.getPropDefault(EdgeOverlap.ID), ...
	EdgeOverlap.LABEL, EdgeOverlap.getPropDefault(EdgeOverlap.LABEL), ...
	EdgeOverlap.NOTES, EdgeOverlap.getPropDefault(EdgeOverlap.NOTES), ...
	EdgeOverlap.G, EdgeOverlap.getPropDefault(EdgeOverlap.G), ...
	EdgeOverlap.M, EdgeOverlap.getPropDefault(EdgeOverlap.M) ...
	);
warning('on', 'BRAPH2:EdgeOverlap')

for prop = 1:1:EdgeOverlap.getPropNumber()
	TAG = upper(EdgeOverlap.getPropTag(prop));
	switch EdgeOverlap.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_FUNC], ...
				['EdgeOverlap.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: MultiplexBU

B11 = [
    0   1   1
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   1
    0   1   0
    ];
B = {B11 B22};

known_edge_overlap = {[
    0   1   .5
    1   0   .5
    .5  .5  0
    ]};

g = MultiplexBU('B', B);
edge_overlap = EdgeOverlap('G', g);
 
assert(isequal(edge_overlap.get('M'), known_edge_overlap), ...
    [BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_ERR], ...
    'EdgeOverlap is not being calculated correctly for MultiplexBU.')

%% Test 6: MultiplexBUT

B11 = [
    0   1   1
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   1
    0   1   0
    ];
B = {B11 B22};

known_edge_overlap_1 = [
    0   1   .5
    1   0   .5
    .5  .5  0
    ];
known_edge_overlap = {
                      known_edge_overlap_1
                      zeros(3)
                      };

g = MultiplexBUT('B', B, 'THRESHOLDS', [0 1]);
edge_overlap = EdgeOverlap('G', g);
 
assert(isequal(edge_overlap.get('M'), known_edge_overlap), ...
    [BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_ERR], ...
    'EdgeOverlap is not being calculated correctly for MultiplexBUT.')

%% Test 7: MultiplexBD

B11 = [
    0   1   0
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   1
    0   1   0
    ];
B = {B11 B22};

known_edge_overlap = {[
    0   1   0
    1   0   .5
    .5  .5  0
    ]};

g = MultiplexBD('B', B);
edge_overlap = EdgeOverlap('G', g);

assert(isequal(edge_overlap.get('M'), known_edge_overlap), ...
    [BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_ERR], ...
    'EdgeOverlap is not being calculated correctly for MultiplexBD')

%% Test 8: MultiplexWU

B11 = [
    0   .2  1
    .2  0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   .3
    0   .3  0
    ];
B = {B11 B22};

known_edge_overlap = {[
    0   1   .5
    1   0   .5
    .5  .5  0
    ]};

g = MultiplexWU('B', B);
edge_overlap = EdgeOverlap('G', g);

assert(isequal(edge_overlap.get('M'), known_edge_overlap), ...
    [BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_ERR], ...
    'EdgeOverlap is not being calculated correctly for MultiplexWU')

%% Test 9: MultiplexWD

B11 = [
    0   .2  0
    .2  0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   .3
    0   .3  0
    ];
B = {B11 B22};

known_edge_overlap = {[
    0   1   0
    1   0   .5
    .5  .5  0
    ]};

g = MultiplexWD('B', B);
edge_overlap = EdgeOverlap('G', g);

assert(isequal(edge_overlap.get('M'), known_edge_overlap), ...
    [BRAPH2.STR ':EdgeOverlap:' BRAPH2.BUG_ERR], ...
    'EdgeOverlap is not being calculated correctly for MultiplexWD')

