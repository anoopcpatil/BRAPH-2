%TEST_INDEGREE

%% Test 1.1: Instantiation - empty

m = InDegree();

prop_number = InDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InDegree.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
		['InDegree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in InDegree.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
		['InDegree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in InDegree.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:InDegree')
m = InDegree( ...
	InDegree.ID, InDegree.getPropDefault(InDegree.ID), ...
	InDegree.LABEL, InDegree.getPropDefault(InDegree.LABEL), ...
	InDegree.NOTES, InDegree.getPropDefault(InDegree.NOTES), ...
	InDegree.G, InDegree.getPropDefault(InDegree.G), ...
	InDegree.M, InDegree.getPropDefault(InDegree.M) ...
	);
warning('on', 'BRAPH2:InDegree')

for prop = 1:1:InDegree.getPropNumber()
	TAG = upper(InDegree.getPropTag(prop));
	switch InDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), InDegree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by InDegree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in InDegree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), InDegree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by InDegree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in InDegree.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['Being a result, InDegree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in InDegree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['Being a result, InDegree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in InDegree.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:InDegree')
m_0 = InDegree( ...
	InDegree.ID, InDegree.getPropDefault(InDegree.ID), ...
	InDegree.LABEL, InDegree.getPropDefault(InDegree.LABEL), ...
	InDegree.NOTES, InDegree.getPropDefault(InDegree.NOTES), ...
	InDegree.G, InDegree.getPropDefault(InDegree.G), ...
	InDegree.M, InDegree.getPropDefault(InDegree.M) ...
	);
warning('on', 'BRAPH2:InDegree')

m_1 = InDegree( ...
	InDegree.ID, Callback('EL', m_0, 'PROP', 1), ...
	InDegree.LABEL, InDegree.getPropDefault(InDegree.LABEL), ...
	InDegree.NOTES, InDegree.getPropDefault(InDegree.NOTES), ...
	InDegree.G, Callback('EL', m_0, 'PROP', 4), ...
	InDegree.M, NoValue() ...
	);
	
prop_number = InDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InDegree.getPropTag(prop));
	switch InDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = InDegree( ...
	InDegree.ID, Callback('EL', m_1, 'PROP', 1), ...
	InDegree.LABEL, InDegree.getPropDefault(InDegree.LABEL), ...
	InDegree.NOTES, InDegree.getPropDefault(InDegree.NOTES), ...
	InDegree.G, Callback('EL', m_1, 'PROP', 4), ...
	InDegree.M, NoValue() ...
	);
	
prop_number = InDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InDegree.getPropTag(prop));
	switch InDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = InDegree( ...
	InDegree.ID, Callback('EL', m_2, 'PROP', 1), ...
	InDegree.LABEL, InDegree.getPropDefault(InDegree.LABEL), ...
	InDegree.NOTES, InDegree.getPropDefault(InDegree.NOTES), ...
	InDegree.G, Callback('EL', m_2, 'PROP', 4), ...
	InDegree.M, NoValue() ...
	);
	
prop_number = InDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InDegree.getPropTag(prop));
	switch InDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:InDegree')
m = InDegree( ...
	InDegree.ID, InDegree.getPropDefault(InDegree.ID), ...
	InDegree.LABEL, InDegree.getPropDefault(InDegree.LABEL), ...
	InDegree.NOTES, InDegree.getPropDefault(InDegree.NOTES), ...
	InDegree.G, InDegree.getPropDefault(InDegree.G), ...
	InDegree.M, InDegree.getPropDefault(InDegree.M) ...
	);
warning('on', 'BRAPH2:InDegree')

prop_number = InDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InDegree.getPropTag(prop));
	switch InDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
					['InDegree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
					['InDegree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:InDegree')
m = InDegree( ...
	InDegree.ID, InDegree.getPropDefault(InDegree.ID), ...
	InDegree.LABEL, InDegree.getPropDefault(InDegree.LABEL), ...
	InDegree.NOTES, InDegree.getPropDefault(InDegree.NOTES), ...
	InDegree.G, InDegree.getPropDefault(InDegree.G), ...
	InDegree.M, InDegree.getPropDefault(InDegree.M) ...
	);
warning('on', 'BRAPH2:InDegree')

for prop = 1:1:InDegree.getPropNumber()
	TAG = upper(InDegree.getPropTag(prop));
	switch InDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':InDegree:' BRAPH2.BUG_FUNC], ...
				['InDegree.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBD

B = [
    0   1   1
    0   0   0
    1   0   0
    ];

known_in_degree = {[1 1 1]'};

g = GraphBD('B', B);

m_outside_g = InDegree('G', g);
assert(isequal(m_outside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for GraphBD.')

m_inside_g = g.getMeasure('InDegree');
assert(isequal(m_inside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for GraphBD.')

%% Test 6: GraphWD

B = [
    0   .2  1
    0   0   .8
    1   0   0
    ];

known_in_degree = {[1 1 2]'};

g = GraphWD('B', B);

m_outside_g = InDegree('G', g);
assert(isequal(m_outside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for GraphWD.')

m_inside_g = g.getMeasure('InDegree');
assert(isequal(m_inside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for GraphWD.')

%% Test 7: MultiplexBD

B11 = [
      0  1  1
      0  0  0
      1  0  0
      ];
B22 = [
       0  1  0
       1  0  1
       1  1  0
       ];
B = {B11 B22};

known_in_degree = { 
                  [1 1 1]'
                  [2 2 1]'
                  };

g = MultiplexBD('B', B);

m_outside_g = InDegree('G', g);
assert(isequal(m_outside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for MultiplexBD.')

m_inside_g = g.getMeasure('InDegree');
assert(isequal(m_inside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for MultiplexBD.')

%% Test 8: MultiplexWD

B11 = [
      0   .2  1
      0   0   .8
      1   0   0
      ];
B22 = [
      0  1   .6
      1  0   .4
      0  .4  0
      ];
B = {B11 B22};

known_in_degree = {
                  [1 1 2]'
                  [1 2 2]'
                  };

g = MultiplexWD('B', B);

m_outside_g = InDegree('G', g);
assert(isequal(m_outside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for MultiplexWD.')

m_inside_g = g.getMeasure('InDegree');
assert(isequal(m_inside_g.get('M'), known_in_degree), ...
    [BRAPH2.STR ':InDegree:' BRAPH2.BUG_ERR], ...
    'InDegree is not being calculated correctly for MultiplexWD.')

