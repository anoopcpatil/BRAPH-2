%TEST_STRENGTH

%% Test 1.1: Instantiation - empty

m = Strength();

prop_number = Strength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Strength.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
		['Strength.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Strength.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
		['Strength.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Strength.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Strength')
m = Strength( ...
	Strength.ID, Strength.getPropDefault(Strength.ID), ...
	Strength.LABEL, Strength.getPropDefault(Strength.LABEL), ...
	Strength.NOTES, Strength.getPropDefault(Strength.NOTES), ...
	Strength.G, Strength.getPropDefault(Strength.G), ...
	Strength.M, Strength.getPropDefault(Strength.M) ...
	);
warning('on', 'BRAPH2:Strength')

for prop = 1:1:Strength.getPropNumber()
	TAG = upper(Strength.getPropTag(prop));
	switch Strength.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Strength.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Strength.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Strength.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Strength.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Strength.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Strength.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Being a result, Strength.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Strength.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Being a result, Strength.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Strength.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Strength')
m_0 = Strength( ...
	Strength.ID, Strength.getPropDefault(Strength.ID), ...
	Strength.LABEL, Strength.getPropDefault(Strength.LABEL), ...
	Strength.NOTES, Strength.getPropDefault(Strength.NOTES), ...
	Strength.G, Strength.getPropDefault(Strength.G), ...
	Strength.M, Strength.getPropDefault(Strength.M) ...
	);
warning('on', 'BRAPH2:Strength')

m_1 = Strength( ...
	Strength.ID, Callback('EL', m_0, 'PROP', 1), ...
	Strength.LABEL, Strength.getPropDefault(Strength.LABEL), ...
	Strength.NOTES, Strength.getPropDefault(Strength.NOTES), ...
	Strength.G, Callback('EL', m_0, 'PROP', 4), ...
	Strength.M, NoValue() ...
	);
	
prop_number = Strength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Strength.getPropTag(prop));
	switch Strength.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Strength( ...
	Strength.ID, Callback('EL', m_1, 'PROP', 1), ...
	Strength.LABEL, Strength.getPropDefault(Strength.LABEL), ...
	Strength.NOTES, Strength.getPropDefault(Strength.NOTES), ...
	Strength.G, Callback('EL', m_1, 'PROP', 4), ...
	Strength.M, NoValue() ...
	);
	
prop_number = Strength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Strength.getPropTag(prop));
	switch Strength.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Strength( ...
	Strength.ID, Callback('EL', m_2, 'PROP', 1), ...
	Strength.LABEL, Strength.getPropDefault(Strength.LABEL), ...
	Strength.NOTES, Strength.getPropDefault(Strength.NOTES), ...
	Strength.G, Callback('EL', m_2, 'PROP', 4), ...
	Strength.M, NoValue() ...
	);
	
prop_number = Strength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Strength.getPropTag(prop));
	switch Strength.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Strength')
m = Strength( ...
	Strength.ID, Strength.getPropDefault(Strength.ID), ...
	Strength.LABEL, Strength.getPropDefault(Strength.LABEL), ...
	Strength.NOTES, Strength.getPropDefault(Strength.NOTES), ...
	Strength.G, Strength.getPropDefault(Strength.G), ...
	Strength.M, Strength.getPropDefault(Strength.M) ...
	);
warning('on', 'BRAPH2:Strength')

prop_number = Strength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Strength.getPropTag(prop));
	switch Strength.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
					['Strength.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
					['Strength.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Strength')
m = Strength( ...
	Strength.ID, Strength.getPropDefault(Strength.ID), ...
	Strength.LABEL, Strength.getPropDefault(Strength.LABEL), ...
	Strength.NOTES, Strength.getPropDefault(Strength.NOTES), ...
	Strength.G, Strength.getPropDefault(Strength.G), ...
	Strength.M, Strength.getPropDefault(Strength.M) ...
	);
warning('on', 'BRAPH2:Strength')

for prop = 1:1:Strength.getPropNumber()
	TAG = upper(Strength.getPropTag(prop));
	switch Strength.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Strength:' BRAPH2.BUG_FUNC], ...
				['Strength.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphWU

B = [
    0  .2 1
    .2 0  0
    1  0  0
    ];
known_strength = {[1.2 0.2 1]'};
g = GraphWU('B', B);
s_outside_g = Strength('G', g);

assert(isequal(s_outside_g.get('M'), known_strength), ...
    [BRAPH2.STR ':Strength:' BRAPH2.BUG_ERR], ...
    'Strength is not being calculated correctly for GraphWU.')

%% Test 6: MultiplexWU

B11 = [
    0  .2 1
    .2 0  0
    1  0  0
    ];
B22 = [
    0 1  0
    1 0  .4
    0 .4 0
    ];
B = {B11 B22};

known_strength = {
                 [1.2 .2  1]'
                 [1   1.4 .4]'
                 };
                                
g = MultiplexWU('B', B);
strength = Strength('G', g);

assert(isequal(strength.get('M'), known_strength), ...
    [BRAPH2.STR ':Strength:' BRAPH2.BUG_ERR], ...
    'Strength is not being calculated correctly for MultiplexWU.')

