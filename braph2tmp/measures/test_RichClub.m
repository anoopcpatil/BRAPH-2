%TEST_RICHCLUB

%% Test 1.1: Instantiation - empty

m = RichClub();

prop_number = RichClub.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClub.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
		['RichClub.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in RichClub.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
		['RichClub.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in RichClub.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:RichClub')
m = RichClub( ...
	RichClub.ID, RichClub.getPropDefault(RichClub.ID), ...
	RichClub.LABEL, RichClub.getPropDefault(RichClub.LABEL), ...
	RichClub.NOTES, RichClub.getPropDefault(RichClub.NOTES), ...
	RichClub.G, RichClub.getPropDefault(RichClub.G), ...
	RichClub.M, RichClub.getPropDefault(RichClub.M), ...
	RichClub.PARAMETRIC_VALUE, RichClub.getPropDefault(RichClub.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClub')

for prop = 1:1:RichClub.getPropNumber()
	TAG = upper(RichClub.getPropTag(prop));
	switch RichClub.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), RichClub.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by RichClub.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in RichClub.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), RichClub.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by RichClub.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in RichClub.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['Being a result, RichClub.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in RichClub.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['Being a result, RichClub.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in RichClub.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:RichClub')
m_0 = RichClub( ...
	RichClub.ID, RichClub.getPropDefault(RichClub.ID), ...
	RichClub.LABEL, RichClub.getPropDefault(RichClub.LABEL), ...
	RichClub.NOTES, RichClub.getPropDefault(RichClub.NOTES), ...
	RichClub.G, RichClub.getPropDefault(RichClub.G), ...
	RichClub.M, RichClub.getPropDefault(RichClub.M), ...
	RichClub.PARAMETRIC_VALUE, RichClub.getPropDefault(RichClub.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClub')

m_1 = RichClub( ...
	RichClub.ID, Callback('EL', m_0, 'PROP', 1), ...
	RichClub.LABEL, RichClub.getPropDefault(RichClub.LABEL), ...
	RichClub.NOTES, RichClub.getPropDefault(RichClub.NOTES), ...
	RichClub.G, Callback('EL', m_0, 'PROP', 4), ...
	RichClub.M, NoValue(), ...
	RichClub.PARAMETRIC_VALUE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = RichClub.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClub.getPropTag(prop));
	switch RichClub.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = RichClub( ...
	RichClub.ID, Callback('EL', m_1, 'PROP', 1), ...
	RichClub.LABEL, RichClub.getPropDefault(RichClub.LABEL), ...
	RichClub.NOTES, RichClub.getPropDefault(RichClub.NOTES), ...
	RichClub.G, Callback('EL', m_1, 'PROP', 4), ...
	RichClub.M, NoValue(), ...
	RichClub.PARAMETRIC_VALUE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = RichClub.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClub.getPropTag(prop));
	switch RichClub.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = RichClub( ...
	RichClub.ID, Callback('EL', m_2, 'PROP', 1), ...
	RichClub.LABEL, RichClub.getPropDefault(RichClub.LABEL), ...
	RichClub.NOTES, RichClub.getPropDefault(RichClub.NOTES), ...
	RichClub.G, Callback('EL', m_2, 'PROP', 4), ...
	RichClub.M, NoValue(), ...
	RichClub.PARAMETRIC_VALUE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = RichClub.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClub.getPropTag(prop));
	switch RichClub.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:RichClub')
m = RichClub( ...
	RichClub.ID, RichClub.getPropDefault(RichClub.ID), ...
	RichClub.LABEL, RichClub.getPropDefault(RichClub.LABEL), ...
	RichClub.NOTES, RichClub.getPropDefault(RichClub.NOTES), ...
	RichClub.G, RichClub.getPropDefault(RichClub.G), ...
	RichClub.M, RichClub.getPropDefault(RichClub.M), ...
	RichClub.PARAMETRIC_VALUE, RichClub.getPropDefault(RichClub.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClub')

prop_number = RichClub.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClub.getPropTag(prop));
	switch RichClub.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
					['RichClub.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
					['RichClub.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:RichClub')
m = RichClub( ...
	RichClub.ID, RichClub.getPropDefault(RichClub.ID), ...
	RichClub.LABEL, RichClub.getPropDefault(RichClub.LABEL), ...
	RichClub.NOTES, RichClub.getPropDefault(RichClub.NOTES), ...
	RichClub.G, RichClub.getPropDefault(RichClub.G), ...
	RichClub.M, RichClub.getPropDefault(RichClub.M), ...
	RichClub.PARAMETRIC_VALUE, RichClub.getPropDefault(RichClub.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClub')

for prop = 1:1:RichClub.getPropNumber()
	TAG = upper(RichClub.getPropTag(prop));
	switch RichClub.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':RichClub:' BRAPH2.BUG_FUNC], ...
				['RichClub.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

A = [
    0  1  1  0;
    1  0  1  1;
    1  1  0  0;
    0  1  0  0
    ];

r(1, 1, 1) = 1;
r(1, 1, 2) = 0;
r(1, 1, 3) = 0;

known_richclub = {r};

g = GraphBU('B', A);
richclub = RichClub('G', g, 'PARAMETRIC_VALUE', 3).get('M');

assert(isequal(richclub, known_richclub), ...
    [BRAPH2.STR ':RichClub:' BRAPH2.BUG_ERR], ...
    'RichClub is not being calculated correctly for GraphBU.')

%% Test 6: GraphWD

A = [
    0   1   1  .1; 
    .2  0   1  1; 
    1   1   0  0;
    0   .3  0  0
    ];

r(1, 1, 1) = 3/4;
r(1, 1, 2) = 1;
r(1, 1, 3) = 0;

known_richclub = {r}; 

g = GraphWD('B', A);
richclub = RichClub('G', g, 'PARAMETRIC_VALUE', 3).get('M');

assert(isequal(richclub, known_richclub), ...
    [BRAPH2.STR ':RichClub:' BRAPH2.BUG_ERR], ...
    'RichClub is not being calculated correctly for GraphWD.')

%% Test 7: MultiplexBD

A11 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

A22 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  1  0
    ];
A = {A11  A22};

richclub_l1(1, 1, 1) = 3/4;
richclub_l1(1, 1, 2) = 1;

richclub_l2(1, 1, 1) = 5/6;
richclub_l2(1, 1, 2) = 1;

known_richclub = {
                 richclub_l1
                 richclub_l2
                 };      

g = MultiplexBD('B', A);
richclub = RichClub('G', g, 'PARAMETRIC_VALUE', 2).get('M');

assert(isequal(richclub, known_richclub), ...
    [BRAPH2.STR ':RichClub:' BRAPH2.BUG_ERR], ...
    'RichClub is not being calculated correctly for MultiplexBD.')

%% Test 8: MultiplexWD

A11 = [
    0   1   1  .1; 
    .2  0   1  1; 
    1   1   0  0;
    0   .3  0  0
    ];
A22 = [
    0   1   1   .1; 
    .2  0   1   1; 
    1   1   0   0;
    0   .3  .7  0
    ];
A = {A11 A22};

richclub_l1(1, 1, 1) = 3/4;
richclub_l1(1, 1, 2) = 1;

richclub_l2(1, 1, 1) = 5/6;
richclub_l2(1, 1, 2) = 1;

known_richclub = {
                 richclub_l1
                 richclub_l2
                 };  

g = MultiplexWD('B', A);
richclub = RichClub('G', g, 'PARAMETRIC_VALUE', 2).get('M');

assert(isequal(richclub, known_richclub), ...
    [BRAPH2.STR ':RichClub:' BRAPH2.BUG_ERR], ...
    'RichClub is not being calculated correctly for MultiplexWD.')

