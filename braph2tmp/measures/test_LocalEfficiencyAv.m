%TEST_LOCALEFFICIENCYAV

%% Test 1.1: Instantiation - empty

m = LocalEfficiencyAv();

prop_number = LocalEfficiencyAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(LocalEfficiencyAv.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
		['LocalEfficiencyAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in LocalEfficiencyAv.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
		['LocalEfficiencyAv.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in LocalEfficiencyAv.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:LocalEfficiencyAv')
m = LocalEfficiencyAv( ...
	LocalEfficiencyAv.ID, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.ID), ...
	LocalEfficiencyAv.LABEL, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.LABEL), ...
	LocalEfficiencyAv.NOTES, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.NOTES), ...
	LocalEfficiencyAv.G, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.G), ...
	LocalEfficiencyAv.M, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.M) ...
	);
warning('on', 'BRAPH2:LocalEfficiencyAv')

for prop = 1:1:LocalEfficiencyAv.getPropNumber()
	TAG = upper(LocalEfficiencyAv.getPropTag(prop));
	switch LocalEfficiencyAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), LocalEfficiencyAv.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by LocalEfficiencyAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in LocalEfficiencyAv.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), LocalEfficiencyAv.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by LocalEfficiencyAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in LocalEfficiencyAv.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['Being a result, LocalEfficiencyAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in LocalEfficiencyAv.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['Being a result, LocalEfficiencyAv.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in LocalEfficiencyAv.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:LocalEfficiencyAv')
m_0 = LocalEfficiencyAv( ...
	LocalEfficiencyAv.ID, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.ID), ...
	LocalEfficiencyAv.LABEL, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.LABEL), ...
	LocalEfficiencyAv.NOTES, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.NOTES), ...
	LocalEfficiencyAv.G, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.G), ...
	LocalEfficiencyAv.M, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.M) ...
	);
warning('on', 'BRAPH2:LocalEfficiencyAv')

m_1 = LocalEfficiencyAv( ...
	LocalEfficiencyAv.ID, Callback('EL', m_0, 'PROP', 1), ...
	LocalEfficiencyAv.LABEL, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.LABEL), ...
	LocalEfficiencyAv.NOTES, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.NOTES), ...
	LocalEfficiencyAv.G, Callback('EL', m_0, 'PROP', 4), ...
	LocalEfficiencyAv.M, NoValue() ...
	);
	
prop_number = LocalEfficiencyAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(LocalEfficiencyAv.getPropTag(prop));
	switch LocalEfficiencyAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = LocalEfficiencyAv( ...
	LocalEfficiencyAv.ID, Callback('EL', m_1, 'PROP', 1), ...
	LocalEfficiencyAv.LABEL, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.LABEL), ...
	LocalEfficiencyAv.NOTES, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.NOTES), ...
	LocalEfficiencyAv.G, Callback('EL', m_1, 'PROP', 4), ...
	LocalEfficiencyAv.M, NoValue() ...
	);
	
prop_number = LocalEfficiencyAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(LocalEfficiencyAv.getPropTag(prop));
	switch LocalEfficiencyAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = LocalEfficiencyAv( ...
	LocalEfficiencyAv.ID, Callback('EL', m_2, 'PROP', 1), ...
	LocalEfficiencyAv.LABEL, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.LABEL), ...
	LocalEfficiencyAv.NOTES, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.NOTES), ...
	LocalEfficiencyAv.G, Callback('EL', m_2, 'PROP', 4), ...
	LocalEfficiencyAv.M, NoValue() ...
	);
	
prop_number = LocalEfficiencyAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(LocalEfficiencyAv.getPropTag(prop));
	switch LocalEfficiencyAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:LocalEfficiencyAv')
m = LocalEfficiencyAv( ...
	LocalEfficiencyAv.ID, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.ID), ...
	LocalEfficiencyAv.LABEL, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.LABEL), ...
	LocalEfficiencyAv.NOTES, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.NOTES), ...
	LocalEfficiencyAv.G, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.G), ...
	LocalEfficiencyAv.M, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.M) ...
	);
warning('on', 'BRAPH2:LocalEfficiencyAv')

prop_number = LocalEfficiencyAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(LocalEfficiencyAv.getPropTag(prop));
	switch LocalEfficiencyAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
					['LocalEfficiencyAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
					['LocalEfficiencyAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:LocalEfficiencyAv')
m = LocalEfficiencyAv( ...
	LocalEfficiencyAv.ID, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.ID), ...
	LocalEfficiencyAv.LABEL, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.LABEL), ...
	LocalEfficiencyAv.NOTES, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.NOTES), ...
	LocalEfficiencyAv.G, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.G), ...
	LocalEfficiencyAv.M, LocalEfficiencyAv.getPropDefault(LocalEfficiencyAv.M) ...
	);
warning('on', 'BRAPH2:LocalEfficiencyAv')

for prop = 1:1:LocalEfficiencyAv.getPropNumber()
	TAG = upper(LocalEfficiencyAv.getPropTag(prop));
	switch LocalEfficiencyAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_FUNC], ...
				['LocalEfficiencyAv.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B = [
    0  1  1  1
    1  0  1  0
    1  1  0  1
    1  0  1  0
    ];

known_local_efficiency_av = {mean([5/6 1 5/6 1])};

g = GraphBU('B', B);
local_efficiency_av = LocalEfficiencyAv('G', g).get('M');

assert(isequal(local_efficiency_av, known_local_efficiency_av), ...
    [BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_ERR], ...
    'LocalEfficiencyAv is not being calculated correctly for GraphBU.')

%% Test 6: GraphWU

B = [
    0   .2  .2  .1
    .2  0   .3  0
    .2  .3  0   .3
    .1  0   .3  0
    ];

known_local_efficiency_av = {mean([1/4 1/5 .1222 1/5])};

g = GraphWU('B', B);
local_efficiency_av = LocalEfficiencyAv('G', g).get('M');
assert(isequal(round(local_efficiency_av{1}, 3), round(known_local_efficiency_av{1}, 3)), ...
    [BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_ERR], ...
    'LocalEfficiencyAv is not being calculated correctly for GraphWU.')

%% Test 7: MultiplexBU

B11 = [
       0  1  1  1
       1  0  1  0
       1  1  0  1
       1  0  1  0
      ];

B22 = [
       0  1  1  1
       1  0  1  0
       1  1  0  1
       1  0  1  0
      ];
B = {B11 B22};

known_local_efficiency_av = {
                         mean([5/6 1 5/6 1])
                         mean([5/6 1 5/6 1])
                         };

g = MultiplexBU('B', B);
local_efficiency_av = LocalEfficiencyAv('G', g).get('M');

assert(isequal(local_efficiency_av, known_local_efficiency_av), ...
    [BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_ERR], ...
    'LocalEfficiencyAv is not being calculated correctly for MultiplexBU.')

%% Test 8: MultiplexWU

B11 = [
      0   .2  .2  .1
      .2  0   .3  0
      .2  .3  0   .3
      .1  0   .3  0
      ];

B22 = [
      0   .2  .2  .1
      .2  0   .3  0
      .2  .3  0   .3
      .1  0   .3  0
      ];
B = {B11 B22};

known_local_efficiency_av = {
                         round(mean([1/4 1/5 .1222 1/5]), 3)
                         round(mean([1/4 1/5 .1222 1/5]), 3)
                         };

g = MultiplexWU('B', B);
local_efficiency_av = LocalEfficiencyAv('G', g).get('M');
local_efficiency_av = cellfun(@(s) round(s, 3), local_efficiency_av, 'UniformOutput', false);

assert(isequal(local_efficiency_av, known_local_efficiency_av), ...
    [BRAPH2.STR ':LocalEfficiencyAv:' BRAPH2.BUG_ERR], ...
    'LocalEfficiencyAv is not being calculated correctly for MultiplexWU.')

