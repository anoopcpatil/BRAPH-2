%TEST_OVERLAPPINGDEGREE

%% Test 1.1: Instantiation - empty

m = OverlappingDegree();

prop_number = OverlappingDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OverlappingDegree.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
		['OverlappingDegree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in OverlappingDegree.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
		['OverlappingDegree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in OverlappingDegree.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:OverlappingDegree')
m = OverlappingDegree( ...
	OverlappingDegree.ID, OverlappingDegree.getPropDefault(OverlappingDegree.ID), ...
	OverlappingDegree.LABEL, OverlappingDegree.getPropDefault(OverlappingDegree.LABEL), ...
	OverlappingDegree.NOTES, OverlappingDegree.getPropDefault(OverlappingDegree.NOTES), ...
	OverlappingDegree.G, OverlappingDegree.getPropDefault(OverlappingDegree.G), ...
	OverlappingDegree.M, OverlappingDegree.getPropDefault(OverlappingDegree.M) ...
	);
warning('on', 'BRAPH2:OverlappingDegree')

for prop = 1:1:OverlappingDegree.getPropNumber()
	TAG = upper(OverlappingDegree.getPropTag(prop));
	switch OverlappingDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), OverlappingDegree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by OverlappingDegree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in OverlappingDegree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), OverlappingDegree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by OverlappingDegree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in OverlappingDegree.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['Being a result, OverlappingDegree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in OverlappingDegree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['Being a result, OverlappingDegree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in OverlappingDegree.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:OverlappingDegree')
m_0 = OverlappingDegree( ...
	OverlappingDegree.ID, OverlappingDegree.getPropDefault(OverlappingDegree.ID), ...
	OverlappingDegree.LABEL, OverlappingDegree.getPropDefault(OverlappingDegree.LABEL), ...
	OverlappingDegree.NOTES, OverlappingDegree.getPropDefault(OverlappingDegree.NOTES), ...
	OverlappingDegree.G, OverlappingDegree.getPropDefault(OverlappingDegree.G), ...
	OverlappingDegree.M, OverlappingDegree.getPropDefault(OverlappingDegree.M) ...
	);
warning('on', 'BRAPH2:OverlappingDegree')

m_1 = OverlappingDegree( ...
	OverlappingDegree.ID, Callback('EL', m_0, 'PROP', 1), ...
	OverlappingDegree.LABEL, OverlappingDegree.getPropDefault(OverlappingDegree.LABEL), ...
	OverlappingDegree.NOTES, OverlappingDegree.getPropDefault(OverlappingDegree.NOTES), ...
	OverlappingDegree.G, Callback('EL', m_0, 'PROP', 4), ...
	OverlappingDegree.M, NoValue() ...
	);
	
prop_number = OverlappingDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OverlappingDegree.getPropTag(prop));
	switch OverlappingDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = OverlappingDegree( ...
	OverlappingDegree.ID, Callback('EL', m_1, 'PROP', 1), ...
	OverlappingDegree.LABEL, OverlappingDegree.getPropDefault(OverlappingDegree.LABEL), ...
	OverlappingDegree.NOTES, OverlappingDegree.getPropDefault(OverlappingDegree.NOTES), ...
	OverlappingDegree.G, Callback('EL', m_1, 'PROP', 4), ...
	OverlappingDegree.M, NoValue() ...
	);
	
prop_number = OverlappingDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OverlappingDegree.getPropTag(prop));
	switch OverlappingDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = OverlappingDegree( ...
	OverlappingDegree.ID, Callback('EL', m_2, 'PROP', 1), ...
	OverlappingDegree.LABEL, OverlappingDegree.getPropDefault(OverlappingDegree.LABEL), ...
	OverlappingDegree.NOTES, OverlappingDegree.getPropDefault(OverlappingDegree.NOTES), ...
	OverlappingDegree.G, Callback('EL', m_2, 'PROP', 4), ...
	OverlappingDegree.M, NoValue() ...
	);
	
prop_number = OverlappingDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OverlappingDegree.getPropTag(prop));
	switch OverlappingDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:OverlappingDegree')
m = OverlappingDegree( ...
	OverlappingDegree.ID, OverlappingDegree.getPropDefault(OverlappingDegree.ID), ...
	OverlappingDegree.LABEL, OverlappingDegree.getPropDefault(OverlappingDegree.LABEL), ...
	OverlappingDegree.NOTES, OverlappingDegree.getPropDefault(OverlappingDegree.NOTES), ...
	OverlappingDegree.G, OverlappingDegree.getPropDefault(OverlappingDegree.G), ...
	OverlappingDegree.M, OverlappingDegree.getPropDefault(OverlappingDegree.M) ...
	);
warning('on', 'BRAPH2:OverlappingDegree')

prop_number = OverlappingDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OverlappingDegree.getPropTag(prop));
	switch OverlappingDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
					['OverlappingDegree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
					['OverlappingDegree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:OverlappingDegree')
m = OverlappingDegree( ...
	OverlappingDegree.ID, OverlappingDegree.getPropDefault(OverlappingDegree.ID), ...
	OverlappingDegree.LABEL, OverlappingDegree.getPropDefault(OverlappingDegree.LABEL), ...
	OverlappingDegree.NOTES, OverlappingDegree.getPropDefault(OverlappingDegree.NOTES), ...
	OverlappingDegree.G, OverlappingDegree.getPropDefault(OverlappingDegree.G), ...
	OverlappingDegree.M, OverlappingDegree.getPropDefault(OverlappingDegree.M) ...
	);
warning('on', 'BRAPH2:OverlappingDegree')

for prop = 1:1:OverlappingDegree.getPropNumber()
	TAG = upper(OverlappingDegree.getPropTag(prop));
	switch OverlappingDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_FUNC], ...
				['OverlappingDegree.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: MultiplexBU

B11 = [
    0   1   1
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   1
    0   1   0
    ];
B = {B11 B22};

known_overlapping_degree = {[3, 3, 2]'};

g = MultiplexBU('B', B);
overlapping_degree = OverlappingDegree('G', g);
                 
assert(isequal(overlapping_degree.get('M'), known_overlapping_degree), ...
    [BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_ERR], ...
    'OverlappingDegree is not being calculated correctly for MultiplexBU')

%% Test 6: MultiplexBUD

B11 = [
    0   1   1
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   1
    0   1   0
    ];
B = {B11 B22};

known_overlapping_degree = { ...
                            [0, 0, 0]'
                            [6, 6, 6]'
                            };

g = MultiplexBUD('B', B, 'DENSITIES', [0 100]);
overlapping_degree = OverlappingDegree('G', g);
                 
assert(isequal(overlapping_degree.get('M'), known_overlapping_degree), ...
    [BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_ERR], ...
    'OverlappingDegree is not being calculated correctly for MultiplexBUD')

%% Test 7: MultiplexBUT

B11 = [
    0   1   1
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   1
    0   1   0
    ];
B = {B11 B22};

known_overlapping_degree = { ...
                            [3, 3, 2]'
                            [0, 0, 0]'
                            };

g = MultiplexBUT('B', B, 'THRESHOLDS', [0 1]);
overlapping_degree = OverlappingDegree('G', g);
                 
assert(isequal(overlapping_degree.get('M'), known_overlapping_degree), ...
    [BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_ERR], ...
    'OverlappingDegree is not being calculated correctly for MultiplexBUT')

%% Test 8: MultiplexWU

B11 = [
    0   .2  1
    .2  0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   .3
    0   .3  0
    ];
B = {B11 B22};

known_overlapping_degree = {[3, 3, 2]'};

g = MultiplexWU('B', B);
overlapping_degree = OverlappingDegree('G', g);

assert(isequal(overlapping_degree.get('M'), known_overlapping_degree), ...
    [BRAPH2.STR ':OverlappingDegree:' BRAPH2.BUG_ERR], ...
    'OverlappingDegree is not being calculated correctly for MultiplexWU.')

