%TEST_PATHLENGTHAV

%% Test 1.1: Instantiation - empty

m = PathLengthAv();

prop_number = PathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLengthAv.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
		['PathLengthAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PathLengthAv.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
		['PathLengthAv.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PathLengthAv.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:PathLengthAv')
m = PathLengthAv( ...
	PathLengthAv.ID, PathLengthAv.getPropDefault(PathLengthAv.ID), ...
	PathLengthAv.LABEL, PathLengthAv.getPropDefault(PathLengthAv.LABEL), ...
	PathLengthAv.NOTES, PathLengthAv.getPropDefault(PathLengthAv.NOTES), ...
	PathLengthAv.G, PathLengthAv.getPropDefault(PathLengthAv.G), ...
	PathLengthAv.M, PathLengthAv.getPropDefault(PathLengthAv.M), ...
	PathLengthAv.RULE, PathLengthAv.getPropDefault(PathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:PathLengthAv')

for prop = 1:1:PathLengthAv.getPropNumber()
	TAG = upper(PathLengthAv.getPropTag(prop));
	switch PathLengthAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), PathLengthAv.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by PathLengthAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PathLengthAv.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), PathLengthAv.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by PathLengthAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PathLengthAv.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['Being a result, PathLengthAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PathLengthAv.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['Being a result, PathLengthAv.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PathLengthAv.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:PathLengthAv')
m_0 = PathLengthAv( ...
	PathLengthAv.ID, PathLengthAv.getPropDefault(PathLengthAv.ID), ...
	PathLengthAv.LABEL, PathLengthAv.getPropDefault(PathLengthAv.LABEL), ...
	PathLengthAv.NOTES, PathLengthAv.getPropDefault(PathLengthAv.NOTES), ...
	PathLengthAv.G, PathLengthAv.getPropDefault(PathLengthAv.G), ...
	PathLengthAv.M, PathLengthAv.getPropDefault(PathLengthAv.M), ...
	PathLengthAv.RULE, PathLengthAv.getPropDefault(PathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:PathLengthAv')

m_1 = PathLengthAv( ...
	PathLengthAv.ID, Callback('EL', m_0, 'PROP', 1), ...
	PathLengthAv.LABEL, PathLengthAv.getPropDefault(PathLengthAv.LABEL), ...
	PathLengthAv.NOTES, PathLengthAv.getPropDefault(PathLengthAv.NOTES), ...
	PathLengthAv.G, Callback('EL', m_0, 'PROP', 4), ...
	PathLengthAv.M, NoValue(), ...
	PathLengthAv.RULE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = PathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLengthAv.getPropTag(prop));
	switch PathLengthAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = PathLengthAv( ...
	PathLengthAv.ID, Callback('EL', m_1, 'PROP', 1), ...
	PathLengthAv.LABEL, PathLengthAv.getPropDefault(PathLengthAv.LABEL), ...
	PathLengthAv.NOTES, PathLengthAv.getPropDefault(PathLengthAv.NOTES), ...
	PathLengthAv.G, Callback('EL', m_1, 'PROP', 4), ...
	PathLengthAv.M, NoValue(), ...
	PathLengthAv.RULE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = PathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLengthAv.getPropTag(prop));
	switch PathLengthAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = PathLengthAv( ...
	PathLengthAv.ID, Callback('EL', m_2, 'PROP', 1), ...
	PathLengthAv.LABEL, PathLengthAv.getPropDefault(PathLengthAv.LABEL), ...
	PathLengthAv.NOTES, PathLengthAv.getPropDefault(PathLengthAv.NOTES), ...
	PathLengthAv.G, Callback('EL', m_2, 'PROP', 4), ...
	PathLengthAv.M, NoValue(), ...
	PathLengthAv.RULE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = PathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLengthAv.getPropTag(prop));
	switch PathLengthAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:PathLengthAv')
m = PathLengthAv( ...
	PathLengthAv.ID, PathLengthAv.getPropDefault(PathLengthAv.ID), ...
	PathLengthAv.LABEL, PathLengthAv.getPropDefault(PathLengthAv.LABEL), ...
	PathLengthAv.NOTES, PathLengthAv.getPropDefault(PathLengthAv.NOTES), ...
	PathLengthAv.G, PathLengthAv.getPropDefault(PathLengthAv.G), ...
	PathLengthAv.M, PathLengthAv.getPropDefault(PathLengthAv.M), ...
	PathLengthAv.RULE, PathLengthAv.getPropDefault(PathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:PathLengthAv')

prop_number = PathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLengthAv.getPropTag(prop));
	switch PathLengthAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
					['PathLengthAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
					['PathLengthAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:PathLengthAv')
m = PathLengthAv( ...
	PathLengthAv.ID, PathLengthAv.getPropDefault(PathLengthAv.ID), ...
	PathLengthAv.LABEL, PathLengthAv.getPropDefault(PathLengthAv.LABEL), ...
	PathLengthAv.NOTES, PathLengthAv.getPropDefault(PathLengthAv.NOTES), ...
	PathLengthAv.G, PathLengthAv.getPropDefault(PathLengthAv.G), ...
	PathLengthAv.M, PathLengthAv.getPropDefault(PathLengthAv.M), ...
	PathLengthAv.RULE, PathLengthAv.getPropDefault(PathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:PathLengthAv')

for prop = 1:1:PathLengthAv.getPropNumber()
	TAG = upper(PathLengthAv.getPropTag(prop));
	switch PathLengthAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_FUNC], ...
				['PathLengthAv.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

A = [
    0   .1  0   0
    .2  0   .1  0
    0   .1  0   .2
    0   0   .1  0
    ];

known_path_length_av = {mean([2 4/3 4/3 2])};

g = GraphBU('B', A);
path_length_av = PathLengthAv('G', g).get('M');

assert(isequal(path_length_av, known_path_length_av), ...
    [BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_ERR], ...
    'PathLengthAv is not being calculated correctly for GraphBU.')

%% Test 6: MultiplexBU

A11 = [
      0   .1  0   0
      .2  0   .1  0
      0   .1  0   .2
      0   0   .1  0
      ];
A22 = [
      0   .1  0   0
      .2  0   .1  0
      0   .1  0   .2
      0   0   .1  0
      ];
A = {A11  A22};

known_path_length_av = {
                       mean([2 4/3 4/3 2])
                       mean([2 4/3 4/3 2])
                       };

g = MultiplexBU('B', A);
path_length_av = PathLengthAv('G', g).get('M');

assert(isequal(path_length_av, known_path_length_av), ...
    [BRAPH2.STR ':PathLengthAv:' BRAPH2.BUG_ERR], ...
    'PathLengthAv is not being calculated correctly for MultiplexBU.')

