%TEST_ASSORTATIVITY

%% Test 1.1: Instantiation - empty

m = Assortativity();

prop_number = Assortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Assortativity.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
		['Assortativity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Assortativity.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
		['Assortativity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Assortativity.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Assortativity')
m = Assortativity( ...
	Assortativity.ID, Assortativity.getPropDefault(Assortativity.ID), ...
	Assortativity.LABEL, Assortativity.getPropDefault(Assortativity.LABEL), ...
	Assortativity.NOTES, Assortativity.getPropDefault(Assortativity.NOTES), ...
	Assortativity.G, Assortativity.getPropDefault(Assortativity.G), ...
	Assortativity.M, Assortativity.getPropDefault(Assortativity.M) ...
	);
warning('on', 'BRAPH2:Assortativity')

for prop = 1:1:Assortativity.getPropNumber()
	TAG = upper(Assortativity.getPropTag(prop));
	switch Assortativity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Assortativity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Assortativity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Assortativity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Assortativity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Assortativity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Assortativity.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Being a result, Assortativity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Assortativity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Being a result, Assortativity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Assortativity.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Assortativity')
m_0 = Assortativity( ...
	Assortativity.ID, Assortativity.getPropDefault(Assortativity.ID), ...
	Assortativity.LABEL, Assortativity.getPropDefault(Assortativity.LABEL), ...
	Assortativity.NOTES, Assortativity.getPropDefault(Assortativity.NOTES), ...
	Assortativity.G, Assortativity.getPropDefault(Assortativity.G), ...
	Assortativity.M, Assortativity.getPropDefault(Assortativity.M) ...
	);
warning('on', 'BRAPH2:Assortativity')

m_1 = Assortativity( ...
	Assortativity.ID, Callback('EL', m_0, 'PROP', 1), ...
	Assortativity.LABEL, Assortativity.getPropDefault(Assortativity.LABEL), ...
	Assortativity.NOTES, Assortativity.getPropDefault(Assortativity.NOTES), ...
	Assortativity.G, Callback('EL', m_0, 'PROP', 4), ...
	Assortativity.M, NoValue() ...
	);
	
prop_number = Assortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Assortativity.getPropTag(prop));
	switch Assortativity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Assortativity( ...
	Assortativity.ID, Callback('EL', m_1, 'PROP', 1), ...
	Assortativity.LABEL, Assortativity.getPropDefault(Assortativity.LABEL), ...
	Assortativity.NOTES, Assortativity.getPropDefault(Assortativity.NOTES), ...
	Assortativity.G, Callback('EL', m_1, 'PROP', 4), ...
	Assortativity.M, NoValue() ...
	);
	
prop_number = Assortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Assortativity.getPropTag(prop));
	switch Assortativity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Assortativity( ...
	Assortativity.ID, Callback('EL', m_2, 'PROP', 1), ...
	Assortativity.LABEL, Assortativity.getPropDefault(Assortativity.LABEL), ...
	Assortativity.NOTES, Assortativity.getPropDefault(Assortativity.NOTES), ...
	Assortativity.G, Callback('EL', m_2, 'PROP', 4), ...
	Assortativity.M, NoValue() ...
	);
	
prop_number = Assortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Assortativity.getPropTag(prop));
	switch Assortativity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Assortativity')
m = Assortativity( ...
	Assortativity.ID, Assortativity.getPropDefault(Assortativity.ID), ...
	Assortativity.LABEL, Assortativity.getPropDefault(Assortativity.LABEL), ...
	Assortativity.NOTES, Assortativity.getPropDefault(Assortativity.NOTES), ...
	Assortativity.G, Assortativity.getPropDefault(Assortativity.G), ...
	Assortativity.M, Assortativity.getPropDefault(Assortativity.M) ...
	);
warning('on', 'BRAPH2:Assortativity')

prop_number = Assortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Assortativity.getPropTag(prop));
	switch Assortativity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
					['Assortativity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
					['Assortativity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Assortativity')
m = Assortativity( ...
	Assortativity.ID, Assortativity.getPropDefault(Assortativity.ID), ...
	Assortativity.LABEL, Assortativity.getPropDefault(Assortativity.LABEL), ...
	Assortativity.NOTES, Assortativity.getPropDefault(Assortativity.NOTES), ...
	Assortativity.G, Assortativity.getPropDefault(Assortativity.G), ...
	Assortativity.M, Assortativity.getPropDefault(Assortativity.M) ...
	);
warning('on', 'BRAPH2:Assortativity')

for prop = 1:1:Assortativity.getPropNumber()
	TAG = upper(Assortativity.getPropTag(prop));
	switch Assortativity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Assortativity:' BRAPH2.BUG_FUNC], ...
				['Assortativity.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B_BU = [
    1 1 0 0 1;
    1 1 1 1 0;
    0 1 1 1 0;
    0 1 1 1 1;
    1 0 0 1 0];
assortativity_BU = (37/6-(15/6)^2)/(39/6-(15/6)^2);

g = GraphBU('B', B_BU);

assortativity_1 = Assortativity('G', g).get('M');
assert(isequal(round(assortativity_1{1}, 3), round(assortativity_BU, 3)), ...
    [BRAPH2.STR ':Assortativity:' BRAPH2.BUG_ERR], ...
    'Assortativity is not being calculated correctly for GraphBU')

%% Test 6: GraphWU

B_WU = [
    .1 .2 0 0 .1;
    .2 .1 .3 .2 0;
    0 .3 .1 .1 0;
    0 .2 .1 .1 .2;
    .1 0 0 .2 .1];

assortativity_WU_compress = (14.222222/6-(9.333333/6)^2)/(16.111111/6-(9.333333/6)^2);

g = GraphWU('B', B_WU);

assortativity_1 = Assortativity('G', g).get('M');
assert(isequal(round(assortativity_1{1}, 3), round(assortativity_WU_compress, 3)), ...
    [BRAPH2.STR ':Assortativity:' BRAPH2.BUG_ERR], ...
    'Assortativity is not being calculated correctly for GraphBU')

%% Test 7: MultigraphBUT

B_BU = [
    1 1 0 0 1;
    1 1 1 1 0;
    0 1 1 1 0;
    0 1 1 1 1;
    1 0 0 1 0];

thresholds = [0 1];

known_assortativity = { ...
    (37/6-(15/6)^2)/(39/6-(15/6)^2)
    0 
    };

g = MultigraphBUT('B', B_BU, 'THRESHOLDS', thresholds);

assortativity_1 = Assortativity('G', g).get('M');
assert(isequal(round(cell2mat(assortativity_1), 3), round(cell2mat(known_assortativity), 3)), ...
    [BRAPH2.STR ':Assortativity:' BRAPH2.BUG_ERR], ...
    'Assortativity is not being calculated correctly for MultigraphBUT')

%% Test 8: MultiplexBU

B11 = [
      1  1  0  0  1;
      1  1  1  1  0;
      0  1  1  1  0;
      0  1  1  1  1;
      1  0  0  1  0];
B22 = [
      1  1  0  0  1;
      1  1  1  1  0;
      0  1  1  1  0;
      0  1  1  1  1;
      1  0  0  1  0];
B = {B11 B22};

known_assortativity = {
                    (37/6-(15/6)^2)/(39/6-(15/6)^2)
                    (37/6-(15/6)^2)/(39/6-(15/6)^2)
                    };

g = MultiplexBU('B', B);
assortativity = Assortativity('G', g);

assert(isequal(assortativity.get('M'), known_assortativity), ...
    [BRAPH2.STR ':Assortativity:' BRAPH2.BUG_ERR], ...
    'Assortativity is not being calculated correctly for MultiplexBU.')

%% Test 9: MultiplexBUT

B11 = [
      1  1  0  0  1;
      1  1  1  1  0;
      0  1  1  1  0;
      0  1  1  1  1;
      1  0  0  1  0];
B22 = [
      1  1  0  0  1;
      1  1  1  1  0;
      0  1  1  1  0;
      0  1  1  1  1;
      1  0  0  1  0];
B = {B11 B22};

known_assortativity = {
                    (37/6-(15/6)^2)/(39/6-(15/6)^2)
                    (37/6-(15/6)^2)/(39/6-(15/6)^2)
                    0
                    0
                    };
                
g = MultiplexBUT('B', B, 'THRESHOLDS', [0 1]);
assortativity = Assortativity('G', g);

assert(isequal(assortativity.get('M'), known_assortativity), ...
    [BRAPH2.STR ':Assortativity:' BRAPH2.BUG_ERR], ...
    'Assortativity is not being calculated correctly for MultiplexBUT.')

%% Test 10: MultiplexWU

B11 = [
       1  2  0  0  1;
       2  1  3  2  0;
       0  3  1  1  0;
       0  2  1  1  2;
       1  0  0  2  1];
B22 = [
       1  2  0  0  1;
       2  1  3  2  0;
       0  3  1  1  0;
       0  2  1  1  2;
       1  0  0  2  1];
B = {B11 B22};

known_assortativity = {
                    (37/6-(15/6)^2)/(39/6-(15/6)^2)
                    (37/6-(15/6)^2)/(39/6-(15/6)^2)
                    };

g = MultiplexWU('B', B);
assortativity = Assortativity('G', g);

assert(isequal(assortativity.get('M'), known_assortativity), ...
    [BRAPH2.STR ':Assortativity:' BRAPH2.BUG_ERR], ...
    'Assortativity is not being calculated correctly for MultiplexWU.')

