%TEST_SCORE

%% Test 1.1: Instantiation - empty

m = SCore();

prop_number = SCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SCore.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
		['SCore.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in SCore.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
		['SCore.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in SCore.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:SCore')
m = SCore( ...
	SCore.ID, SCore.getPropDefault(SCore.ID), ...
	SCore.LABEL, SCore.getPropDefault(SCore.LABEL), ...
	SCore.NOTES, SCore.getPropDefault(SCore.NOTES), ...
	SCore.G, SCore.getPropDefault(SCore.G), ...
	SCore.M, SCore.getPropDefault(SCore.M), ...
	SCore.SCORETHRESHOLD, SCore.getPropDefault(SCore.SCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:SCore')

for prop = 1:1:SCore.getPropNumber()
	TAG = upper(SCore.getPropTag(prop));
	switch SCore.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), SCore.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by SCore.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in SCore.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), SCore.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by SCore.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in SCore.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['Being a result, SCore.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in SCore.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['Being a result, SCore.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in SCore.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:SCore')
m_0 = SCore( ...
	SCore.ID, SCore.getPropDefault(SCore.ID), ...
	SCore.LABEL, SCore.getPropDefault(SCore.LABEL), ...
	SCore.NOTES, SCore.getPropDefault(SCore.NOTES), ...
	SCore.G, SCore.getPropDefault(SCore.G), ...
	SCore.M, SCore.getPropDefault(SCore.M), ...
	SCore.SCORETHRESHOLD, SCore.getPropDefault(SCore.SCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:SCore')

m_1 = SCore( ...
	SCore.ID, Callback('EL', m_0, 'PROP', 1), ...
	SCore.LABEL, SCore.getPropDefault(SCore.LABEL), ...
	SCore.NOTES, SCore.getPropDefault(SCore.NOTES), ...
	SCore.G, Callback('EL', m_0, 'PROP', 4), ...
	SCore.M, NoValue(), ...
	SCore.SCORETHRESHOLD, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = SCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SCore.getPropTag(prop));
	switch SCore.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = SCore( ...
	SCore.ID, Callback('EL', m_1, 'PROP', 1), ...
	SCore.LABEL, SCore.getPropDefault(SCore.LABEL), ...
	SCore.NOTES, SCore.getPropDefault(SCore.NOTES), ...
	SCore.G, Callback('EL', m_1, 'PROP', 4), ...
	SCore.M, NoValue(), ...
	SCore.SCORETHRESHOLD, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = SCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SCore.getPropTag(prop));
	switch SCore.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = SCore( ...
	SCore.ID, Callback('EL', m_2, 'PROP', 1), ...
	SCore.LABEL, SCore.getPropDefault(SCore.LABEL), ...
	SCore.NOTES, SCore.getPropDefault(SCore.NOTES), ...
	SCore.G, Callback('EL', m_2, 'PROP', 4), ...
	SCore.M, NoValue(), ...
	SCore.SCORETHRESHOLD, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = SCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SCore.getPropTag(prop));
	switch SCore.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:SCore')
m = SCore( ...
	SCore.ID, SCore.getPropDefault(SCore.ID), ...
	SCore.LABEL, SCore.getPropDefault(SCore.LABEL), ...
	SCore.NOTES, SCore.getPropDefault(SCore.NOTES), ...
	SCore.G, SCore.getPropDefault(SCore.G), ...
	SCore.M, SCore.getPropDefault(SCore.M), ...
	SCore.SCORETHRESHOLD, SCore.getPropDefault(SCore.SCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:SCore')

prop_number = SCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(SCore.getPropTag(prop));
	switch SCore.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
					['SCore.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
					['SCore.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:SCore')
m = SCore( ...
	SCore.ID, SCore.getPropDefault(SCore.ID), ...
	SCore.LABEL, SCore.getPropDefault(SCore.LABEL), ...
	SCore.NOTES, SCore.getPropDefault(SCore.NOTES), ...
	SCore.G, SCore.getPropDefault(SCore.G), ...
	SCore.M, SCore.getPropDefault(SCore.M), ...
	SCore.SCORETHRESHOLD, SCore.getPropDefault(SCore.SCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:SCore')

for prop = 1:1:SCore.getPropNumber()
	TAG = upper(SCore.getPropTag(prop));
	switch SCore.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':SCore:' BRAPH2.BUG_FUNC], ...
				['SCore.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphWU

A = [
    0   .5  1  0; 
    .5  0   1  .8; 
    1   1   0  0;
    0   .8  0  0
    ];

known_score = {[
                0   .5  1  0;
                .5  0   1  0;
                1   1   0  0;
                0   0   0  0
                ]};

g = GraphWU('B', A);
score = SCore('G', g, 'SCoreThreshold', 1.5).get('M');

assert(isequal(score, known_score), ...
    [BRAPH2.STR ':SCore:' BRAPH2.BUG_ERR], ...
    'SCore is not being calculated correctly for GraphWU.')

%% Test 6: GraphWD

A = [
    0   1   1  .1; 
    .2  0   1  1; 
    1   1   0  0;
    0   .3  0  0
    ];

known_score = {[
                0   1  1  0; 
                .2  0  1  0; 
                1   1  0  0;
                0   0  0  0
                ]};

g = GraphWD('B', A);
score = SCore('G', g, 'SCoreThreshold', 3).get('M');

assert(isequal(score, known_score), ...
    [BRAPH2.STR ':SCore:' BRAPH2.BUG_ERR], ...
    'SCore is not being calculated correctly for GraphWD.')

%% Test 7: MultiplexWU

A11 = [
    0   .5  1  0; 
    .5  0   1  .8; 
    1   1   0  0;
    0   .8  0  0
    ];

A22 = [
    0   .5  1  0; 
    .5  0   1  .8; 
    1   1   0  0;
    0   .8  0  0
    ];
A = {A11 A22};
             
known_score(1) = {[
                0   .5  1  0;
                .5  0   1  0;
                1   1   0  0;
                0   0   0  0
                ]};
known_score(2, 1) = {[
                0   .5  1  0;
                .5  0   1  0;
                1   1   0  0;
                0   0   0  0
                ]};            

g = MultiplexWU('B', A);
score = SCore('G', g, 'SCoreThreshold', 1.5).get('M');

assert(isequal(score, known_score), ...
    [BRAPH2.STR ':SCore:' BRAPH2.BUG_ERR], ...
    'SCore is not being calculated correctly for MultiplexWU.')

