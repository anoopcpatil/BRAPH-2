%TEST_PATHLENGTH

%% Test 1.1: Instantiation - empty

m = PathLength();

prop_number = PathLength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLength.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
		['PathLength.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PathLength.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
		['PathLength.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in PathLength.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:PathLength')
m = PathLength( ...
	PathLength.ID, PathLength.getPropDefault(PathLength.ID), ...
	PathLength.LABEL, PathLength.getPropDefault(PathLength.LABEL), ...
	PathLength.NOTES, PathLength.getPropDefault(PathLength.NOTES), ...
	PathLength.G, PathLength.getPropDefault(PathLength.G), ...
	PathLength.M, PathLength.getPropDefault(PathLength.M), ...
	PathLength.RULE, PathLength.getPropDefault(PathLength.RULE) ...
	);
warning('on', 'BRAPH2:PathLength')

for prop = 1:1:PathLength.getPropNumber()
	TAG = upper(PathLength.getPropTag(prop));
	switch PathLength.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), PathLength.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by PathLength.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PathLength.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), PathLength.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by PathLength.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in PathLength.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['Being a result, PathLength.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PathLength.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['Being a result, PathLength.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in PathLength.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:PathLength')
m_0 = PathLength( ...
	PathLength.ID, PathLength.getPropDefault(PathLength.ID), ...
	PathLength.LABEL, PathLength.getPropDefault(PathLength.LABEL), ...
	PathLength.NOTES, PathLength.getPropDefault(PathLength.NOTES), ...
	PathLength.G, PathLength.getPropDefault(PathLength.G), ...
	PathLength.M, PathLength.getPropDefault(PathLength.M), ...
	PathLength.RULE, PathLength.getPropDefault(PathLength.RULE) ...
	);
warning('on', 'BRAPH2:PathLength')

m_1 = PathLength( ...
	PathLength.ID, Callback('EL', m_0, 'PROP', 1), ...
	PathLength.LABEL, PathLength.getPropDefault(PathLength.LABEL), ...
	PathLength.NOTES, PathLength.getPropDefault(PathLength.NOTES), ...
	PathLength.G, Callback('EL', m_0, 'PROP', 4), ...
	PathLength.M, NoValue(), ...
	PathLength.RULE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = PathLength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLength.getPropTag(prop));
	switch PathLength.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = PathLength( ...
	PathLength.ID, Callback('EL', m_1, 'PROP', 1), ...
	PathLength.LABEL, PathLength.getPropDefault(PathLength.LABEL), ...
	PathLength.NOTES, PathLength.getPropDefault(PathLength.NOTES), ...
	PathLength.G, Callback('EL', m_1, 'PROP', 4), ...
	PathLength.M, NoValue(), ...
	PathLength.RULE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = PathLength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLength.getPropTag(prop));
	switch PathLength.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = PathLength( ...
	PathLength.ID, Callback('EL', m_2, 'PROP', 1), ...
	PathLength.LABEL, PathLength.getPropDefault(PathLength.LABEL), ...
	PathLength.NOTES, PathLength.getPropDefault(PathLength.NOTES), ...
	PathLength.G, Callback('EL', m_2, 'PROP', 4), ...
	PathLength.M, NoValue(), ...
	PathLength.RULE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = PathLength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLength.getPropTag(prop));
	switch PathLength.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:PathLength')
m = PathLength( ...
	PathLength.ID, PathLength.getPropDefault(PathLength.ID), ...
	PathLength.LABEL, PathLength.getPropDefault(PathLength.LABEL), ...
	PathLength.NOTES, PathLength.getPropDefault(PathLength.NOTES), ...
	PathLength.G, PathLength.getPropDefault(PathLength.G), ...
	PathLength.M, PathLength.getPropDefault(PathLength.M), ...
	PathLength.RULE, PathLength.getPropDefault(PathLength.RULE) ...
	);
warning('on', 'BRAPH2:PathLength')

prop_number = PathLength.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(PathLength.getPropTag(prop));
	switch PathLength.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
					['PathLength.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
					['PathLength.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:PathLength')
m = PathLength( ...
	PathLength.ID, PathLength.getPropDefault(PathLength.ID), ...
	PathLength.LABEL, PathLength.getPropDefault(PathLength.LABEL), ...
	PathLength.NOTES, PathLength.getPropDefault(PathLength.NOTES), ...
	PathLength.G, PathLength.getPropDefault(PathLength.G), ...
	PathLength.M, PathLength.getPropDefault(PathLength.M), ...
	PathLength.RULE, PathLength.getPropDefault(PathLength.RULE) ...
	);
warning('on', 'BRAPH2:PathLength')

for prop = 1:1:PathLength.getPropNumber()
	TAG = upper(PathLength.getPropTag(prop));
	switch PathLength.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':PathLength:' BRAPH2.BUG_FUNC], ...
				['PathLength.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B = [
    0   .1  0   0
    .2  0   .1  0
    0   .1  0   .2
    0   0   .1  0
    ];

known_path_length = {[2 4/3 4/3 2]'};

g = GraphBU('B', B);
path_length = PathLength('G', g).get('M');

assert(isequal(path_length, known_path_length), ...
    [BRAPH2.STR ':PathLength:' BRAPH2.BUG_ERR], ...
    'PathLength is not being calculated correctly for GraphBU.')

%% Test 6: MultigraphBUT

B = [
    0   .1  0   0
    .2  0   .1  0
    0   .1  0   .2
    0   0   .1  0
    ];

thresholds = [0 1];

known_path_length = { ...
    [2   4/3  4/3  2]'
    [Inf Inf  Inf  Inf]'
    };

g = MultigraphBUT('B', B, 'THRESHOLDS', thresholds);

path_length = PathLength('G', g).get('M');

assert(isequal(path_length, known_path_length), ...
    [BRAPH2.STR ':PathLength:' BRAPH2.BUG_ERR], ...
    'PathLength is not being calculated correctly for MultigraphBUT.')

%% Test 7: MultiplexBU

A11 = [
      0   .1  0   0
      .2  0   .1  0
      0   .1  0   .2
      0   0   .1  0
      ];

A22 = [
      0   .1  0   0
      .2  0   .1  0
      0   .1  0   .2
      0   0   .1  0
      ];
B = { A11  A22};

known_path_length = {
                    [2 4/3 4/3 2]'
                    [2 4/3 4/3 2]'
                    };

g = MultiplexBU('B', B);
path_length = PathLength('G', g).get('M');

assert(isequal(path_length, known_path_length), ...
    [BRAPH2.STR ':PathLength:' BRAPH2.BUG_ERR], ...
    'PathLength is not being calculated correctly for MultiplexBU.')

