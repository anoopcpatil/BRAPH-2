%TEST_RICHNESS

%% Test 1.1: Instantiation - empty

m = Richness();

prop_number = Richness.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Richness.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
		['Richness.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Richness.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
		['Richness.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Richness.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Richness')
m = Richness( ...
	Richness.ID, Richness.getPropDefault(Richness.ID), ...
	Richness.LABEL, Richness.getPropDefault(Richness.LABEL), ...
	Richness.NOTES, Richness.getPropDefault(Richness.NOTES), ...
	Richness.G, Richness.getPropDefault(Richness.G), ...
	Richness.M, Richness.getPropDefault(Richness.M) ...
	);
warning('on', 'BRAPH2:Richness')

for prop = 1:1:Richness.getPropNumber()
	TAG = upper(Richness.getPropTag(prop));
	switch Richness.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Richness.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Richness.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Richness.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Richness.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Richness.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Richness.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Being a result, Richness.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Richness.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Being a result, Richness.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Richness.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Richness')
m_0 = Richness( ...
	Richness.ID, Richness.getPropDefault(Richness.ID), ...
	Richness.LABEL, Richness.getPropDefault(Richness.LABEL), ...
	Richness.NOTES, Richness.getPropDefault(Richness.NOTES), ...
	Richness.G, Richness.getPropDefault(Richness.G), ...
	Richness.M, Richness.getPropDefault(Richness.M) ...
	);
warning('on', 'BRAPH2:Richness')

m_1 = Richness( ...
	Richness.ID, Callback('EL', m_0, 'PROP', 1), ...
	Richness.LABEL, Richness.getPropDefault(Richness.LABEL), ...
	Richness.NOTES, Richness.getPropDefault(Richness.NOTES), ...
	Richness.G, Callback('EL', m_0, 'PROP', 4), ...
	Richness.M, NoValue() ...
	);
	
prop_number = Richness.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Richness.getPropTag(prop));
	switch Richness.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Richness( ...
	Richness.ID, Callback('EL', m_1, 'PROP', 1), ...
	Richness.LABEL, Richness.getPropDefault(Richness.LABEL), ...
	Richness.NOTES, Richness.getPropDefault(Richness.NOTES), ...
	Richness.G, Callback('EL', m_1, 'PROP', 4), ...
	Richness.M, NoValue() ...
	);
	
prop_number = Richness.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Richness.getPropTag(prop));
	switch Richness.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Richness( ...
	Richness.ID, Callback('EL', m_2, 'PROP', 1), ...
	Richness.LABEL, Richness.getPropDefault(Richness.LABEL), ...
	Richness.NOTES, Richness.getPropDefault(Richness.NOTES), ...
	Richness.G, Callback('EL', m_2, 'PROP', 4), ...
	Richness.M, NoValue() ...
	);
	
prop_number = Richness.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Richness.getPropTag(prop));
	switch Richness.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Richness')
m = Richness( ...
	Richness.ID, Richness.getPropDefault(Richness.ID), ...
	Richness.LABEL, Richness.getPropDefault(Richness.LABEL), ...
	Richness.NOTES, Richness.getPropDefault(Richness.NOTES), ...
	Richness.G, Richness.getPropDefault(Richness.G), ...
	Richness.M, Richness.getPropDefault(Richness.M) ...
	);
warning('on', 'BRAPH2:Richness')

prop_number = Richness.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Richness.getPropTag(prop));
	switch Richness.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
					['Richness.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
					['Richness.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Richness')
m = Richness( ...
	Richness.ID, Richness.getPropDefault(Richness.ID), ...
	Richness.LABEL, Richness.getPropDefault(Richness.LABEL), ...
	Richness.NOTES, Richness.getPropDefault(Richness.NOTES), ...
	Richness.G, Richness.getPropDefault(Richness.G), ...
	Richness.M, Richness.getPropDefault(Richness.M) ...
	);
warning('on', 'BRAPH2:Richness')

for prop = 1:1:Richness.getPropNumber()
	TAG = upper(Richness.getPropTag(prop));
	switch Richness.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Richness:' BRAPH2.BUG_FUNC], ...
				['Richness.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B = [
    0  1  1  0; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

known_richness = {[1 0 1 1]'};

g = GraphBU('B', B);

richness = Richness('G', g).get('M');

assert(isequal(richness, known_richness), ...
    [BRAPH2.STR ':Richness:' BRAPH2.BUG_ERR], ...
    'Richness is not being calculated correctly for GraphBU.')

%% Test 6: MultigraphBUT

B = [
    0  1  1  0; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

known_richness = {
                 [1 0 1 1]'
                 [0 0 0 0]'};

g = MultigraphBUT('B', B, 'THRESHOLDS', [0 1]);
richness = Richness('G', g).get('M');

assert(isequal(richness, known_richness), ...
    [BRAPH2.STR ':Richness:' BRAPH2.BUG_ERR], ...
    'Richness is not being calculated correctly for MultigraphBUT.')

%% Test 7: GraphBD

A = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

known_richness = {[1 0 2 3/2]'};

g = GraphBD('B', A);
richness = Richness('G', g).get('M');

assert(isequal(richness, known_richness), ...
    [BRAPH2.STR ':Richness:' BRAPH2.BUG_ERR], ...
    'Richness is not being calculated correctly for GraphBD.')

%% Test 8: MultiplexBD

A11 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

A22 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  1  0
    ];
A = {A11 A22};
             
known_richness = {
                 [1 0 2 3/2]'
                 [1 0 1 2]'
                 };    

g = MultiplexBD('B', A);
richness = Richness('G', g).get('M');

assert(isequal(richness, known_richness), ...
    [BRAPH2.STR ':Richness:' BRAPH2.BUG_ERR], ...
    'Richness is not being calculated correctly for MultiplexBD.')

%% Test 9: MultiplexWD

A11 = [
    0   1   1  .1; 
    .2  0   1  1; 
    1   1   0  0;
    0   .3  0  0
    ];
A22 = [
    0   1   1   .1; 
    .2  0   1   1; 
    1   1   0   0;
    0   .3  .7  0
    ];
A = {A11 A22};

known_richness = {
                 [.6 0 2 .7]'
                 [.6 0 1 21/20]'
                 };   

g = MultiplexWD('B', A);
richness = Richness('G', g).get('M');
richness = cellfun(@(s) round(s, 4), richness, 'UniformOutput', false);

assert(isequal(richness, known_richness), ...
    [BRAPH2.STR ':Richness:' BRAPH2.BUG_ERR], ...
    'Richness is not being calculated correctly for MultiplexWD.')

