%TEST_OUTOUTASSORTATIVITY

%% Test 1.1: Instantiation - empty

m = OutOutAssortativity();

prop_number = OutOutAssortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutOutAssortativity.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
		['OutOutAssortativity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in OutOutAssortativity.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
		['OutOutAssortativity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in OutOutAssortativity.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:OutOutAssortativity')
m = OutOutAssortativity( ...
	OutOutAssortativity.ID, OutOutAssortativity.getPropDefault(OutOutAssortativity.ID), ...
	OutOutAssortativity.LABEL, OutOutAssortativity.getPropDefault(OutOutAssortativity.LABEL), ...
	OutOutAssortativity.NOTES, OutOutAssortativity.getPropDefault(OutOutAssortativity.NOTES), ...
	OutOutAssortativity.G, OutOutAssortativity.getPropDefault(OutOutAssortativity.G), ...
	OutOutAssortativity.M, OutOutAssortativity.getPropDefault(OutOutAssortativity.M) ...
	);
warning('on', 'BRAPH2:OutOutAssortativity')

for prop = 1:1:OutOutAssortativity.getPropNumber()
	TAG = upper(OutOutAssortativity.getPropTag(prop));
	switch OutOutAssortativity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), OutOutAssortativity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by OutOutAssortativity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in OutOutAssortativity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), OutOutAssortativity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by OutOutAssortativity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in OutOutAssortativity.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['Being a result, OutOutAssortativity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in OutOutAssortativity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['Being a result, OutOutAssortativity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in OutOutAssortativity.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:OutOutAssortativity')
m_0 = OutOutAssortativity( ...
	OutOutAssortativity.ID, OutOutAssortativity.getPropDefault(OutOutAssortativity.ID), ...
	OutOutAssortativity.LABEL, OutOutAssortativity.getPropDefault(OutOutAssortativity.LABEL), ...
	OutOutAssortativity.NOTES, OutOutAssortativity.getPropDefault(OutOutAssortativity.NOTES), ...
	OutOutAssortativity.G, OutOutAssortativity.getPropDefault(OutOutAssortativity.G), ...
	OutOutAssortativity.M, OutOutAssortativity.getPropDefault(OutOutAssortativity.M) ...
	);
warning('on', 'BRAPH2:OutOutAssortativity')

m_1 = OutOutAssortativity( ...
	OutOutAssortativity.ID, Callback('EL', m_0, 'PROP', 1), ...
	OutOutAssortativity.LABEL, OutOutAssortativity.getPropDefault(OutOutAssortativity.LABEL), ...
	OutOutAssortativity.NOTES, OutOutAssortativity.getPropDefault(OutOutAssortativity.NOTES), ...
	OutOutAssortativity.G, Callback('EL', m_0, 'PROP', 4), ...
	OutOutAssortativity.M, NoValue() ...
	);
	
prop_number = OutOutAssortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutOutAssortativity.getPropTag(prop));
	switch OutOutAssortativity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = OutOutAssortativity( ...
	OutOutAssortativity.ID, Callback('EL', m_1, 'PROP', 1), ...
	OutOutAssortativity.LABEL, OutOutAssortativity.getPropDefault(OutOutAssortativity.LABEL), ...
	OutOutAssortativity.NOTES, OutOutAssortativity.getPropDefault(OutOutAssortativity.NOTES), ...
	OutOutAssortativity.G, Callback('EL', m_1, 'PROP', 4), ...
	OutOutAssortativity.M, NoValue() ...
	);
	
prop_number = OutOutAssortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutOutAssortativity.getPropTag(prop));
	switch OutOutAssortativity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = OutOutAssortativity( ...
	OutOutAssortativity.ID, Callback('EL', m_2, 'PROP', 1), ...
	OutOutAssortativity.LABEL, OutOutAssortativity.getPropDefault(OutOutAssortativity.LABEL), ...
	OutOutAssortativity.NOTES, OutOutAssortativity.getPropDefault(OutOutAssortativity.NOTES), ...
	OutOutAssortativity.G, Callback('EL', m_2, 'PROP', 4), ...
	OutOutAssortativity.M, NoValue() ...
	);
	
prop_number = OutOutAssortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutOutAssortativity.getPropTag(prop));
	switch OutOutAssortativity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:OutOutAssortativity')
m = OutOutAssortativity( ...
	OutOutAssortativity.ID, OutOutAssortativity.getPropDefault(OutOutAssortativity.ID), ...
	OutOutAssortativity.LABEL, OutOutAssortativity.getPropDefault(OutOutAssortativity.LABEL), ...
	OutOutAssortativity.NOTES, OutOutAssortativity.getPropDefault(OutOutAssortativity.NOTES), ...
	OutOutAssortativity.G, OutOutAssortativity.getPropDefault(OutOutAssortativity.G), ...
	OutOutAssortativity.M, OutOutAssortativity.getPropDefault(OutOutAssortativity.M) ...
	);
warning('on', 'BRAPH2:OutOutAssortativity')

prop_number = OutOutAssortativity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutOutAssortativity.getPropTag(prop));
	switch OutOutAssortativity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
					['OutOutAssortativity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
					['OutOutAssortativity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:OutOutAssortativity')
m = OutOutAssortativity( ...
	OutOutAssortativity.ID, OutOutAssortativity.getPropDefault(OutOutAssortativity.ID), ...
	OutOutAssortativity.LABEL, OutOutAssortativity.getPropDefault(OutOutAssortativity.LABEL), ...
	OutOutAssortativity.NOTES, OutOutAssortativity.getPropDefault(OutOutAssortativity.NOTES), ...
	OutOutAssortativity.G, OutOutAssortativity.getPropDefault(OutOutAssortativity.G), ...
	OutOutAssortativity.M, OutOutAssortativity.getPropDefault(OutOutAssortativity.M) ...
	);
warning('on', 'BRAPH2:OutOutAssortativity')

for prop = 1:1:OutOutAssortativity.getPropNumber()
	TAG = upper(OutOutAssortativity.getPropTag(prop));
	switch OutOutAssortativity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_FUNC], ...
				['OutOutAssortativity.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBD

A = [
    0  1  0  0  0;
    0  0  1  0  0;
    0  0  0  1  0;
    0  1  0  0  1;
    1  0  0  1  0
    ];

known_out_out_assortativity = {(16/7-(21/14)^2)/(35/14-(21/14)^2)};

g = GraphBD('B', A);
out_out_assortativity = OutOutAssortativity('G', g).get('M');

assert(isequal(out_out_assortativity, known_out_out_assortativity), ...
    [BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_ERR], ...
    'OutOutAssortativity is not being calculated correctly for GraphBD.')

%% Test 6: GraphWD

A = [
    0  2  0  0  0;
    0  0  3  0  0;
    0  0  0  1  0;
    0  2  0  0  2;
    1  0  0  2  0
    ];

known_out_out_assortativity = {(16/7-(21/14)^2)/(35/14-(21/14)^2)};

g = GraphWD('B', A);
out_out_assortativity = OutOutAssortativity('G', g).get('M');

assert(isequal(out_out_assortativity, known_out_out_assortativity), ...
    [BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_ERR], ...
    'OutOutAssortativity is not being calculated correctly for GraphWD.')

%% Test 7: MultiplexBD

A11 = [
      0  1  0  0  0;
      0  0  1  0  0;
      0  0  0  1  0;
      0  1  0  0  1;
      1  0  0  1  0
    ];

A22 = [
      0  1  0  0  0;
      0  0  1  0  0;
      0  0  0  1  0;
      0  1  0  0  1;
      1  0  0  1  0
    ];
A = {A11 A22};
             
known_out_out_assortativity = {
                    (16/7-(21/14)^2)/(35/14-(21/14)^2)
                    (16/7-(21/14)^2)/(35/14-(21/14)^2)
                    };    

g = MultiplexBD('B', A);
out_out_assortativity = OutOutAssortativity('G', g).get('M');

assert(isequal(out_out_assortativity, known_out_out_assortativity), ...
    [BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_ERR], ...
    'OutOutAssortativity is not being calculated correctly for MultiplexBD.')

%% Test 8: MultiplexWD

A11 = [
       0  2  0  0  0;
       0  0  3  0  0;
       0  0  0  1  0;
       0  2  0  0  2;
       1  0  0  2  0
    ];
A22 = [
       0  2  0  0  0;
       0  0  3  0  0;
       0  0  0  1  0;
       0  2  0  0  2;
       1  0  0  2  0
    ];
A = {A11 A22};

known_out_out_assortativity = {
                    (16/7-(21/14)^2)/(35/14-(21/14)^2)
                    (16/7-(21/14)^2)/(35/14-(21/14)^2)
                    };   

g = MultiplexWD('B', A);
out_out_assortativity = OutOutAssortativity('G', g).get('M');

assert(isequal(out_out_assortativity, known_out_out_assortativity), ...
    [BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_ERR], ...
    'OutOutAssortativity is not being calculated correctly for MultiplexWD.')

%% Test 9: Comparison with standard method for BD graphs

A = rand(randi(10));
g = GraphBD('B', A);

out_out_assortativity = OutOutAssortativity('G', g).get('M');
known_out_out_assortativity = {assortativity_standard_BD(cell2mat(g.get('A')))};  

assert(isequal(out_out_assortativity, known_out_out_assortativity), ...
    [BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_ERR], ...
    'OutOutAssortativity is not being calculated correctly for BCT.')

%% Test 10: Comparison with standard method for WD graphs

A = rand(randi(10));
g = GraphWD('B', A);

out_out_assortativity = OutOutAssortativity('G', g).get('M');
known_out_out_assortativity = {assortativity_standard_WD(cell2mat(g.get('A')))}; 

assert(isequal(out_out_assortativity, known_out_out_assortativity), ...
    [BRAPH2.STR ':OutOutAssortativity:' BRAPH2.BUG_ERR], ...
    'OutOutAssortativity is not being calculated correctly for BCT.')

%% Functions to calculate clustering adapted from 2019_03_03_BCT
function stdvalue_BD = assortativity_standard_BD(A)
% directed version
[id,od] = degrees_dir(A);
[i,j] = find(A>0);
K = length(i);
degi = od(i);
degj = od(j);
% compute assortativity
stdvalue_BD = ( sum(degi.*degj)/K - (sum(0.5*(degi+degj))/K)^2 ) / ...
    ( sum(0.5*(degi.^2+degj.^2))/K - (sum(0.5*(degi+degj))/K)^2 );
stdvalue_BD(isnan(stdvalue_BD)) = 0;  % Should return zeros, not NaN
end

function stdvalue_WD = assortativity_standard_WD(A)
% directed version
[is,os] = strengths_dir(A);
[i,j] = find(A>0);
K = length(i);
stri = os(i);
strj = os(j);
% compute assortativity
stdvalue_WD = ( sum(stri.*strj)/K - (sum(0.5*(stri+strj))/K)^2 ) / ...
    ( sum(0.5*(stri.^2+strj.^2))/K - (sum(0.5*(stri+strj))/K)^2 );
stdvalue_WD(isnan(stdvalue_WD)) = 0;  % Should return zeros, not NaN
end

function [id,od,deg] = degrees_dir(A)
id = sum(A,1);    % indegree = column sum of CIJ
od = sum(A,2)';   % outdegree = row sum of CIJ
deg = id+od;        % degree = indegree+outdegree
end

function [is,os,str] = strengths_dir(A)
is = sum(A,1);    % instrength = column sum of CIJ
os = sum(A,2)';   % outstrength = row sum of CIJ
str = is+os;        % strength = instrength+outstrength
end

