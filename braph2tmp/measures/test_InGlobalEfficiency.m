%TEST_INGLOBALEFFICIENCY

%% Test 1.1: Instantiation - empty

m = InGlobalEfficiency();

prop_number = InGlobalEfficiency.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InGlobalEfficiency.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
		['InGlobalEfficiency.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in InGlobalEfficiency.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
		['InGlobalEfficiency.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in InGlobalEfficiency.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:InGlobalEfficiency')
m = InGlobalEfficiency( ...
	InGlobalEfficiency.ID, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.ID), ...
	InGlobalEfficiency.LABEL, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.LABEL), ...
	InGlobalEfficiency.NOTES, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.NOTES), ...
	InGlobalEfficiency.G, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.G), ...
	InGlobalEfficiency.M, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.M) ...
	);
warning('on', 'BRAPH2:InGlobalEfficiency')

for prop = 1:1:InGlobalEfficiency.getPropNumber()
	TAG = upper(InGlobalEfficiency.getPropTag(prop));
	switch InGlobalEfficiency.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), InGlobalEfficiency.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by InGlobalEfficiency.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in InGlobalEfficiency.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), InGlobalEfficiency.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by InGlobalEfficiency.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in InGlobalEfficiency.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['Being a result, InGlobalEfficiency.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in InGlobalEfficiency.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['Being a result, InGlobalEfficiency.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in InGlobalEfficiency.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:InGlobalEfficiency')
m_0 = InGlobalEfficiency( ...
	InGlobalEfficiency.ID, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.ID), ...
	InGlobalEfficiency.LABEL, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.LABEL), ...
	InGlobalEfficiency.NOTES, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.NOTES), ...
	InGlobalEfficiency.G, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.G), ...
	InGlobalEfficiency.M, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.M) ...
	);
warning('on', 'BRAPH2:InGlobalEfficiency')

m_1 = InGlobalEfficiency( ...
	InGlobalEfficiency.ID, Callback('EL', m_0, 'PROP', 1), ...
	InGlobalEfficiency.LABEL, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.LABEL), ...
	InGlobalEfficiency.NOTES, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.NOTES), ...
	InGlobalEfficiency.G, Callback('EL', m_0, 'PROP', 4), ...
	InGlobalEfficiency.M, NoValue() ...
	);
	
prop_number = InGlobalEfficiency.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InGlobalEfficiency.getPropTag(prop));
	switch InGlobalEfficiency.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = InGlobalEfficiency( ...
	InGlobalEfficiency.ID, Callback('EL', m_1, 'PROP', 1), ...
	InGlobalEfficiency.LABEL, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.LABEL), ...
	InGlobalEfficiency.NOTES, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.NOTES), ...
	InGlobalEfficiency.G, Callback('EL', m_1, 'PROP', 4), ...
	InGlobalEfficiency.M, NoValue() ...
	);
	
prop_number = InGlobalEfficiency.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InGlobalEfficiency.getPropTag(prop));
	switch InGlobalEfficiency.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = InGlobalEfficiency( ...
	InGlobalEfficiency.ID, Callback('EL', m_2, 'PROP', 1), ...
	InGlobalEfficiency.LABEL, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.LABEL), ...
	InGlobalEfficiency.NOTES, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.NOTES), ...
	InGlobalEfficiency.G, Callback('EL', m_2, 'PROP', 4), ...
	InGlobalEfficiency.M, NoValue() ...
	);
	
prop_number = InGlobalEfficiency.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InGlobalEfficiency.getPropTag(prop));
	switch InGlobalEfficiency.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:InGlobalEfficiency')
m = InGlobalEfficiency( ...
	InGlobalEfficiency.ID, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.ID), ...
	InGlobalEfficiency.LABEL, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.LABEL), ...
	InGlobalEfficiency.NOTES, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.NOTES), ...
	InGlobalEfficiency.G, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.G), ...
	InGlobalEfficiency.M, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.M) ...
	);
warning('on', 'BRAPH2:InGlobalEfficiency')

prop_number = InGlobalEfficiency.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InGlobalEfficiency.getPropTag(prop));
	switch InGlobalEfficiency.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
					['InGlobalEfficiency.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
					['InGlobalEfficiency.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:InGlobalEfficiency')
m = InGlobalEfficiency( ...
	InGlobalEfficiency.ID, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.ID), ...
	InGlobalEfficiency.LABEL, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.LABEL), ...
	InGlobalEfficiency.NOTES, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.NOTES), ...
	InGlobalEfficiency.G, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.G), ...
	InGlobalEfficiency.M, InGlobalEfficiency.getPropDefault(InGlobalEfficiency.M) ...
	);
warning('on', 'BRAPH2:InGlobalEfficiency')

for prop = 1:1:InGlobalEfficiency.getPropNumber()
	TAG = upper(InGlobalEfficiency.getPropTag(prop));
	switch InGlobalEfficiency.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_FUNC], ...
				['InGlobalEfficiency.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBD

B = [
    0   .1  0   0   0
    .2  0   0   0   0
    0   0   0   .2  0
    0   0   .1  0   0
    0   0   0   0   0
    ];

known_in_global_efficiency = {[1/4 1/4 1/4 1/4 0]'};

g = GraphBD('B', B);
in_global_efficiency = InGlobalEfficiency('G', g).get('M');

assert(isequal(in_global_efficiency, known_in_global_efficiency), ...
    [BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_ERR], ...
    'InGlobalEfficiency is not being calculated correctly for GraphBD.')

%% Test 6: MultiplexBD

B11 = [
      0   .1  0   0   0
      .2  0   0   0   0
      0   0   0   .2  0
      0   0   .1  0   0
      0   0   0   0   0
      ];

B22 = [
      0   .1  0   0   0
      .2  0   0   0   0
      0   0   0   .2  0
      0   0   .1  0   0
      0   0   0   0   0
      ];
B = {B11  B22};

known_in_global_efficiency = {
                        [1/4 1/4 1/4 1/4 0]'
                        [1/4 1/4 1/4 1/4 0]'
                        };

g = MultiplexBD('B', B);
in_global_efficiency = InGlobalEfficiency('G', g).get('M');

assert(isequal(in_global_efficiency, known_in_global_efficiency), ...
    [BRAPH2.STR ':InGlobalEfficiency:' BRAPH2.BUG_ERR], ...
    'InGlobalEfficiency is not being calculated correctly for MultiplexBD.')

