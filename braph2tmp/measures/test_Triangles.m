%TEST_TRIANGLES

%% Test 1.1: Instantiation - empty

m = Triangles();

prop_number = Triangles.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Triangles.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
		['Triangles.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Triangles.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
		['Triangles.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Triangles.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Triangles')
m = Triangles( ...
	Triangles.ID, Triangles.getPropDefault(Triangles.ID), ...
	Triangles.LABEL, Triangles.getPropDefault(Triangles.LABEL), ...
	Triangles.NOTES, Triangles.getPropDefault(Triangles.NOTES), ...
	Triangles.G, Triangles.getPropDefault(Triangles.G), ...
	Triangles.M, Triangles.getPropDefault(Triangles.M), ...
	Triangles.RULE, Triangles.getPropDefault(Triangles.RULE) ...
	);
warning('on', 'BRAPH2:Triangles')

for prop = 1:1:Triangles.getPropNumber()
	TAG = upper(Triangles.getPropTag(prop));
	switch Triangles.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Triangles.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Triangles.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Triangles.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Triangles.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Triangles.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Triangles.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Being a result, Triangles.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Triangles.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Being a result, Triangles.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Triangles.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Triangles')
m_0 = Triangles( ...
	Triangles.ID, Triangles.getPropDefault(Triangles.ID), ...
	Triangles.LABEL, Triangles.getPropDefault(Triangles.LABEL), ...
	Triangles.NOTES, Triangles.getPropDefault(Triangles.NOTES), ...
	Triangles.G, Triangles.getPropDefault(Triangles.G), ...
	Triangles.M, Triangles.getPropDefault(Triangles.M), ...
	Triangles.RULE, Triangles.getPropDefault(Triangles.RULE) ...
	);
warning('on', 'BRAPH2:Triangles')

m_1 = Triangles( ...
	Triangles.ID, Callback('EL', m_0, 'PROP', 1), ...
	Triangles.LABEL, Triangles.getPropDefault(Triangles.LABEL), ...
	Triangles.NOTES, Triangles.getPropDefault(Triangles.NOTES), ...
	Triangles.G, Callback('EL', m_0, 'PROP', 4), ...
	Triangles.M, NoValue(), ...
	Triangles.RULE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = Triangles.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Triangles.getPropTag(prop));
	switch Triangles.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Triangles( ...
	Triangles.ID, Callback('EL', m_1, 'PROP', 1), ...
	Triangles.LABEL, Triangles.getPropDefault(Triangles.LABEL), ...
	Triangles.NOTES, Triangles.getPropDefault(Triangles.NOTES), ...
	Triangles.G, Callback('EL', m_1, 'PROP', 4), ...
	Triangles.M, NoValue(), ...
	Triangles.RULE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = Triangles.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Triangles.getPropTag(prop));
	switch Triangles.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Triangles( ...
	Triangles.ID, Callback('EL', m_2, 'PROP', 1), ...
	Triangles.LABEL, Triangles.getPropDefault(Triangles.LABEL), ...
	Triangles.NOTES, Triangles.getPropDefault(Triangles.NOTES), ...
	Triangles.G, Callback('EL', m_2, 'PROP', 4), ...
	Triangles.M, NoValue(), ...
	Triangles.RULE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = Triangles.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Triangles.getPropTag(prop));
	switch Triangles.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Triangles')
m = Triangles( ...
	Triangles.ID, Triangles.getPropDefault(Triangles.ID), ...
	Triangles.LABEL, Triangles.getPropDefault(Triangles.LABEL), ...
	Triangles.NOTES, Triangles.getPropDefault(Triangles.NOTES), ...
	Triangles.G, Triangles.getPropDefault(Triangles.G), ...
	Triangles.M, Triangles.getPropDefault(Triangles.M), ...
	Triangles.RULE, Triangles.getPropDefault(Triangles.RULE) ...
	);
warning('on', 'BRAPH2:Triangles')

prop_number = Triangles.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Triangles.getPropTag(prop));
	switch Triangles.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
					['Triangles.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
					['Triangles.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Triangles')
m = Triangles( ...
	Triangles.ID, Triangles.getPropDefault(Triangles.ID), ...
	Triangles.LABEL, Triangles.getPropDefault(Triangles.LABEL), ...
	Triangles.NOTES, Triangles.getPropDefault(Triangles.NOTES), ...
	Triangles.G, Triangles.getPropDefault(Triangles.G), ...
	Triangles.M, Triangles.getPropDefault(Triangles.M), ...
	Triangles.RULE, Triangles.getPropDefault(Triangles.RULE) ...
	);
warning('on', 'BRAPH2:Triangles')

for prop = 1:1:Triangles.getPropNumber()
	TAG = upper(Triangles.getPropTag(prop));
	switch Triangles.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Triangles:' BRAPH2.BUG_FUNC], ...
				['Triangles.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B = [
    0 1 1 1;
    1 0 1 0;
    1 1 0 1;
    1 0 1 0
    ];

known_triangles = {[2 1 2 1]'};

g = GraphBU('B', B);
triangles = Triangles('G', g);

assert(isequal(triangles.get('M'), known_triangles), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for GraphBU.')

%% Test 6: MultigraphBUT

B = [
    0 1 1 1;
    1 0 1 0;
    1 1 0 1;
    1 0 1 0
    ];

thresholds = [0 1];

known_triangles = { ...
    [2 1 2 1]'
    [0 0 0 0]'
    };


g = MultigraphBUT('B', B, 'THRESHOLDS', thresholds);
triangles = Triangles('G', g);

assert(isequal(triangles.get('M'), known_triangles), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for MultigraphBUT.')

%% Test 7: GraphBD

B = [
    0 0 1; 
    1 0 0; 
    0 1 0 
    ];

% cycle rule - default
known_triangles_default_cycle = {[1 1 1]'};

g = GraphBD('B', B);
triangles = Triangles('G', g);

assert(isequal(triangles.get('M'), known_triangles_default_cycle), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for GraphBD.')

% in rule 
known_triangles_in = {[0 0 0]'};

g = GraphBD('B', B);
triangles = Triangles('G', g, 'rule', 'in');

assert(isequal(triangles.get('M'), known_triangles_in), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for GraphBD.')

% out rule 
known_triangles_out = {[0 0 0]'};

g = GraphBD('B', B);
triangles = Triangles('G', g, 'rule',  'out');

assert(isequal(triangles.get('M'), known_triangles_out), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for GraphBD.')

% middleman rule
known_triangles_middleman = {[0 0 0]'};

g = GraphBD('B', B);
triangles = Triangles('G', g, 'rule', 'middleman');

assert(isequal(triangles.get('M'), known_triangles_middleman), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for GraphBD.')

% all rule 
known_triangles_all = {[1 1 1]'};

g = GraphBD('B', B);
triangles = Triangles('G', g, 'rule',  'all');

assert(isequal(triangles.get('M'), known_triangles_all), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for GraphBD.')

%% Test 8: MultiplexBU

B11 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];
B22 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];
B = {B11 B22};

known_triangles = {
                 [2 1 2 1]'
                 [2 1 2 1]'
                 };      

g = MultiplexBU('B', B);
triangles = Triangles('G', g);

assert(isequal(triangles.get('M'), known_triangles), ...
    [BRAPH2.STR ':Triangles:' BRAPH2.BUG_ERR], ...
    'Triangles is not being calculated correctly for MultiplexBU.')

