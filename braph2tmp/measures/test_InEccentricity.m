%TEST_INECCENTRICITY

%% Test 1.1: Instantiation - empty

m = InEccentricity();

prop_number = InEccentricity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InEccentricity.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
		['InEccentricity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in InEccentricity.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
		['InEccentricity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in InEccentricity.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:InEccentricity')
m = InEccentricity( ...
	InEccentricity.ID, InEccentricity.getPropDefault(InEccentricity.ID), ...
	InEccentricity.LABEL, InEccentricity.getPropDefault(InEccentricity.LABEL), ...
	InEccentricity.NOTES, InEccentricity.getPropDefault(InEccentricity.NOTES), ...
	InEccentricity.G, InEccentricity.getPropDefault(InEccentricity.G), ...
	InEccentricity.M, InEccentricity.getPropDefault(InEccentricity.M), ...
	InEccentricity.RULE, InEccentricity.getPropDefault(InEccentricity.RULE) ...
	);
warning('on', 'BRAPH2:InEccentricity')

for prop = 1:1:InEccentricity.getPropNumber()
	TAG = upper(InEccentricity.getPropTag(prop));
	switch InEccentricity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), InEccentricity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by InEccentricity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in InEccentricity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), InEccentricity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by InEccentricity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in InEccentricity.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['Being a result, InEccentricity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in InEccentricity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['Being a result, InEccentricity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in InEccentricity.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:InEccentricity')
m_0 = InEccentricity( ...
	InEccentricity.ID, InEccentricity.getPropDefault(InEccentricity.ID), ...
	InEccentricity.LABEL, InEccentricity.getPropDefault(InEccentricity.LABEL), ...
	InEccentricity.NOTES, InEccentricity.getPropDefault(InEccentricity.NOTES), ...
	InEccentricity.G, InEccentricity.getPropDefault(InEccentricity.G), ...
	InEccentricity.M, InEccentricity.getPropDefault(InEccentricity.M), ...
	InEccentricity.RULE, InEccentricity.getPropDefault(InEccentricity.RULE) ...
	);
warning('on', 'BRAPH2:InEccentricity')

m_1 = InEccentricity( ...
	InEccentricity.ID, Callback('EL', m_0, 'PROP', 1), ...
	InEccentricity.LABEL, InEccentricity.getPropDefault(InEccentricity.LABEL), ...
	InEccentricity.NOTES, InEccentricity.getPropDefault(InEccentricity.NOTES), ...
	InEccentricity.G, Callback('EL', m_0, 'PROP', 4), ...
	InEccentricity.M, NoValue(), ...
	InEccentricity.RULE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = InEccentricity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InEccentricity.getPropTag(prop));
	switch InEccentricity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = InEccentricity( ...
	InEccentricity.ID, Callback('EL', m_1, 'PROP', 1), ...
	InEccentricity.LABEL, InEccentricity.getPropDefault(InEccentricity.LABEL), ...
	InEccentricity.NOTES, InEccentricity.getPropDefault(InEccentricity.NOTES), ...
	InEccentricity.G, Callback('EL', m_1, 'PROP', 4), ...
	InEccentricity.M, NoValue(), ...
	InEccentricity.RULE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = InEccentricity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InEccentricity.getPropTag(prop));
	switch InEccentricity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = InEccentricity( ...
	InEccentricity.ID, Callback('EL', m_2, 'PROP', 1), ...
	InEccentricity.LABEL, InEccentricity.getPropDefault(InEccentricity.LABEL), ...
	InEccentricity.NOTES, InEccentricity.getPropDefault(InEccentricity.NOTES), ...
	InEccentricity.G, Callback('EL', m_2, 'PROP', 4), ...
	InEccentricity.M, NoValue(), ...
	InEccentricity.RULE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = InEccentricity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InEccentricity.getPropTag(prop));
	switch InEccentricity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:InEccentricity')
m = InEccentricity( ...
	InEccentricity.ID, InEccentricity.getPropDefault(InEccentricity.ID), ...
	InEccentricity.LABEL, InEccentricity.getPropDefault(InEccentricity.LABEL), ...
	InEccentricity.NOTES, InEccentricity.getPropDefault(InEccentricity.NOTES), ...
	InEccentricity.G, InEccentricity.getPropDefault(InEccentricity.G), ...
	InEccentricity.M, InEccentricity.getPropDefault(InEccentricity.M), ...
	InEccentricity.RULE, InEccentricity.getPropDefault(InEccentricity.RULE) ...
	);
warning('on', 'BRAPH2:InEccentricity')

prop_number = InEccentricity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(InEccentricity.getPropTag(prop));
	switch InEccentricity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
					['InEccentricity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
					['InEccentricity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:InEccentricity')
m = InEccentricity( ...
	InEccentricity.ID, InEccentricity.getPropDefault(InEccentricity.ID), ...
	InEccentricity.LABEL, InEccentricity.getPropDefault(InEccentricity.LABEL), ...
	InEccentricity.NOTES, InEccentricity.getPropDefault(InEccentricity.NOTES), ...
	InEccentricity.G, InEccentricity.getPropDefault(InEccentricity.G), ...
	InEccentricity.M, InEccentricity.getPropDefault(InEccentricity.M), ...
	InEccentricity.RULE, InEccentricity.getPropDefault(InEccentricity.RULE) ...
	);
warning('on', 'BRAPH2:InEccentricity')

for prop = 1:1:InEccentricity.getPropNumber()
	TAG = upper(InEccentricity.getPropTag(prop));
	switch InEccentricity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_FUNC], ...
				['InEccentricity.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBD

B = [
    0   .1  0   0   0
    .2   0  0   0   0
    0    0  0  .2   0
    0    0 .1   0   0
    0    0  0   0   0
    ];

known_in_eccentricity_subgraphs = {[1 1 1 1 0]'};
known_in_eccentricity_default = {[Inf Inf Inf Inf Inf]'};

g = GraphBD('B', B);
m_outside_g = InEccentricity('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphBD.')

g = GraphBD('B', B);
m_inside_g = g.getMeasure('InEccentricity', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphBD.')

g = GraphBD('B', B);
m_outside_g = InEccentricity('G', g);
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphBD.')

g = GraphBD('B', B);
m_inside_g = g.getMeasure('InEccentricity');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphBD.')

%% Test 6: GraphWD

B = [
    0   .1  0   0   0
    .2   0  0   0   0
    0    0  0  .2   0
    0    0 .1   0   0
    0    0  0   0   0
    ];

known_in_eccentricity_subgraphs = {[5 10 10 5 0]'};
known_in_eccentricity_default = {[Inf Inf Inf Inf Inf]'};

g = GraphWD('B', B);
m_outside_g = InEccentricity('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphWD.')

g = GraphWD('B', B);
m_inside_g = g.getMeasure('InEccentricity', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphWD.')

g = GraphWD('B', B);
m_outside_g = InEccentricity('G', g, 'rule', 'all');
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphWD.')

g = GraphWD('B', B);
m_inside_g = g.getMeasure('InEccentricity', 'rule', 'all');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for GraphWD.')

%% Test 7: MultiplexBD

B11 = [
    0   .1  0   0   0
    .2   0  0   0   0
    0    0  0  .2   0
    0    0 .1   0   0
    0    0  0   0   0
      ];
B22 = [
    0   .1  0   0   0
    .2   0  0   0   0
    0    0  0  .2   0
    0    0 .1   0   0
    0    0  0   0   0
      ];
B = {B11 B22};

known_in_eccentricity_subgraphs = { 
                                [1 1 1 1 0]'
                                [1 1 1 1 0]'
                               };
known_in_eccentricity_default = {
                             [Inf Inf Inf Inf Inf]'
                             [Inf Inf Inf Inf Inf]'
                             };

g = MultiplexBD('B', B);
m_outside_g = InEccentricity('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexBD.')

g = MultiplexBD('B', B);
m_inside_g = g.getMeasure('InEccentricity', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexBD.')

g = MultiplexBD('B', B);
m_outside_g = InEccentricity('G', g, 'rule', 'all');
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexBD.')

g = MultiplexBD('B', B);
m_inside_g = g.getMeasure('InEccentricity', 'rule', 'all');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexBD.')

%% Test 8: MultiplexWD

B11 = [
    0   .1  0   0   0
    .2   0  0   0   0
    0    0  0  .2   0
    0    0 .1   0   0
    0    0  0   0   0
      ];
B22 = [
    0   .1  0   0   0
    .2   0  0   0   0
    0    0  0  .2   0
    0    0 .1   0   0
    0    0  0   0   0
      ];
B = {B11 B22};

known_in_eccentricity_subgraphs = {
                                [5 10 10 5 0]'
                                [5 10 10 5 0]'
                               };
known_in_eccentricity_default = {
                             [Inf Inf Inf Inf Inf]'
                             [Inf Inf Inf Inf Inf]'
                             };
                           
g = MultiplexWD('B', B);
m_outside_g = InEccentricity('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexWD.')

g = MultiplexWD('B', B);
m_inside_g = g.getMeasure('InEccentricity', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_subgraphs), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexWD.')

g = MultiplexWD('B', B);
m_outside_g = InEccentricity('G', g, 'rule', 'all');
assert(isequal(m_outside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexWD.')

g = MultiplexWD('B', B);
m_inside_g = g.getMeasure('InEccentricity', 'rule', 'all');
assert(isequal(m_inside_g.get('M'), known_in_eccentricity_default), ...
    [BRAPH2.STR ':InEccentricity:' BRAPH2.BUG_ERR], ...
    'InEccentricity is not being calculated correctly for MultiplexWD.')

