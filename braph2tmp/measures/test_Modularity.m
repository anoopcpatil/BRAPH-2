%TEST_MODULARITY

%% Test 1.1: Instantiation - empty

m = Modularity();

prop_number = Modularity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Modularity.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
		['Modularity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Modularity.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
		['Modularity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Modularity.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Modularity')
m = Modularity( ...
	Modularity.ID, Modularity.getPropDefault(Modularity.ID), ...
	Modularity.LABEL, Modularity.getPropDefault(Modularity.LABEL), ...
	Modularity.NOTES, Modularity.getPropDefault(Modularity.NOTES), ...
	Modularity.G, Modularity.getPropDefault(Modularity.G), ...
	Modularity.M, Modularity.getPropDefault(Modularity.M), ...
	Modularity.RULE, Modularity.getPropDefault(Modularity.RULE), ...
	Modularity.GAMMA, Modularity.getPropDefault(Modularity.GAMMA), ...
	Modularity.M0, Modularity.getPropDefault(Modularity.M0), ...
	Modularity.LOUVAIN_OM, Modularity.getPropDefault(Modularity.LOUVAIN_OM), ...
	Modularity.OM_TYPE, Modularity.getPropDefault(Modularity.OM_TYPE), ...
	Modularity.QUALITY_FUNCTION, Modularity.getPropDefault(Modularity.QUALITY_FUNCTION) ...
	);
warning('on', 'BRAPH2:Modularity')

for prop = 1:1:Modularity.getPropNumber()
	TAG = upper(Modularity.getPropTag(prop));
	switch Modularity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Modularity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Modularity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Modularity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Modularity.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Modularity.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Modularity.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Being a result, Modularity.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Modularity.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Being a result, Modularity.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Modularity.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Modularity')
m_0 = Modularity( ...
	Modularity.ID, Modularity.getPropDefault(Modularity.ID), ...
	Modularity.LABEL, Modularity.getPropDefault(Modularity.LABEL), ...
	Modularity.NOTES, Modularity.getPropDefault(Modularity.NOTES), ...
	Modularity.G, Modularity.getPropDefault(Modularity.G), ...
	Modularity.M, Modularity.getPropDefault(Modularity.M), ...
	Modularity.RULE, Modularity.getPropDefault(Modularity.RULE), ...
	Modularity.GAMMA, Modularity.getPropDefault(Modularity.GAMMA), ...
	Modularity.M0, Modularity.getPropDefault(Modularity.M0), ...
	Modularity.LOUVAIN_OM, Modularity.getPropDefault(Modularity.LOUVAIN_OM), ...
	Modularity.OM_TYPE, Modularity.getPropDefault(Modularity.OM_TYPE), ...
	Modularity.QUALITY_FUNCTION, Modularity.getPropDefault(Modularity.QUALITY_FUNCTION) ...
	);
warning('on', 'BRAPH2:Modularity')

m_1 = Modularity( ...
	Modularity.ID, Callback('EL', m_0, 'PROP', 1), ...
	Modularity.LABEL, Modularity.getPropDefault(Modularity.LABEL), ...
	Modularity.NOTES, Modularity.getPropDefault(Modularity.NOTES), ...
	Modularity.G, Callback('EL', m_0, 'PROP', 4), ...
	Modularity.M, NoValue(), ...
	Modularity.RULE, Callback('EL', m_0, 'PROP', 6), ...
	Modularity.GAMMA, Callback('EL', m_0, 'PROP', 7), ...
	Modularity.M0, Callback('EL', m_0, 'PROP', 8), ...
	Modularity.LOUVAIN_OM, Callback('EL', m_0, 'PROP', 9), ...
	Modularity.OM_TYPE, Callback('EL', m_0, 'PROP', 10), ...
	Modularity.QUALITY_FUNCTION, Modularity.getPropDefault(Modularity.QUALITY_FUNCTION) ...
	);
	
prop_number = Modularity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Modularity.getPropTag(prop));
	switch Modularity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Modularity( ...
	Modularity.ID, Callback('EL', m_1, 'PROP', 1), ...
	Modularity.LABEL, Modularity.getPropDefault(Modularity.LABEL), ...
	Modularity.NOTES, Modularity.getPropDefault(Modularity.NOTES), ...
	Modularity.G, Callback('EL', m_1, 'PROP', 4), ...
	Modularity.M, NoValue(), ...
	Modularity.RULE, Callback('EL', m_1, 'PROP', 6), ...
	Modularity.GAMMA, Callback('EL', m_1, 'PROP', 7), ...
	Modularity.M0, Callback('EL', m_1, 'PROP', 8), ...
	Modularity.LOUVAIN_OM, Callback('EL', m_1, 'PROP', 9), ...
	Modularity.OM_TYPE, Callback('EL', m_1, 'PROP', 10), ...
	Modularity.QUALITY_FUNCTION, Modularity.getPropDefault(Modularity.QUALITY_FUNCTION) ...
	);
	
prop_number = Modularity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Modularity.getPropTag(prop));
	switch Modularity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Modularity( ...
	Modularity.ID, Callback('EL', m_2, 'PROP', 1), ...
	Modularity.LABEL, Modularity.getPropDefault(Modularity.LABEL), ...
	Modularity.NOTES, Modularity.getPropDefault(Modularity.NOTES), ...
	Modularity.G, Callback('EL', m_2, 'PROP', 4), ...
	Modularity.M, NoValue(), ...
	Modularity.RULE, Callback('EL', m_2, 'PROP', 6), ...
	Modularity.GAMMA, Callback('EL', m_2, 'PROP', 7), ...
	Modularity.M0, Callback('EL', m_2, 'PROP', 8), ...
	Modularity.LOUVAIN_OM, Callback('EL', m_2, 'PROP', 9), ...
	Modularity.OM_TYPE, Callback('EL', m_2, 'PROP', 10), ...
	Modularity.QUALITY_FUNCTION, Modularity.getPropDefault(Modularity.QUALITY_FUNCTION) ...
	);
	
prop_number = Modularity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Modularity.getPropTag(prop));
	switch Modularity.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Modularity')
m = Modularity( ...
	Modularity.ID, Modularity.getPropDefault(Modularity.ID), ...
	Modularity.LABEL, Modularity.getPropDefault(Modularity.LABEL), ...
	Modularity.NOTES, Modularity.getPropDefault(Modularity.NOTES), ...
	Modularity.G, Modularity.getPropDefault(Modularity.G), ...
	Modularity.M, Modularity.getPropDefault(Modularity.M), ...
	Modularity.RULE, Modularity.getPropDefault(Modularity.RULE), ...
	Modularity.GAMMA, Modularity.getPropDefault(Modularity.GAMMA), ...
	Modularity.M0, Modularity.getPropDefault(Modularity.M0), ...
	Modularity.LOUVAIN_OM, Modularity.getPropDefault(Modularity.LOUVAIN_OM), ...
	Modularity.OM_TYPE, Modularity.getPropDefault(Modularity.OM_TYPE), ...
	Modularity.QUALITY_FUNCTION, Modularity.getPropDefault(Modularity.QUALITY_FUNCTION) ...
	);
warning('on', 'BRAPH2:Modularity')

prop_number = Modularity.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Modularity.getPropTag(prop));
	switch Modularity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
					['Modularity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
					['Modularity.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Modularity')
m = Modularity( ...
	Modularity.ID, Modularity.getPropDefault(Modularity.ID), ...
	Modularity.LABEL, Modularity.getPropDefault(Modularity.LABEL), ...
	Modularity.NOTES, Modularity.getPropDefault(Modularity.NOTES), ...
	Modularity.G, Modularity.getPropDefault(Modularity.G), ...
	Modularity.M, Modularity.getPropDefault(Modularity.M), ...
	Modularity.RULE, Modularity.getPropDefault(Modularity.RULE), ...
	Modularity.GAMMA, Modularity.getPropDefault(Modularity.GAMMA), ...
	Modularity.M0, Modularity.getPropDefault(Modularity.M0), ...
	Modularity.LOUVAIN_OM, Modularity.getPropDefault(Modularity.LOUVAIN_OM), ...
	Modularity.OM_TYPE, Modularity.getPropDefault(Modularity.OM_TYPE), ...
	Modularity.QUALITY_FUNCTION, Modularity.getPropDefault(Modularity.QUALITY_FUNCTION) ...
	);
warning('on', 'BRAPH2:Modularity')

for prop = 1:1:Modularity.getPropNumber()
	TAG = upper(Modularity.getPropTag(prop));
	switch Modularity.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Modularity:' BRAPH2.BUG_FUNC], ...
				['Modularity.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

b = rand(10);
g = GraphBU('B', b);
m = Modularity('G', g).get('M');

assert(~isempty(m), ...
    [BRAPH2.STR ':Modularity:' BRAPH2.BUG_ERR], ...
    'Modularity is not being calculated correctly for GraphBU.');

