%TEST_DEGREE

%% Test 1.1: Instantiation - empty

m = Degree();

prop_number = Degree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Degree.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
		['Degree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Degree.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
		['Degree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Degree.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Degree')
m = Degree( ...
	Degree.ID, Degree.getPropDefault(Degree.ID), ...
	Degree.LABEL, Degree.getPropDefault(Degree.LABEL), ...
	Degree.NOTES, Degree.getPropDefault(Degree.NOTES), ...
	Degree.G, Degree.getPropDefault(Degree.G), ...
	Degree.M, Degree.getPropDefault(Degree.M) ...
	);
warning('on', 'BRAPH2:Degree')

for prop = 1:1:Degree.getPropNumber()
	TAG = upper(Degree.getPropTag(prop));
	switch Degree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Degree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Degree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Degree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Degree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Degree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Degree.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Being a result, Degree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Degree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Being a result, Degree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Degree.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Degree')
m_0 = Degree( ...
	Degree.ID, Degree.getPropDefault(Degree.ID), ...
	Degree.LABEL, Degree.getPropDefault(Degree.LABEL), ...
	Degree.NOTES, Degree.getPropDefault(Degree.NOTES), ...
	Degree.G, Degree.getPropDefault(Degree.G), ...
	Degree.M, Degree.getPropDefault(Degree.M) ...
	);
warning('on', 'BRAPH2:Degree')

m_1 = Degree( ...
	Degree.ID, Callback('EL', m_0, 'PROP', 1), ...
	Degree.LABEL, Degree.getPropDefault(Degree.LABEL), ...
	Degree.NOTES, Degree.getPropDefault(Degree.NOTES), ...
	Degree.G, Callback('EL', m_0, 'PROP', 4), ...
	Degree.M, NoValue() ...
	);
	
prop_number = Degree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Degree.getPropTag(prop));
	switch Degree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Degree( ...
	Degree.ID, Callback('EL', m_1, 'PROP', 1), ...
	Degree.LABEL, Degree.getPropDefault(Degree.LABEL), ...
	Degree.NOTES, Degree.getPropDefault(Degree.NOTES), ...
	Degree.G, Callback('EL', m_1, 'PROP', 4), ...
	Degree.M, NoValue() ...
	);
	
prop_number = Degree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Degree.getPropTag(prop));
	switch Degree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Degree( ...
	Degree.ID, Callback('EL', m_2, 'PROP', 1), ...
	Degree.LABEL, Degree.getPropDefault(Degree.LABEL), ...
	Degree.NOTES, Degree.getPropDefault(Degree.NOTES), ...
	Degree.G, Callback('EL', m_2, 'PROP', 4), ...
	Degree.M, NoValue() ...
	);
	
prop_number = Degree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Degree.getPropTag(prop));
	switch Degree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Degree')
m = Degree( ...
	Degree.ID, Degree.getPropDefault(Degree.ID), ...
	Degree.LABEL, Degree.getPropDefault(Degree.LABEL), ...
	Degree.NOTES, Degree.getPropDefault(Degree.NOTES), ...
	Degree.G, Degree.getPropDefault(Degree.G), ...
	Degree.M, Degree.getPropDefault(Degree.M) ...
	);
warning('on', 'BRAPH2:Degree')

prop_number = Degree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Degree.getPropTag(prop));
	switch Degree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
					['Degree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
					['Degree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Degree')
m = Degree( ...
	Degree.ID, Degree.getPropDefault(Degree.ID), ...
	Degree.LABEL, Degree.getPropDefault(Degree.LABEL), ...
	Degree.NOTES, Degree.getPropDefault(Degree.NOTES), ...
	Degree.G, Degree.getPropDefault(Degree.G), ...
	Degree.M, Degree.getPropDefault(Degree.M) ...
	);
warning('on', 'BRAPH2:Degree')

for prop = 1:1:Degree.getPropNumber()
	TAG = upper(Degree.getPropTag(prop));
	switch Degree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Degree:' BRAPH2.BUG_FUNC], ...
				['Degree.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B = [
    0   1   1
    1   0   0
    1   0   0
    ];

known_degree = {[2 1 1]'};

g = GraphBU('B', B);

m_outside_g = Degree('G', g);
assert(isequal(m_outside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for GraphBU.')

m_inside_g = g.getMeasure('Degree');
assert(isequal(m_inside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for GraphBU.')

%% Test 6: GraphWU

B = [
    0   .6  1
    .6  0   0
    1   0   0
    ];

known_degree = {[2 1 1]'};

g = GraphWU('B', B);

m_outside_g = Degree('G', g);
assert(isequal(m_outside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for GraphWU.')

m_inside_g = g.getMeasure('Degree');
assert(isequal(m_inside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for GraphWU.')

%% Test 7: MultigraphBUT

B = [
    0   .2   .7
    .2   0   0
    .7   0   0
    ];

thresholds = [0 .5 1];

known_degree = { ...
    [2 1 1]'
    [1 0 1]'
    [0 0 0]'
    };

g = MultigraphBUT('B', B, 'THRESHOLDS', thresholds);

m_outside_g = Degree('G', g);
assert(isequal(m_outside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for MultigraphBUT.')

m_inside_g = g.getMeasure('Degree');
assert(isequal(m_inside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for MultigraphBUT.')

%% Test 8: MultigraphBUD

B = [
    0   .2   .7
    .2   0   .1
    .7  .1   0
    ];

densities = [0 33 67 100];

known_degree = { ...
    [0 0 0]'
    [1 0 1]'
    [2 1 1]'
    [2 2 2]'
    };

g = MultigraphBUD('B', B, 'DENSITIES', densities);

m_outside_g = Degree('G', g);
assert(isequal(m_outside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for MultigraphBUD.')

m_inside_g = g.getMeasure('Degree');
assert(isequal(m_inside_g.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for MultigraphBUD.')

%% Test 9: MultiplexBU

B11 = [
    0   1   1
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   1
    0   1   0
    ];
B = {B11 B22};

known_degree = {
    [2 1 1]'
    [1 2 1]'
    };

g = MultiplexBU('B', B);
degree = Degree('G', g);

assert(isequal(degree.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for MultiplexBU.')

%% Test 10: MultiplexWU

B11 = [
    0   .2  1
    .2  0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   .3
    0   .3  0
    ];
B= {B11 B22};

known_degree = {
    [2 1 1]'
    [1 2 1]'
    };

g = MultiplexWU('B', B);
degree = Degree('G', g);

assert(isequal(degree.get('M'), known_degree), ...
    [BRAPH2.STR ':Degree:' BRAPH2.BUG_ERR], ...
    'Degree is not being calculated correctly for MultiplexWU.')

