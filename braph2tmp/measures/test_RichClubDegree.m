%TEST_RICHCLUBDEGREE

%% Test 1.1: Instantiation - empty

m = RichClubDegree();

prop_number = RichClubDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClubDegree.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
		['RichClubDegree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in RichClubDegree.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
		['RichClubDegree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in RichClubDegree.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:RichClubDegree')
m = RichClubDegree( ...
	RichClubDegree.ID, RichClubDegree.getPropDefault(RichClubDegree.ID), ...
	RichClubDegree.LABEL, RichClubDegree.getPropDefault(RichClubDegree.LABEL), ...
	RichClubDegree.NOTES, RichClubDegree.getPropDefault(RichClubDegree.NOTES), ...
	RichClubDegree.G, RichClubDegree.getPropDefault(RichClubDegree.G), ...
	RichClubDegree.M, RichClubDegree.getPropDefault(RichClubDegree.M), ...
	RichClubDegree.PARAMETRIC_VALUE, RichClubDegree.getPropDefault(RichClubDegree.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClubDegree')

for prop = 1:1:RichClubDegree.getPropNumber()
	TAG = upper(RichClubDegree.getPropTag(prop));
	switch RichClubDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), RichClubDegree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by RichClubDegree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in RichClubDegree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), RichClubDegree.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by RichClubDegree.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in RichClubDegree.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['Being a result, RichClubDegree.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in RichClubDegree.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['Being a result, RichClubDegree.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in RichClubDegree.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:RichClubDegree')
m_0 = RichClubDegree( ...
	RichClubDegree.ID, RichClubDegree.getPropDefault(RichClubDegree.ID), ...
	RichClubDegree.LABEL, RichClubDegree.getPropDefault(RichClubDegree.LABEL), ...
	RichClubDegree.NOTES, RichClubDegree.getPropDefault(RichClubDegree.NOTES), ...
	RichClubDegree.G, RichClubDegree.getPropDefault(RichClubDegree.G), ...
	RichClubDegree.M, RichClubDegree.getPropDefault(RichClubDegree.M), ...
	RichClubDegree.PARAMETRIC_VALUE, RichClubDegree.getPropDefault(RichClubDegree.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClubDegree')

m_1 = RichClubDegree( ...
	RichClubDegree.ID, Callback('EL', m_0, 'PROP', 1), ...
	RichClubDegree.LABEL, RichClubDegree.getPropDefault(RichClubDegree.LABEL), ...
	RichClubDegree.NOTES, RichClubDegree.getPropDefault(RichClubDegree.NOTES), ...
	RichClubDegree.G, Callback('EL', m_0, 'PROP', 4), ...
	RichClubDegree.M, NoValue(), ...
	RichClubDegree.PARAMETRIC_VALUE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = RichClubDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClubDegree.getPropTag(prop));
	switch RichClubDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = RichClubDegree( ...
	RichClubDegree.ID, Callback('EL', m_1, 'PROP', 1), ...
	RichClubDegree.LABEL, RichClubDegree.getPropDefault(RichClubDegree.LABEL), ...
	RichClubDegree.NOTES, RichClubDegree.getPropDefault(RichClubDegree.NOTES), ...
	RichClubDegree.G, Callback('EL', m_1, 'PROP', 4), ...
	RichClubDegree.M, NoValue(), ...
	RichClubDegree.PARAMETRIC_VALUE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = RichClubDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClubDegree.getPropTag(prop));
	switch RichClubDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = RichClubDegree( ...
	RichClubDegree.ID, Callback('EL', m_2, 'PROP', 1), ...
	RichClubDegree.LABEL, RichClubDegree.getPropDefault(RichClubDegree.LABEL), ...
	RichClubDegree.NOTES, RichClubDegree.getPropDefault(RichClubDegree.NOTES), ...
	RichClubDegree.G, Callback('EL', m_2, 'PROP', 4), ...
	RichClubDegree.M, NoValue(), ...
	RichClubDegree.PARAMETRIC_VALUE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = RichClubDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClubDegree.getPropTag(prop));
	switch RichClubDegree.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:RichClubDegree')
m = RichClubDegree( ...
	RichClubDegree.ID, RichClubDegree.getPropDefault(RichClubDegree.ID), ...
	RichClubDegree.LABEL, RichClubDegree.getPropDefault(RichClubDegree.LABEL), ...
	RichClubDegree.NOTES, RichClubDegree.getPropDefault(RichClubDegree.NOTES), ...
	RichClubDegree.G, RichClubDegree.getPropDefault(RichClubDegree.G), ...
	RichClubDegree.M, RichClubDegree.getPropDefault(RichClubDegree.M), ...
	RichClubDegree.PARAMETRIC_VALUE, RichClubDegree.getPropDefault(RichClubDegree.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClubDegree')

prop_number = RichClubDegree.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(RichClubDegree.getPropTag(prop));
	switch RichClubDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
					['RichClubDegree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
					['RichClubDegree.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:RichClubDegree')
m = RichClubDegree( ...
	RichClubDegree.ID, RichClubDegree.getPropDefault(RichClubDegree.ID), ...
	RichClubDegree.LABEL, RichClubDegree.getPropDefault(RichClubDegree.LABEL), ...
	RichClubDegree.NOTES, RichClubDegree.getPropDefault(RichClubDegree.NOTES), ...
	RichClubDegree.G, RichClubDegree.getPropDefault(RichClubDegree.G), ...
	RichClubDegree.M, RichClubDegree.getPropDefault(RichClubDegree.M), ...
	RichClubDegree.PARAMETRIC_VALUE, RichClubDegree.getPropDefault(RichClubDegree.PARAMETRIC_VALUE) ...
	);
warning('on', 'BRAPH2:RichClubDegree')

for prop = 1:1:RichClubDegree.getPropNumber()
	TAG = upper(RichClubDegree.getPropTag(prop));
	switch RichClubDegree.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_FUNC], ...
				['RichClubDegree.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B = [
     0  1  1  0; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

known_richclubdegree = {[2 2 2 0]'};

g = GraphBU('B', B);

richclubdegree = RichClubDegree('G', g);
assert(isequal(richclubdegree.get('M'), known_richclubdegree), ...
    [BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_ERR], ...
    'RichClubDegree is not being calculated correctly for GraphBU.')

%% Test 6: MultigraphBUT

B = [
     0  1  1  0; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

known_richclubdegree = {
                        [2 2 2 0]'
                        [0 0 0 0]'};

g = MultigraphBUT('B', B, 'THRESHOLDS', [0 1]);

richclubdegree = RichClubDegree('G', g);
assert(isequal(richclubdegree.get('M'), known_richclubdegree), ...
    [BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_ERR], ...
    'RichClubDegree is not being calculated correctly for MultigraphBUT.')

%% Test 7: GraphWU

A = [
    0   .1  1  0; 
    .1  0   1  .8; 
    1   1   0  0;
    0   .8  0  0
    ];

known_richclubdegree = {[2 2 2 0]'};

g = GraphWU('B', A);
richclubdegree = RichClubDegree('G', g, 'PARAMETRIC_VALUE', 1).get('M');

assert(isequal(richclubdegree, known_richclubdegree), ...
    [BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_ERR], ...
    'RichClubDegree is not being calculated correctly for GraphWU.')

%% Test 8: MultiplexBD

A11 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

A22 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  1  0
    ];
A = {A11 A22};

clear richclub_l1;
clear richclub_l2;
richclub_l1(:, 1, 1) = [5/2 3 2 3/2]';
richclub_l1(:, 1, 2) = [1 1 0 0]';

richclub_l2(:, 1, 1) = [5/2 3 5/2 2]';
richclub_l2(:, 1, 2) = [2 2 2 0]';

known_richclubdegree = {
                 richclub_l1
                 richclub_l2
                 };      

g = MultiplexBD('B', A);
richclubdegree = RichClubDegree('G', g, 'PARAMETRIC_VALUE', 2).get('M');

assert(isequal(richclubdegree, known_richclubdegree), ...
    [BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_ERR], ...
    'RichClubDegree is not being calculated correctly for MultiplexBD.')

%% Test 9: MultiplexWU

A11 = [
    0   .1  1  0; 
    .1  0   1  .8; 
    1   1   0  0;
    0   .8  0  0
    ];

A22 = [
    0   .1  1  1; 
    .1  0   1  .8; 
    1   1   0  0;
    1   .8  0  0
    ];
A = {A11 A22};


known_richclubdegree = {
    [2 2 2 0]'
    [3 3 2 2]'
    };

g = MultiplexWU('B', A);
richclubdegree = RichClubDegree('G', g, 'PARAMETRIC_VALUE', 1).get('M');

assert(isequal(richclubdegree, known_richclubdegree), ...
    [BRAPH2.STR ':RichClubDegree:' BRAPH2.BUG_ERR], ...
    'RichClubDegree is not being calculated correctly for MultiplexWU.')

