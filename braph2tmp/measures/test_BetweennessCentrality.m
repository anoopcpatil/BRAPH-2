%TEST_BETWEENNESSCENTRALITY

%% Test 1.1: Instantiation - empty

m = BetweennessCentrality();

prop_number = BetweennessCentrality.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BetweennessCentrality.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
		['BetweennessCentrality.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in BetweennessCentrality.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
		['BetweennessCentrality.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in BetweennessCentrality.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:BetweennessCentrality')
m = BetweennessCentrality( ...
	BetweennessCentrality.ID, BetweennessCentrality.getPropDefault(BetweennessCentrality.ID), ...
	BetweennessCentrality.LABEL, BetweennessCentrality.getPropDefault(BetweennessCentrality.LABEL), ...
	BetweennessCentrality.NOTES, BetweennessCentrality.getPropDefault(BetweennessCentrality.NOTES), ...
	BetweennessCentrality.G, BetweennessCentrality.getPropDefault(BetweennessCentrality.G), ...
	BetweennessCentrality.M, BetweennessCentrality.getPropDefault(BetweennessCentrality.M) ...
	);
warning('on', 'BRAPH2:BetweennessCentrality')

for prop = 1:1:BetweennessCentrality.getPropNumber()
	TAG = upper(BetweennessCentrality.getPropTag(prop));
	switch BetweennessCentrality.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), BetweennessCentrality.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by BetweennessCentrality.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in BetweennessCentrality.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), BetweennessCentrality.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by BetweennessCentrality.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in BetweennessCentrality.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['Being a result, BetweennessCentrality.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in BetweennessCentrality.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['Being a result, BetweennessCentrality.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in BetweennessCentrality.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:BetweennessCentrality')
m_0 = BetweennessCentrality( ...
	BetweennessCentrality.ID, BetweennessCentrality.getPropDefault(BetweennessCentrality.ID), ...
	BetweennessCentrality.LABEL, BetweennessCentrality.getPropDefault(BetweennessCentrality.LABEL), ...
	BetweennessCentrality.NOTES, BetweennessCentrality.getPropDefault(BetweennessCentrality.NOTES), ...
	BetweennessCentrality.G, BetweennessCentrality.getPropDefault(BetweennessCentrality.G), ...
	BetweennessCentrality.M, BetweennessCentrality.getPropDefault(BetweennessCentrality.M) ...
	);
warning('on', 'BRAPH2:BetweennessCentrality')

m_1 = BetweennessCentrality( ...
	BetweennessCentrality.ID, Callback('EL', m_0, 'PROP', 1), ...
	BetweennessCentrality.LABEL, BetweennessCentrality.getPropDefault(BetweennessCentrality.LABEL), ...
	BetweennessCentrality.NOTES, BetweennessCentrality.getPropDefault(BetweennessCentrality.NOTES), ...
	BetweennessCentrality.G, Callback('EL', m_0, 'PROP', 4), ...
	BetweennessCentrality.M, NoValue() ...
	);
	
prop_number = BetweennessCentrality.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BetweennessCentrality.getPropTag(prop));
	switch BetweennessCentrality.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = BetweennessCentrality( ...
	BetweennessCentrality.ID, Callback('EL', m_1, 'PROP', 1), ...
	BetweennessCentrality.LABEL, BetweennessCentrality.getPropDefault(BetweennessCentrality.LABEL), ...
	BetweennessCentrality.NOTES, BetweennessCentrality.getPropDefault(BetweennessCentrality.NOTES), ...
	BetweennessCentrality.G, Callback('EL', m_1, 'PROP', 4), ...
	BetweennessCentrality.M, NoValue() ...
	);
	
prop_number = BetweennessCentrality.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BetweennessCentrality.getPropTag(prop));
	switch BetweennessCentrality.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = BetweennessCentrality( ...
	BetweennessCentrality.ID, Callback('EL', m_2, 'PROP', 1), ...
	BetweennessCentrality.LABEL, BetweennessCentrality.getPropDefault(BetweennessCentrality.LABEL), ...
	BetweennessCentrality.NOTES, BetweennessCentrality.getPropDefault(BetweennessCentrality.NOTES), ...
	BetweennessCentrality.G, Callback('EL', m_2, 'PROP', 4), ...
	BetweennessCentrality.M, NoValue() ...
	);
	
prop_number = BetweennessCentrality.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BetweennessCentrality.getPropTag(prop));
	switch BetweennessCentrality.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:BetweennessCentrality')
m = BetweennessCentrality( ...
	BetweennessCentrality.ID, BetweennessCentrality.getPropDefault(BetweennessCentrality.ID), ...
	BetweennessCentrality.LABEL, BetweennessCentrality.getPropDefault(BetweennessCentrality.LABEL), ...
	BetweennessCentrality.NOTES, BetweennessCentrality.getPropDefault(BetweennessCentrality.NOTES), ...
	BetweennessCentrality.G, BetweennessCentrality.getPropDefault(BetweennessCentrality.G), ...
	BetweennessCentrality.M, BetweennessCentrality.getPropDefault(BetweennessCentrality.M) ...
	);
warning('on', 'BRAPH2:BetweennessCentrality')

prop_number = BetweennessCentrality.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(BetweennessCentrality.getPropTag(prop));
	switch BetweennessCentrality.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
					['BetweennessCentrality.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
					['BetweennessCentrality.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:BetweennessCentrality')
m = BetweennessCentrality( ...
	BetweennessCentrality.ID, BetweennessCentrality.getPropDefault(BetweennessCentrality.ID), ...
	BetweennessCentrality.LABEL, BetweennessCentrality.getPropDefault(BetweennessCentrality.LABEL), ...
	BetweennessCentrality.NOTES, BetweennessCentrality.getPropDefault(BetweennessCentrality.NOTES), ...
	BetweennessCentrality.G, BetweennessCentrality.getPropDefault(BetweennessCentrality.G), ...
	BetweennessCentrality.M, BetweennessCentrality.getPropDefault(BetweennessCentrality.M) ...
	);
warning('on', 'BRAPH2:BetweennessCentrality')

for prop = 1:1:BetweennessCentrality.getPropNumber()
	TAG = upper(BetweennessCentrality.getPropTag(prop));
	switch BetweennessCentrality.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_FUNC], ...
				['BetweennessCentrality.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B_BU = [
    0 1 1;
    1 0 0;
    1 0 0
    ];

bc_BU = [1, 0, 0]';

g = GraphBU('B', B_BU);

bc_1 = BetweennessCentrality('G', g).get('M');

assert(isequal(bc_1{1}, bc_BU), ...
    [BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_ERR], ...
    'Betweenness Centrality is not being calculated correctly for GraphBU')

%% Test 6: GraphWU

B_WU = [
    0 1 4; 
    1 0 0; 
    4 0 0 
    ];

bc_WU = [1, 0, 0]'; 

g = GraphWU('B', B_WU);

bc_1 = BetweennessCentrality('G', g).get('M');
assert(isequal(bc_1{1}, bc_WU), ...
    [BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_ERR], ...
    'Betweenness Centrality is not being calculated correctly for GraphWU')

%% Test 7: MultiplexBD

B11 = [
    0   1   0
    1   0   0
    1   0   0
    ];
B22 = [
    0   1   0
    1   0   0
    0   1   0
    ];
B = {B11 B22};

known_betweenness_centrality = {
    [1/2 0   0]'
    [0   1/2 0]'
    };

g = MultiplexBD('B', B);
betweenness_centrality = BetweennessCentrality('G', g);

assert(isequal(betweenness_centrality.get('M'), known_betweenness_centrality), ...
    [BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_ERR], ...
    'BetweennessCentrality is not being calculated correctly for MultiplexBD.')

%% Test 8: MultiplexWD

B11 = [
    0   1   0
    1   0   0
    4   0   0
    ];
B22 = [
    0   1   0
    1   0   0
    0   4   0
    ];
B = {B11 B22};

known_betweenness_centrality = {
    [1/2 0   0]'
    [0   1/2 0]'
    };

g = MultiplexWD('B', B);
betweenness_centrality = BetweennessCentrality('G', g);

assert(isequal(betweenness_centrality.get('M'), known_betweenness_centrality), ...
    [BRAPH2.STR ':BetweennessCentrality:' BRAPH2.BUG_ERR], ...
    'BetweennessCentrality is not being calculated correctly for MultiplexWD.')

