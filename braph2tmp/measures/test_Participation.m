%TEST_PARTICIPATION

%% Test 1.1: Instantiation - empty

m = Participation();

prop_number = Participation.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Participation.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
		['Participation.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Participation.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
		['Participation.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Participation.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Participation')
m = Participation( ...
	Participation.ID, Participation.getPropDefault(Participation.ID), ...
	Participation.LABEL, Participation.getPropDefault(Participation.LABEL), ...
	Participation.NOTES, Participation.getPropDefault(Participation.NOTES), ...
	Participation.G, Participation.getPropDefault(Participation.G), ...
	Participation.M, Participation.getPropDefault(Participation.M), ...
	Participation.CI, Participation.getPropDefault(Participation.CI), ...
	Participation.RULE, Participation.getPropDefault(Participation.RULE) ...
	);
warning('on', 'BRAPH2:Participation')

for prop = 1:1:Participation.getPropNumber()
	TAG = upper(Participation.getPropTag(prop));
	switch Participation.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Participation.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Participation.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Participation.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Participation.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Participation.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Participation.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Being a result, Participation.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Participation.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Being a result, Participation.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Participation.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Participation')
m_0 = Participation( ...
	Participation.ID, Participation.getPropDefault(Participation.ID), ...
	Participation.LABEL, Participation.getPropDefault(Participation.LABEL), ...
	Participation.NOTES, Participation.getPropDefault(Participation.NOTES), ...
	Participation.G, Participation.getPropDefault(Participation.G), ...
	Participation.M, Participation.getPropDefault(Participation.M), ...
	Participation.CI, Participation.getPropDefault(Participation.CI), ...
	Participation.RULE, Participation.getPropDefault(Participation.RULE) ...
	);
warning('on', 'BRAPH2:Participation')

m_1 = Participation( ...
	Participation.ID, Callback('EL', m_0, 'PROP', 1), ...
	Participation.LABEL, Participation.getPropDefault(Participation.LABEL), ...
	Participation.NOTES, Participation.getPropDefault(Participation.NOTES), ...
	Participation.G, Callback('EL', m_0, 'PROP', 4), ...
	Participation.M, NoValue(), ...
	Participation.CI, Callback('EL', m_0, 'PROP', 6), ...
	Participation.RULE, Callback('EL', m_0, 'PROP', 7) ...
	);
	
prop_number = Participation.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Participation.getPropTag(prop));
	switch Participation.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Participation( ...
	Participation.ID, Callback('EL', m_1, 'PROP', 1), ...
	Participation.LABEL, Participation.getPropDefault(Participation.LABEL), ...
	Participation.NOTES, Participation.getPropDefault(Participation.NOTES), ...
	Participation.G, Callback('EL', m_1, 'PROP', 4), ...
	Participation.M, NoValue(), ...
	Participation.CI, Callback('EL', m_1, 'PROP', 6), ...
	Participation.RULE, Callback('EL', m_1, 'PROP', 7) ...
	);
	
prop_number = Participation.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Participation.getPropTag(prop));
	switch Participation.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Participation( ...
	Participation.ID, Callback('EL', m_2, 'PROP', 1), ...
	Participation.LABEL, Participation.getPropDefault(Participation.LABEL), ...
	Participation.NOTES, Participation.getPropDefault(Participation.NOTES), ...
	Participation.G, Callback('EL', m_2, 'PROP', 4), ...
	Participation.M, NoValue(), ...
	Participation.CI, Callback('EL', m_2, 'PROP', 6), ...
	Participation.RULE, Callback('EL', m_2, 'PROP', 7) ...
	);
	
prop_number = Participation.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Participation.getPropTag(prop));
	switch Participation.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Participation')
m = Participation( ...
	Participation.ID, Participation.getPropDefault(Participation.ID), ...
	Participation.LABEL, Participation.getPropDefault(Participation.LABEL), ...
	Participation.NOTES, Participation.getPropDefault(Participation.NOTES), ...
	Participation.G, Participation.getPropDefault(Participation.G), ...
	Participation.M, Participation.getPropDefault(Participation.M), ...
	Participation.CI, Participation.getPropDefault(Participation.CI), ...
	Participation.RULE, Participation.getPropDefault(Participation.RULE) ...
	);
warning('on', 'BRAPH2:Participation')

prop_number = Participation.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Participation.getPropTag(prop));
	switch Participation.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
					['Participation.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
					['Participation.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Participation')
m = Participation( ...
	Participation.ID, Participation.getPropDefault(Participation.ID), ...
	Participation.LABEL, Participation.getPropDefault(Participation.LABEL), ...
	Participation.NOTES, Participation.getPropDefault(Participation.NOTES), ...
	Participation.G, Participation.getPropDefault(Participation.G), ...
	Participation.M, Participation.getPropDefault(Participation.M), ...
	Participation.CI, Participation.getPropDefault(Participation.CI), ...
	Participation.RULE, Participation.getPropDefault(Participation.RULE) ...
	);
warning('on', 'BRAPH2:Participation')

for prop = 1:1:Participation.getPropNumber()
	TAG = upper(Participation.getPropTag(prop));
	switch Participation.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Participation:' BRAPH2.BUG_FUNC], ...
				['Participation.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

A = [
    0 1 1 1 0 0 0 0;
    0 0 1 0 1 0 0 0;
    0 0 0 0 1 0 0 0;
    0 0 1 0 1 0 0 0;
    0 0 0 0 0 1 1 0;
    0 0 0 0 0 0 0 1;
    0 0 0 0 0 0 0 1;
    0 0 0 0 0 0 0 0
    ];

known_participation = {[0 4/9 3/8 4/9 12/25 0 0 0]'};

g = GraphBU('B', A);
participation = Participation('G', g).get('M');

assert(isequal(participation, known_participation), ...
    [BRAPH2.STR ':Participation:' BRAPH2.BUG_ERR], ...
    'Participation is not being calculated correctly for GraphBU.')

%% Test 6: GraphBD

A = [
    0 1 1 1 0 0 0 0;
    0 0 1 0 1 0 0 0;
    0 0 0 0 1 0 0 0;
    0 0 1 0 1 0 0 0;
    0 0 0 0 0 1 1 0;
    0 0 0 0 0 0 0 1;
    0 0 0 0 0 0 0 1;
    0 0 0 0 0 0 0 0
    ];

% out rule - default
known_participation_default_out = {[0 1/2 0 1/2 0 0 0 0]'};

g = GraphBD('B', A);
participation = Participation('G', g).get('M');

assert(isequal(participation, known_participation_default_out), ...
    [BRAPH2.STR ':Participation:' BRAPH2.BUG_ERR], ...
    'Participation is not being calculated correctly for GraphBD.')

% in rule 
known_participation_in = {[0 -1 8/9 -1 5/9 0 0 1]'};

g = GraphBD('B', A);
participation = Participation('G', g, 'rule', 'in').get('M');

assert(isequal(participation, known_participation_in), ...
    [BRAPH2.STR ':Participation:' BRAPH2.BUG_ERR], ...
    'Participation is not being calculated correctly for GraphBD.')

%% Test 7: MultiplexBU

A11 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];

A22 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];
A = {A11 A22};
 
known_participation = {
                 [0 0 0 0]'
                 [0 0 0 0]'
                 };   
 
g = MultiplexBU('B', A);
participation = Participation('G', g).get('M');

assert(isequal(participation, known_participation), ...
    [BRAPH2.STR ':Participation:' BRAPH2.BUG_ERR], ...
    'Participation is not being calculated correctly for MultiplexBU.')

