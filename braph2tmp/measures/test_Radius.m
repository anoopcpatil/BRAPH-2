%TEST_RADIUS

%% Test 1.1: Instantiation - empty

m = Radius();

prop_number = Radius.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Radius.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
		['Radius.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Radius.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
		['Radius.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Radius.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Radius')
m = Radius( ...
	Radius.ID, Radius.getPropDefault(Radius.ID), ...
	Radius.LABEL, Radius.getPropDefault(Radius.LABEL), ...
	Radius.NOTES, Radius.getPropDefault(Radius.NOTES), ...
	Radius.G, Radius.getPropDefault(Radius.G), ...
	Radius.M, Radius.getPropDefault(Radius.M), ...
	Radius.RULE, Radius.getPropDefault(Radius.RULE) ...
	);
warning('on', 'BRAPH2:Radius')

for prop = 1:1:Radius.getPropNumber()
	TAG = upper(Radius.getPropTag(prop));
	switch Radius.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Radius.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Radius.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Radius.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Radius.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Radius.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Radius.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Being a result, Radius.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Radius.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Being a result, Radius.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Radius.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Radius')
m_0 = Radius( ...
	Radius.ID, Radius.getPropDefault(Radius.ID), ...
	Radius.LABEL, Radius.getPropDefault(Radius.LABEL), ...
	Radius.NOTES, Radius.getPropDefault(Radius.NOTES), ...
	Radius.G, Radius.getPropDefault(Radius.G), ...
	Radius.M, Radius.getPropDefault(Radius.M), ...
	Radius.RULE, Radius.getPropDefault(Radius.RULE) ...
	);
warning('on', 'BRAPH2:Radius')

m_1 = Radius( ...
	Radius.ID, Callback('EL', m_0, 'PROP', 1), ...
	Radius.LABEL, Radius.getPropDefault(Radius.LABEL), ...
	Radius.NOTES, Radius.getPropDefault(Radius.NOTES), ...
	Radius.G, Callback('EL', m_0, 'PROP', 4), ...
	Radius.M, NoValue(), ...
	Radius.RULE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = Radius.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Radius.getPropTag(prop));
	switch Radius.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Radius( ...
	Radius.ID, Callback('EL', m_1, 'PROP', 1), ...
	Radius.LABEL, Radius.getPropDefault(Radius.LABEL), ...
	Radius.NOTES, Radius.getPropDefault(Radius.NOTES), ...
	Radius.G, Callback('EL', m_1, 'PROP', 4), ...
	Radius.M, NoValue(), ...
	Radius.RULE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = Radius.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Radius.getPropTag(prop));
	switch Radius.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Radius( ...
	Radius.ID, Callback('EL', m_2, 'PROP', 1), ...
	Radius.LABEL, Radius.getPropDefault(Radius.LABEL), ...
	Radius.NOTES, Radius.getPropDefault(Radius.NOTES), ...
	Radius.G, Callback('EL', m_2, 'PROP', 4), ...
	Radius.M, NoValue(), ...
	Radius.RULE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = Radius.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Radius.getPropTag(prop));
	switch Radius.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Radius')
m = Radius( ...
	Radius.ID, Radius.getPropDefault(Radius.ID), ...
	Radius.LABEL, Radius.getPropDefault(Radius.LABEL), ...
	Radius.NOTES, Radius.getPropDefault(Radius.NOTES), ...
	Radius.G, Radius.getPropDefault(Radius.G), ...
	Radius.M, Radius.getPropDefault(Radius.M), ...
	Radius.RULE, Radius.getPropDefault(Radius.RULE) ...
	);
warning('on', 'BRAPH2:Radius')

prop_number = Radius.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Radius.getPropTag(prop));
	switch Radius.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
					['Radius.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
					['Radius.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Radius')
m = Radius( ...
	Radius.ID, Radius.getPropDefault(Radius.ID), ...
	Radius.LABEL, Radius.getPropDefault(Radius.LABEL), ...
	Radius.NOTES, Radius.getPropDefault(Radius.NOTES), ...
	Radius.G, Radius.getPropDefault(Radius.G), ...
	Radius.M, Radius.getPropDefault(Radius.M), ...
	Radius.RULE, Radius.getPropDefault(Radius.RULE) ...
	);
warning('on', 'BRAPH2:Radius')

for prop = 1:1:Radius.getPropNumber()
	TAG = upper(Radius.getPropTag(prop));
	switch Radius.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Radius:' BRAPH2.BUG_FUNC], ...
				['Radius.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B = [
    0  1  1  1  0;
    1  0  0  0  0;
    1  1  0  1  0;
    1  1  0  0  0;
    0  0  0  0  0
    ];

known_radius_subgraphs = {0};
known_radius_default = {Inf};

g = GraphBU('B', B);
m_outside_g = Radius('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphBU.')

g = GraphBU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphBU.')

g = GraphBU('B', B);
m_outside_g = Radius('G', g, 'rule', 'all');
assert(isequal(m_outside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphBU.')

g = GraphBU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'all');
assert(isequal(m_inside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphBU.')

%% Test 6: GraphWU

B = [
    0     .1  .2  .25  0;
    .125  0   0   0    0;
    .2    .5  0   .25  0;
    .125  10  0   0    0;
    0     0   0   0    0
    ];

known_radius_subgraphs = {0};
known_radius_default = {Inf};

g = GraphWU('B', B);
m_outside_g = Radius('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphWU.')

g = GraphWU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphWU.')

g = GraphWU('B', B);
m_outside_g = Radius('G', g, 'rule', 'all');
assert(isequal(m_outside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphWU.')

g = GraphWU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'all');
assert(isequal(m_inside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for GraphWU.')

%% Test 7: MultiplexBU

B11 = [
      0  1  1  1  0;
      1  0  0  0  0;
      1  1  0  1  0;
      1  1  0  0  0;
      0  0  0  0  0
      ];
B22 = [
      0  1  1  1  0;
      1  0  0  0  0;
      1  1  0  1  0;
      1  1  0  0  0;
      0  0  0  0  0
      ];
B = {
    B11 B22
    };

known_radius_subgraphs = { 
                         0
                         0 
                         };
known_radius_default = {
                       inf
                       inf
                       };

g = MultiplexBU('B', B);
m_outside_g = Radius('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexBU.')

g = MultiplexBU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexBU.')

g = MultiplexBU('B', B);
m_outside_g = Radius('G', g, 'rule', 'all');
assert(isequal(m_outside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexBU.')

g = MultiplexBU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'all');
assert(isequal(m_inside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexBU.')

%% Test 8: MultiplexWU

B11 = [
      0     .1  .2  .25  0;
      .125  0   0   0    0;
      .2    .5  0   .25  0;
      .125  10  0   0    0;
      0     0   0   0    0
      ];
B22 = [
      0     .1  .2  .25  0;
      .125  0   0   0    0;
      .2    .5  0   .25  0;
      .125  10  0   0    0;
      0     0   0   0    0
      ];
B = {
    B11 B22
    };

known_radius_subgraphs = {
                         0
                         0
                         };
known_radius_default = {
                       inf
                       inf
                       };
                           
g = MultiplexWU('B', B);
m_outside_g = Radius('G', g, 'rule', 'subgraphs');
assert(isequal(m_outside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexWU.')

g = MultiplexWU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'subgraphs');
assert(isequal(m_inside_g.get('M'), known_radius_subgraphs), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexWU.')

g = MultiplexWU('B', B);
m_outside_g = Radius('G', g, 'rule', 'all');
assert(isequal(m_outside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexWU.')

g = MultiplexWU('B', B);
m_inside_g = g.getMeasure('Radius', 'rule', 'all');
assert(isequal(m_inside_g.get('M'), known_radius_default), ...
    [BRAPH2.STR ':Radius:' BRAPH2.BUG_ERR], ...
    'Radius is not being calculated correctly for MultiplexWU.')

