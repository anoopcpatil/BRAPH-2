%TEST_CLUSTERING

%% Test 1.1: Instantiation - empty

m = Clustering();

prop_number = Clustering.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Clustering.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
		['Clustering.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Clustering.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
		['Clustering.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in Clustering.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:Clustering')
m = Clustering( ...
	Clustering.ID, Clustering.getPropDefault(Clustering.ID), ...
	Clustering.LABEL, Clustering.getPropDefault(Clustering.LABEL), ...
	Clustering.NOTES, Clustering.getPropDefault(Clustering.NOTES), ...
	Clustering.G, Clustering.getPropDefault(Clustering.G), ...
	Clustering.M, Clustering.getPropDefault(Clustering.M), ...
	Clustering.RULE, Clustering.getPropDefault(Clustering.RULE) ...
	);
warning('on', 'BRAPH2:Clustering')

for prop = 1:1:Clustering.getPropNumber()
	TAG = upper(Clustering.getPropTag(prop));
	switch Clustering.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), Clustering.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by Clustering.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Clustering.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), Clustering.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by Clustering.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in Clustering.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Being a result, Clustering.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Clustering.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Being a result, Clustering.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in Clustering.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:Clustering')
m_0 = Clustering( ...
	Clustering.ID, Clustering.getPropDefault(Clustering.ID), ...
	Clustering.LABEL, Clustering.getPropDefault(Clustering.LABEL), ...
	Clustering.NOTES, Clustering.getPropDefault(Clustering.NOTES), ...
	Clustering.G, Clustering.getPropDefault(Clustering.G), ...
	Clustering.M, Clustering.getPropDefault(Clustering.M), ...
	Clustering.RULE, Clustering.getPropDefault(Clustering.RULE) ...
	);
warning('on', 'BRAPH2:Clustering')

m_1 = Clustering( ...
	Clustering.ID, Callback('EL', m_0, 'PROP', 1), ...
	Clustering.LABEL, Clustering.getPropDefault(Clustering.LABEL), ...
	Clustering.NOTES, Clustering.getPropDefault(Clustering.NOTES), ...
	Clustering.G, Callback('EL', m_0, 'PROP', 4), ...
	Clustering.M, NoValue(), ...
	Clustering.RULE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = Clustering.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Clustering.getPropTag(prop));
	switch Clustering.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = Clustering( ...
	Clustering.ID, Callback('EL', m_1, 'PROP', 1), ...
	Clustering.LABEL, Clustering.getPropDefault(Clustering.LABEL), ...
	Clustering.NOTES, Clustering.getPropDefault(Clustering.NOTES), ...
	Clustering.G, Callback('EL', m_1, 'PROP', 4), ...
	Clustering.M, NoValue(), ...
	Clustering.RULE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = Clustering.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Clustering.getPropTag(prop));
	switch Clustering.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = Clustering( ...
	Clustering.ID, Callback('EL', m_2, 'PROP', 1), ...
	Clustering.LABEL, Clustering.getPropDefault(Clustering.LABEL), ...
	Clustering.NOTES, Clustering.getPropDefault(Clustering.NOTES), ...
	Clustering.G, Callback('EL', m_2, 'PROP', 4), ...
	Clustering.M, NoValue(), ...
	Clustering.RULE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = Clustering.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Clustering.getPropTag(prop));
	switch Clustering.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:Clustering')
m = Clustering( ...
	Clustering.ID, Clustering.getPropDefault(Clustering.ID), ...
	Clustering.LABEL, Clustering.getPropDefault(Clustering.LABEL), ...
	Clustering.NOTES, Clustering.getPropDefault(Clustering.NOTES), ...
	Clustering.G, Clustering.getPropDefault(Clustering.G), ...
	Clustering.M, Clustering.getPropDefault(Clustering.M), ...
	Clustering.RULE, Clustering.getPropDefault(Clustering.RULE) ...
	);
warning('on', 'BRAPH2:Clustering')

prop_number = Clustering.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(Clustering.getPropTag(prop));
	switch Clustering.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
					['Clustering.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
					['Clustering.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:Clustering')
m = Clustering( ...
	Clustering.ID, Clustering.getPropDefault(Clustering.ID), ...
	Clustering.LABEL, Clustering.getPropDefault(Clustering.LABEL), ...
	Clustering.NOTES, Clustering.getPropDefault(Clustering.NOTES), ...
	Clustering.G, Clustering.getPropDefault(Clustering.G), ...
	Clustering.M, Clustering.getPropDefault(Clustering.M), ...
	Clustering.RULE, Clustering.getPropDefault(Clustering.RULE) ...
	);
warning('on', 'BRAPH2:Clustering')

for prop = 1:1:Clustering.getPropNumber()
	TAG = upper(Clustering.getPropTag(prop));
	switch Clustering.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':Clustering:' BRAPH2.BUG_FUNC], ...
				['Clustering.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

B_BU = [
    0 1 1 1; 
    1 0 1 0; 
    1 1 0 1; 
    1 0 1 0
    ];
clustering_BU = {[2/3 1 2/3 1]'};
g = GraphBU('B', B_BU);
clustering_1 = Clustering('G', g).get('M');
assert(isequal(clustering_1, clustering_BU), ...
    [BRAPH2.STR ':Clustering:' BRAPH2.BUG_ERR], ...
    'Clustering is not being calculated correctly for GraphBU')

%% Test 6: GraphBD

B_BD = [
    0 0 1; 
    1 0 0; 
    0 1 0 
    ];
clustering_BD_out = {[0 0 0]'};  % out rule
g = GraphBD('B', B_BD);
clustering_1 = Clustering('G', g, 'rule', 'out').get('M');
clustering_2 = clustering_BD_out;
assert(isequal(clustering_1, clustering_2), ...
    [BRAPH2.STR ':Clustering:' BRAPH2.BUG_ERR], ...
    'Clustering(''DirectedTrianglesRule'', ''out'') is not being calculated correctly for GraphBD')

%% Test 7: MultigraphBUT

B = [
    0 1 1 1; 
    1 0 1 0; 
    1 1 0 1; 
    1 0 1 0
    ];

thresholds = [0 1];

known_clustering = {
    [2/3 1 2/3 1]'
    [0   0 0   0]'
    };

g = MultigraphBUT('B', B, 'THRESHOLDS', thresholds);

clustering = Clustering('G', g).get('M');
assert(isequal(clustering, known_clustering), ...
    [BRAPH2.STR ':Clustering:' BRAPH2.BUG_ERR], ...
    'Clustering is not being calculated correctly for MultigraphBUT')

%% Test 8: MultiplexBU

B11 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];
B22 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];
B  = {B11 B22};

known_clustering = {
                 [2/3 1 2/3 1]'
                 [2/3 1 2/3 1]'
                 };      

g = MultiplexBU('B', B);
clustering = Clustering('G', g);

assert(isequal(clustering.get('M'), known_clustering), ...
    [BRAPH2.STR ':Clustering:' BRAPH2.BUG_ERR], ...
    'Clustering is not being calculated correctly for MultiplexBU.')

%% Test 9: MultiplexBUT

B11 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];
B22 = [
      0 1 1 1;
      1 0 1 0;
      1 1 0 1;
      1 0 1 0
      ];
B  = {B11 B22};

thresholds = [0 1];
known_clustering = {
                 [2/3 1 2/3 1]'
                 [2/3 1 2/3 1]'
                 [0 0 0 0]'
                 [0 0 0 0]'
                 };      

g = MultiplexBUT('B', B, 'THRESHOLDS', thresholds);
clustering = Clustering('G', g);

assert(isequal(clustering.get('M'), known_clustering), ...
    [BRAPH2.STR ':Clustering:' BRAPH2.BUG_ERR], ...
    'Clustering is not being calculated correctly for MultiplexBUT.')

%% Test 10: MultiplexBD

B11 = [
      0 0 1; 
      1 0 0; 
      0 1 0 
      ];
B22 = [
      0 0 1; 
      1 0 0; 
      0 1 0 
      ];
B = {B11 B22};

% cycle rule - default
known_clustering = {
                 [1 1 1]'
                 [1 1 1]'
                 }; 

g = MultiplexBD('B', B);
clustering = Clustering('G', g, 'rule', 'cycle');

assert(isequal(clustering.get('M'), known_clustering), ...
    [BRAPH2.STR ':Clustering:' BRAPH2.BUG_ERR], ...
    'Clustering is not being calculated correctly for MultiplexBD.')

