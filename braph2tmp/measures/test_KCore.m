%TEST_KCORE

%% Test 1.1: Instantiation - empty

m = KCore();

prop_number = KCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(KCore.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
		['KCore.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in KCore.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
		['KCore.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in KCore.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:KCore')
m = KCore( ...
	KCore.ID, KCore.getPropDefault(KCore.ID), ...
	KCore.LABEL, KCore.getPropDefault(KCore.LABEL), ...
	KCore.NOTES, KCore.getPropDefault(KCore.NOTES), ...
	KCore.G, KCore.getPropDefault(KCore.G), ...
	KCore.M, KCore.getPropDefault(KCore.M), ...
	KCore.KCORETHRESHOLD, KCore.getPropDefault(KCore.KCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:KCore')

for prop = 1:1:KCore.getPropNumber()
	TAG = upper(KCore.getPropTag(prop));
	switch KCore.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), KCore.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by KCore.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in KCore.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), KCore.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by KCore.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in KCore.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['Being a result, KCore.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in KCore.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['Being a result, KCore.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in KCore.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:KCore')
m_0 = KCore( ...
	KCore.ID, KCore.getPropDefault(KCore.ID), ...
	KCore.LABEL, KCore.getPropDefault(KCore.LABEL), ...
	KCore.NOTES, KCore.getPropDefault(KCore.NOTES), ...
	KCore.G, KCore.getPropDefault(KCore.G), ...
	KCore.M, KCore.getPropDefault(KCore.M), ...
	KCore.KCORETHRESHOLD, KCore.getPropDefault(KCore.KCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:KCore')

m_1 = KCore( ...
	KCore.ID, Callback('EL', m_0, 'PROP', 1), ...
	KCore.LABEL, KCore.getPropDefault(KCore.LABEL), ...
	KCore.NOTES, KCore.getPropDefault(KCore.NOTES), ...
	KCore.G, Callback('EL', m_0, 'PROP', 4), ...
	KCore.M, NoValue(), ...
	KCore.KCORETHRESHOLD, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = KCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(KCore.getPropTag(prop));
	switch KCore.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = KCore( ...
	KCore.ID, Callback('EL', m_1, 'PROP', 1), ...
	KCore.LABEL, KCore.getPropDefault(KCore.LABEL), ...
	KCore.NOTES, KCore.getPropDefault(KCore.NOTES), ...
	KCore.G, Callback('EL', m_1, 'PROP', 4), ...
	KCore.M, NoValue(), ...
	KCore.KCORETHRESHOLD, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = KCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(KCore.getPropTag(prop));
	switch KCore.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = KCore( ...
	KCore.ID, Callback('EL', m_2, 'PROP', 1), ...
	KCore.LABEL, KCore.getPropDefault(KCore.LABEL), ...
	KCore.NOTES, KCore.getPropDefault(KCore.NOTES), ...
	KCore.G, Callback('EL', m_2, 'PROP', 4), ...
	KCore.M, NoValue(), ...
	KCore.KCORETHRESHOLD, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = KCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(KCore.getPropTag(prop));
	switch KCore.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:KCore')
m = KCore( ...
	KCore.ID, KCore.getPropDefault(KCore.ID), ...
	KCore.LABEL, KCore.getPropDefault(KCore.LABEL), ...
	KCore.NOTES, KCore.getPropDefault(KCore.NOTES), ...
	KCore.G, KCore.getPropDefault(KCore.G), ...
	KCore.M, KCore.getPropDefault(KCore.M), ...
	KCore.KCORETHRESHOLD, KCore.getPropDefault(KCore.KCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:KCore')

prop_number = KCore.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(KCore.getPropTag(prop));
	switch KCore.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
					['KCore.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
					['KCore.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:KCore')
m = KCore( ...
	KCore.ID, KCore.getPropDefault(KCore.ID), ...
	KCore.LABEL, KCore.getPropDefault(KCore.LABEL), ...
	KCore.NOTES, KCore.getPropDefault(KCore.NOTES), ...
	KCore.G, KCore.getPropDefault(KCore.G), ...
	KCore.M, KCore.getPropDefault(KCore.M), ...
	KCore.KCORETHRESHOLD, KCore.getPropDefault(KCore.KCORETHRESHOLD) ...
	);
warning('on', 'BRAPH2:KCore')

for prop = 1:1:KCore.getPropNumber()
	TAG = upper(KCore.getPropTag(prop));
	switch KCore.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':KCore:' BRAPH2.BUG_FUNC], ...
				['KCore.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBU

A = [
    0  1  1  0; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

known_kcore = {[
                0  1  1  0;
                1  0  1  0;
                1  1  0  0;
                0  0  0  0
                ]};

g = GraphBU('B', A);
kcore = KCore('G', g, 'KCoreThreshold', 2).get('M');

assert(isequal(kcore, known_kcore), ...
    [BRAPH2.STR ':KCore:' BRAPH2.BUG_ERR], ...
    'KCore is not being calculated correctly for GraphBU.')

%% Test 6: GraphBD

A = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

known_kcore = {[
                0  1  1  0;
                1  0  1  0;
                1  1  0  0;
                0  0  0  0
                ]};

g = GraphBD('B', A);
kcore = KCore('G', g, 'KCoreThreshold', 4).get('M');

assert(isequal(kcore, known_kcore), ...
    [BRAPH2.STR ':KCore:' BRAPH2.BUG_ERR], ...
    'KCore is not being calculated correctly for GraphBD.')

%% Test 7: MultiplexWU

A11 = [
    0   .1  1  0; 
    .1  0   1  .8; 
    1   1   0  0;
    0   .8  0  0
    ];

A22 = [
    0   .1  1  1; 
    .1  0   1  .8; 
    1   1   0  0;
    1   .8  0  0
    ];
A = {A11 A22};
             
known_kcore(1) = {[
                0  1  1  0;
                1  0  1  0;
                1  1  0  0;
                0  0  0  0
                ]};
known_kcore(2, 1) = {[
                0  1  1  1;
                1  0  1  1;
                1  1  0  0;
                1  1  0  0
                ]};            

g = MultiplexWU('B', A);
kcore = KCore('G', g, 'KCoreThreshold', 2).get('M');

assert(isequal(kcore, known_kcore), ...
    [BRAPH2.STR ':KCore:' BRAPH2.BUG_ERR], ...
    'KCore is not being calculated correctly for MultiplexGraphWU.')

%% Test 8: MultiplexWD

A11 = [
    0   1   1  .1; 
    .2  0   1  1; 
    1   1   0  0;
    0   .3  0  0
    ];

A22 = [
    0   1   1   .1; 
    .2  0   1   1; 
    1   1   0   0;
    0   .3  .7  0
    ];
A = {A11 A22};

known_kcore(1) = {[
                0  1  1  0;
                1  0  1  0;
                1  1  0  0;
                0  0  0  0
                ]};
known_kcore(2, 1) = {[
                0  1  1  1;
                1  0  1  1;
                1  1  0  0;
                0  1  1  0
                ]};            

g = MultiplexWD('B', A);
kcore = KCore('G', g, 'KCoreThreshold', 4).get('M');

assert(isequal(kcore, known_kcore), ...
    [BRAPH2.STR ':KCore:' BRAPH2.BUG_ERR], ...
    'KCore is not being calculated correctly for MultiplexGraphWD.')

