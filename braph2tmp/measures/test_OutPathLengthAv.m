%TEST_OUTPATHLENGTHAV

%% Test 1.1: Instantiation - empty

m = OutPathLengthAv();

prop_number = OutPathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutPathLengthAv.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
		['OutPathLengthAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in OutPathLengthAv.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
		['OutPathLengthAv.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in OutPathLengthAv.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:OutPathLengthAv')
m = OutPathLengthAv( ...
	OutPathLengthAv.ID, OutPathLengthAv.getPropDefault(OutPathLengthAv.ID), ...
	OutPathLengthAv.LABEL, OutPathLengthAv.getPropDefault(OutPathLengthAv.LABEL), ...
	OutPathLengthAv.NOTES, OutPathLengthAv.getPropDefault(OutPathLengthAv.NOTES), ...
	OutPathLengthAv.G, OutPathLengthAv.getPropDefault(OutPathLengthAv.G), ...
	OutPathLengthAv.M, OutPathLengthAv.getPropDefault(OutPathLengthAv.M), ...
	OutPathLengthAv.RULE, OutPathLengthAv.getPropDefault(OutPathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:OutPathLengthAv')

for prop = 1:1:OutPathLengthAv.getPropNumber()
	TAG = upper(OutPathLengthAv.getPropTag(prop));
	switch OutPathLengthAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), OutPathLengthAv.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by OutPathLengthAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in OutPathLengthAv.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), OutPathLengthAv.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by OutPathLengthAv.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in OutPathLengthAv.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['Being a result, OutPathLengthAv.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in OutPathLengthAv.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['Being a result, OutPathLengthAv.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in OutPathLengthAv.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:OutPathLengthAv')
m_0 = OutPathLengthAv( ...
	OutPathLengthAv.ID, OutPathLengthAv.getPropDefault(OutPathLengthAv.ID), ...
	OutPathLengthAv.LABEL, OutPathLengthAv.getPropDefault(OutPathLengthAv.LABEL), ...
	OutPathLengthAv.NOTES, OutPathLengthAv.getPropDefault(OutPathLengthAv.NOTES), ...
	OutPathLengthAv.G, OutPathLengthAv.getPropDefault(OutPathLengthAv.G), ...
	OutPathLengthAv.M, OutPathLengthAv.getPropDefault(OutPathLengthAv.M), ...
	OutPathLengthAv.RULE, OutPathLengthAv.getPropDefault(OutPathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:OutPathLengthAv')

m_1 = OutPathLengthAv( ...
	OutPathLengthAv.ID, Callback('EL', m_0, 'PROP', 1), ...
	OutPathLengthAv.LABEL, OutPathLengthAv.getPropDefault(OutPathLengthAv.LABEL), ...
	OutPathLengthAv.NOTES, OutPathLengthAv.getPropDefault(OutPathLengthAv.NOTES), ...
	OutPathLengthAv.G, Callback('EL', m_0, 'PROP', 4), ...
	OutPathLengthAv.M, NoValue(), ...
	OutPathLengthAv.RULE, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = OutPathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutPathLengthAv.getPropTag(prop));
	switch OutPathLengthAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = OutPathLengthAv( ...
	OutPathLengthAv.ID, Callback('EL', m_1, 'PROP', 1), ...
	OutPathLengthAv.LABEL, OutPathLengthAv.getPropDefault(OutPathLengthAv.LABEL), ...
	OutPathLengthAv.NOTES, OutPathLengthAv.getPropDefault(OutPathLengthAv.NOTES), ...
	OutPathLengthAv.G, Callback('EL', m_1, 'PROP', 4), ...
	OutPathLengthAv.M, NoValue(), ...
	OutPathLengthAv.RULE, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = OutPathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutPathLengthAv.getPropTag(prop));
	switch OutPathLengthAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = OutPathLengthAv( ...
	OutPathLengthAv.ID, Callback('EL', m_2, 'PROP', 1), ...
	OutPathLengthAv.LABEL, OutPathLengthAv.getPropDefault(OutPathLengthAv.LABEL), ...
	OutPathLengthAv.NOTES, OutPathLengthAv.getPropDefault(OutPathLengthAv.NOTES), ...
	OutPathLengthAv.G, Callback('EL', m_2, 'PROP', 4), ...
	OutPathLengthAv.M, NoValue(), ...
	OutPathLengthAv.RULE, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = OutPathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutPathLengthAv.getPropTag(prop));
	switch OutPathLengthAv.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:OutPathLengthAv')
m = OutPathLengthAv( ...
	OutPathLengthAv.ID, OutPathLengthAv.getPropDefault(OutPathLengthAv.ID), ...
	OutPathLengthAv.LABEL, OutPathLengthAv.getPropDefault(OutPathLengthAv.LABEL), ...
	OutPathLengthAv.NOTES, OutPathLengthAv.getPropDefault(OutPathLengthAv.NOTES), ...
	OutPathLengthAv.G, OutPathLengthAv.getPropDefault(OutPathLengthAv.G), ...
	OutPathLengthAv.M, OutPathLengthAv.getPropDefault(OutPathLengthAv.M), ...
	OutPathLengthAv.RULE, OutPathLengthAv.getPropDefault(OutPathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:OutPathLengthAv')

prop_number = OutPathLengthAv.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(OutPathLengthAv.getPropTag(prop));
	switch OutPathLengthAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
					['OutPathLengthAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
					['OutPathLengthAv.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:OutPathLengthAv')
m = OutPathLengthAv( ...
	OutPathLengthAv.ID, OutPathLengthAv.getPropDefault(OutPathLengthAv.ID), ...
	OutPathLengthAv.LABEL, OutPathLengthAv.getPropDefault(OutPathLengthAv.LABEL), ...
	OutPathLengthAv.NOTES, OutPathLengthAv.getPropDefault(OutPathLengthAv.NOTES), ...
	OutPathLengthAv.G, OutPathLengthAv.getPropDefault(OutPathLengthAv.G), ...
	OutPathLengthAv.M, OutPathLengthAv.getPropDefault(OutPathLengthAv.M), ...
	OutPathLengthAv.RULE, OutPathLengthAv.getPropDefault(OutPathLengthAv.RULE) ...
	);
warning('on', 'BRAPH2:OutPathLengthAv')

for prop = 1:1:OutPathLengthAv.getPropNumber()
	TAG = upper(OutPathLengthAv.getPropTag(prop));
	switch OutPathLengthAv.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':OutPathLengthAv:' BRAPH2.BUG_FUNC], ...
				['OutPathLengthAv.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: GraphBD

B = [
    0  1  1  1  0;
    1  0  0  0  0;
    1  1  0  1  0;
    1  1  0  0  0;
    0  0  0  0  0
    ];
known_out_path_length_av = {Inf};

g = GraphBD('B', B);
out_path_length_av = OutPathLengthAv('G', g).get('M');

assert(isequal(out_path_length_av, known_out_path_length_av), ...
    [BRAPH2.STR ':OutPathLength:' BRAPH2.BUG_ERR], ...
    'OutPathLengthAv is not beoutg calculated correctly for GraphBD.')

%% Test 6: MultiplexBD

B11 = [
      0  1  1  1  0;
      1  0  0  0  0;
      1  1  0  1  0;
      1  1  0  0  0;
      0  0  0  0  0
      ];

B22 = [
      0  1  1  1  0;
      1  0  0  0  0;
      1  1  0  1  0;
      1  1  0  0  0;
      0  0  0  0  0
       ];
B = {B11 B22};

known_out_path_length_av = {
                    Inf
                    Inf
                    };

g = MultiplexBD('B', B);
out_path_length_av = OutPathLengthAv('G', g).get('M');

assert(isequal(out_path_length_av, known_out_path_length_av), ...
    [BRAPH2.STR ':OutPathLength:' BRAPH2.BUG_ERR], ...
    'OutPathLengthAv is not beoutg calculated correctly for MultiplexBD.')

