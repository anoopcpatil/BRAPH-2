%TEST_MULTIPLEXCOREPERIPHERY

%% Test 1.1: Instantiation - empty

m = MultiplexCorePeriphery();

prop_number = MultiplexCorePeriphery.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexCorePeriphery.getPropTag(prop));
	assert( ...
		isa(m.getr(prop), 'NoValue'), ...
		[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
		['MultiplexCorePeriphery.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultiplexCorePeriphery.getr(' int2str(prop) ').'] ...
		)
	assert( ...
		isa(m.getr(TAG), 'NoValue'), ...
		[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
		['MultiplexCorePeriphery.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
		'Or there could be an error in MultiplexCorePeriphery.getr(''' TAG ''').'] ...
		)
end

%% Test 1.2: Instantiation - defaults

warning('off', 'BRAPH2:MultiplexCorePeriphery')
m = MultiplexCorePeriphery( ...
	MultiplexCorePeriphery.ID, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.ID), ...
	MultiplexCorePeriphery.LABEL, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.LABEL), ...
	MultiplexCorePeriphery.NOTES, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.NOTES), ...
	MultiplexCorePeriphery.G, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.G), ...
	MultiplexCorePeriphery.M, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.M), ...
	MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS) ...
	);
warning('on', 'BRAPH2:MultiplexCorePeriphery')

for prop = 1:1:MultiplexCorePeriphery.getPropNumber()
	TAG = upper(MultiplexCorePeriphery.getPropTag(prop));
	switch MultiplexCorePeriphery.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isequal(m.getr(prop), MultiplexCorePeriphery.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must be inizialized to its default value ' ...
				'given by MultiplexCorePeriphery.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultiplexCorePeriphery.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isequal(m.getr(TAG), MultiplexCorePeriphery.getPropDefaultConditioned(prop)), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(''' TAG ''') must be inizialized to its default value ' ...
				'given by MultiplexCorePeriphery.getPropDefaultConditioned(' int2str(prop) '). ' ...
				'Or there could be an error in MultiplexCorePeriphery.getr(''' TAG ''').'] ...
				)
		case Category.RESULT
			assert( ...
				isa(m.getr(prop), 'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultiplexCorePeriphery.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultiplexCorePeriphery.getr(' int2str(prop) ').'] ...
				)
			assert( ...
				isa(m.getr(TAG), 'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['Being a result, MultiplexCorePeriphery.getr(''' TAG ''') must be inizialized to NoValue(). ' ...
				'Or there could be an error in MultiplexCorePeriphery.getr(''' TAG ''').'] ...
				)
	end
end

%% Test 2: Callbacks

warning('off', 'BRAPH2:MultiplexCorePeriphery')
m_0 = MultiplexCorePeriphery( ...
	MultiplexCorePeriphery.ID, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.ID), ...
	MultiplexCorePeriphery.LABEL, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.LABEL), ...
	MultiplexCorePeriphery.NOTES, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.NOTES), ...
	MultiplexCorePeriphery.G, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.G), ...
	MultiplexCorePeriphery.M, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.M), ...
	MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS) ...
	);
warning('on', 'BRAPH2:MultiplexCorePeriphery')

m_1 = MultiplexCorePeriphery( ...
	MultiplexCorePeriphery.ID, Callback('EL', m_0, 'PROP', 1), ...
	MultiplexCorePeriphery.LABEL, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.LABEL), ...
	MultiplexCorePeriphery.NOTES, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.NOTES), ...
	MultiplexCorePeriphery.G, Callback('EL', m_0, 'PROP', 4), ...
	MultiplexCorePeriphery.M, NoValue(), ...
	MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS, Callback('EL', m_0, 'PROP', 6) ...
	);
	
prop_number = MultiplexCorePeriphery.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexCorePeriphery.getPropTag(prop));
	switch MultiplexCorePeriphery.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_1.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_1.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_1.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_2 = MultiplexCorePeriphery( ...
	MultiplexCorePeriphery.ID, Callback('EL', m_1, 'PROP', 1), ...
	MultiplexCorePeriphery.LABEL, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.LABEL), ...
	MultiplexCorePeriphery.NOTES, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.NOTES), ...
	MultiplexCorePeriphery.G, Callback('EL', m_1, 'PROP', 4), ...
	MultiplexCorePeriphery.M, NoValue(), ...
	MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS, Callback('EL', m_1, 'PROP', 6) ...
	);
	
prop_number = MultiplexCorePeriphery.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexCorePeriphery.getPropTag(prop));
	switch MultiplexCorePeriphery.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_2.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_2.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_2.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end
m_3 = MultiplexCorePeriphery( ...
	MultiplexCorePeriphery.ID, Callback('EL', m_2, 'PROP', 1), ...
	MultiplexCorePeriphery.LABEL, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.LABEL), ...
	MultiplexCorePeriphery.NOTES, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.NOTES), ...
	MultiplexCorePeriphery.G, Callback('EL', m_2, 'PROP', 4), ...
	MultiplexCorePeriphery.M, NoValue(), ...
	MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS, Callback('EL', m_2, 'PROP', 6) ...
	);
	
prop_number = MultiplexCorePeriphery.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexCorePeriphery.getPropTag(prop));
	switch MultiplexCorePeriphery.getPropCategory(prop)
		case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
			assert( ...
				isa(m_3.getr(prop),  'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must be a callback.'] ...
				)
			assert( ...
				isequal(m_3.get(prop), m_0.get(prop)) && ~isa(m_1.get(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
				)
		case {Category.METADATA, Category.RESULT}
			assert( ...
				~isa(m_3.getr(prop), 'Callback'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must NOT be a callback.'] ...
				)
	end
end

%% Test 3: Result

warning('off', 'BRAPH2:MultiplexCorePeriphery')
m = MultiplexCorePeriphery( ...
	MultiplexCorePeriphery.ID, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.ID), ...
	MultiplexCorePeriphery.LABEL, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.LABEL), ...
	MultiplexCorePeriphery.NOTES, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.NOTES), ...
	MultiplexCorePeriphery.G, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.G), ...
	MultiplexCorePeriphery.M, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.M), ...
	MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS) ...
	);
warning('on', 'BRAPH2:MultiplexCorePeriphery')

prop_number = MultiplexCorePeriphery.getPropNumber();
for prop = 1:1:prop_number
	TAG = upper(MultiplexCorePeriphery.getPropTag(prop));
	switch MultiplexCorePeriphery.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must be a NoValue, because it has not been memorized.'] ...
				)
			if isempty(m.getPropSettings(prop))
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop)), ...
					[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
					['MultiplexCorePeriphery.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			else
				assert( ...
					m.checkFormat(m.getPropFormat(prop), m.get(prop), m.getPropSettings(prop)), ...
					[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
					['MultiplexCorePeriphery.get(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			end
	end
end

%% Test 4: Memorize

warning('off', 'BRAPH2:MultiplexCorePeriphery')
m = MultiplexCorePeriphery( ...
	MultiplexCorePeriphery.ID, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.ID), ...
	MultiplexCorePeriphery.LABEL, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.LABEL), ...
	MultiplexCorePeriphery.NOTES, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.NOTES), ...
	MultiplexCorePeriphery.G, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.G), ...
	MultiplexCorePeriphery.M, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.M), ...
	MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS, MultiplexCorePeriphery.getPropDefault(MultiplexCorePeriphery.MULTIRICHNESS_COEFFICIENTS) ...
	);
warning('on', 'BRAPH2:MultiplexCorePeriphery')

for prop = 1:1:MultiplexCorePeriphery.getPropNumber()
	TAG = upper(MultiplexCorePeriphery.getPropTag(prop));
	switch MultiplexCorePeriphery.getPropCategory(prop)
		case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
		case Category.RESULT
			assert( ...
				~isa(m.get(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
				)
			assert( ...
				~isa(m.memorize(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
				)
			assert( ...
				~isa(m.getr(prop),  'NoValue'), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
				)
			assert( ...
				m.checkFormat(m.getPropFormat(prop), m.getr(prop),m.getPropSettings(prop)), ...
				[BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_FUNC], ...
				['MultiplexCorePeriphery.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
				)
	end
end

%% Test 5: MultiplexBU

B11 = [
    0  1  1  0; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

B22 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    1  1  0  0
    ];
B = {B11 B22};

known_multiplex_core_periphery = {[1 1 1 0]'};      

g = MultiplexBU('B', B);
multiplex_core_periphery = MultiplexCorePeriphery('G', g).get('M');

assert(isequal(multiplex_core_periphery, known_multiplex_core_periphery), ...
    [BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_ERR], ...
    'MultiplexCorePeriphery is not being calculated correctly for MultiplexBU.')

%% Test 6: MultiplexBUT

B11 = [
    0  1  1  0; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

B22 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    1  1  0  0
    ];
B = {B11 B22};

known_multiplex_core_periphery = {
                                 [1 1 1 0]'
                                 [1 0 0 0]'}; 

g = MultiplexBUT('B', B, 'THRESHOLDS', [0 1]);
multiplex_core_periphery = MultiplexCorePeriphery('G', g).get('M');

assert(isequal(multiplex_core_periphery, known_multiplex_core_periphery), ...
    [BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_ERR], ...
    'MultiplexCorePeriphery is not being calculated correctly for MultiplexBUT.')

%% Test 7: MultiplexBD

B11 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  0  0
    ];

B22 = [
    0  1  1  1; 
    1  0  1  1; 
    1  1  0  0;
    0  1  1  0
    ];
B = {B11 B22};
             
known_multiplex_core_periphery = {[1 1 1 0]'};      

g = MultiplexBD('B', B);
multiplex_core_periphery = MultiplexCorePeriphery('G', g, 'MULTIRICHNESS_COEFFICIENTS', [2/3, 1/3]).get('M');

assert(isequal(multiplex_core_periphery, known_multiplex_core_periphery), ...
    [BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_ERR], ...
    'MultiplexCorePeriphery is not being calculated correctly for MultiplexBD.')

%% Test 8: MultiplexWU

B11 = [
    0   .1  1  0; 
    .1  0   1  .8; 
    1   1   0  0;
    0   .8  0  0
    ];
B22 = [
    0   .1  1  1; 
    .1  0   1  .8; 
    1   1   0  0;
    1   .8  0  0
    ];
B = {B11 B22};

known_multiplex_core_periphery = {[0 0 1 0]'};      

g = MultiplexWU('B', B);
multiplex_core_periphery = MultiplexCorePeriphery('G', g, 'MULTIRICHNESS_COEFFICIENTS', [3/4, 1/4]).get('M');

assert(isequal(multiplex_core_periphery, known_multiplex_core_periphery), ...
    [BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_ERR], ...
    'MultiplexCorePeriphery is not being calculated correctly for MultiplexWU.')

%% Test 9: MultiplexWD

B11 = [
    0   1   1  .1; 
    .2  0   1  1; 
    1   1   0  0;
    0   .3  0  0
    ];
B22 = [
    0   1   1   .1; 
    .2  0   1   1; 
    1   1   0   0;
    0   .3  .7  0
    ];
B = {B11 B22};

known_multiplex_core_periphery = {[0 1 1 0]'};      

g = MultiplexWD('B', B);
multiplex_core_periphery = MultiplexCorePeriphery('G', g, 'MULTIRICHNESS_COEFFICIENTS', [3/4, 1/4]).get('M');

assert(isequal(multiplex_core_periphery, known_multiplex_core_periphery), ...
    [BRAPH2.STR ':MultiplexCorePeriphery:' BRAPH2.BUG_ERR], ...
    'MultiplexCorePeriphery is not being calculated correctly for MultiplexWD.')

