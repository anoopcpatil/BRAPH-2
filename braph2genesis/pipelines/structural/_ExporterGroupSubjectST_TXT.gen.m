%% ¡header!
ExporterGroupSubjectST_TXT < Exporter (ex, exporter of ST subject group in TXT) exports a group of subjects with structural data to an TXT file.

%%% ¡description!
ExporterGroupSubjectST_TXT exports a group of subjects with structural data to an TXT file and their covariates (if existing) to another TXT file.
The TXT file consists of 6 columns. It reads as follows: 
Group ID (column 1), Group LABEL (column 2), Group NOTES (column 3) and
BrainRegions (column 4-end; one brainregion value per column).
The first row contains the headers and each subsequent row the values for each subject.
The TXT file containing the covariates consists of the following columns:
Subject ID (column 1), Subject AGE (column 2), and, Subject SEX (column 3).
The first row contains the headers and each subsequent row the values for each subject.

%%% ¡seealso!
Element, Exporter, ImporterGroupSubjectST_TXT

%% ¡props!

%%% ¡prop!
GR (data, item) is a group of subjects with structural data.
%%%% ¡settings!
'Group'
%%%% ¡check_value!
check = any(strcmp(value.get(Group.SUB_CLASS_TAG), subclasses('SubjectST', [], [], true))); % Format.checkFormat(Format.ITEM, value, 'Group') already checked
%%%% ¡default!
Group('SUB_CLASS', 'SubjectST', 'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectST'))

%%% ¡prop!
FILE (data, string) is the file name where to save the group of subjects with structural data.
%%%% ¡default!
[fileparts(which('test_braph2')) filesep 'default_txt_file_to_save_group_ST_most_likely_to_be_erased.txt']

%%% ¡prop!
SAVE (result, empty) saves the group of subjects with structural data in the selected TXT file.
%%%% ¡calculate!
file = ex.get('FILE');

if isfolder(fileparts(file))
    if ex.get('WAITBAR')
        wb = waitbar(0, 'Retrieving path ...', 'Name', BRAPH2.NAME);
        set_braph2_icon(wb)
    end
        
    gr = ex.get('GR');
    sub_dict = gr.get('SUB_DICT');
    sub_number = sub_dict.length();
    
    if ex.get('WAITBAR')
        waitbar(.15, wb, 'Organizing info ...');
    end
        
    if sub_number == 0
        tab = {'ID', 'Label', 'Notes'};
    else
        sub = sub_dict.getItem(1);
        ba = sub.get('BA');
        br_list = cellfun(@(i) ba.get('BR_DICT').getItem(i), ...
            num2cell([1:1:ba.get('BR_DICT').length()]), 'UniformOutput', false);
        br_labels = cellfun(@(br) br.get('ID'), br_list, 'UniformOutput', false);

        age = cell(sub_number, 1);
        sex = cell(sub_number, 1);
        tab = cell(1 + sub_number, 3 + numel(br_labels));
        tab{1, 1} = 'ID';
        tab{1, 2} = 'Label';
        tab{1, 3} = 'Notes';
        for j = 1:1:length(br_labels)
            tab{1, 3 + j} = br_labels{j};
        end

        for i = 1:1:sub_number
            sub = sub_dict.getItem(i);

            tab{1 + i, 1} = sub.get('ID');
            tab{1 + i, 2} = sub.get('LABEL');
            tab{1 + i, 3} = sub.get('NOTES');
            age{i} =  sub.get('AGE');
            sex{i} =  sub.get('SEX');
            
            sub_ST = sub.get('ST');
            for j = 1:1:length(sub_ST)
                tab{1 + i, 3 + j} = sub_ST(j);
            end
        end
    end

    % save
    if ex.get('WAITBAR')
        waitbar(1, wb, 'Finalizing ...');
    end
        
    writetable(table(tab), file, 'Delimiter', '\t', 'WriteVariableNames', 0);
    
    % if covariates save them in another file
    if sub_number ~= 0 && ~isequal(sex{:}, 'unassigned')  && ~isequal(age{:},  0) 
        tab2 = cell(1 + sub_number, 3);
        tab2{1, 1} = 'ID';
        tab2{1, 2} = 'Age';
        tab2{1, 3} = 'Sex';
        tab2(2:end, 1) = tab(2:end, 1);
        tab2(2:end, 2) = age;
        tab2(2:end, 3) = sex;
        tab2 = table(tab2);
        
        % save
        [filepath, filename, ~] = fileparts(file);
        writetable(tab2, [filepath filesep() filename '_covariates.txt'], 'Delimiter', '	', 'WriteVariableNames', 0);
        warning('off', 'MATLAB:xlswrite:AddSheet');
    end
    
    % sets value to empty
    value = [];
    
    if ex.get('WAITBAR')
        close(wb)
    end
else
    value = ex.getr('SAVE');
end

%% ¡methods!
function uiputfile(ex)
    % UIPUTFILE opens a dialog box to set the TXT file where to save the group of subjects with structural data.

    [filename, filepath, filterindex] = uiputfile('*.txt', 'Select TXT file');
    if filterindex
        file = [filepath filename];
        ex.set('FILE', file);
    end
end

%% ¡tests!

%%% ¡test!
%%%% ¡name!
Delete file TBE
%%%% ¡code!
delete([fileparts(which('test_braph2')) filesep 'default_txt_file_to_save_group_ST_most_likely_to_be_erased.txt'])

%%% ¡test!
%%%% ¡name!
Export and import
%%%% ¡code!
br1 = BrainRegion( ...
    'ID', 'ISF', ...
    'LABEL', 'superiorfrontal', ...
    'NOTES', 'notes1', ...
    'X', -12.6, ...
    'Y', 22.9, ...
    'Z', 42.4 ...
    );
br2 = BrainRegion( ...
    'ID', 'lFP', ...
    'LABEL', 'frontalpole', ...
    'NOTES', 'notes2', ...
    'X', -8.6, ...
    'Y', 61.7, ...
    'Z', -8.7 ...
    );
br3 = BrainRegion( ...
    'ID', 'lRMF', ...
    'LABEL', 'rostralmiddlefrontal', ...
    'NOTES', 'notes3', ...
    'X', -31.3, ...
    'Y', 41.2, ...
    'Z', 16.5 ...
    );
br4 = BrainRegion( ...
    'ID', 'lCMF', ...
    'LABEL', 'caudalmiddlefrontal', ...
    'NOTES', 'notes4', ...
    'X', -34.6, ...
    'Y', 10.2, ...
    'Z', 42.8 ...
    );
br5 = BrainRegion( ...
    'ID', 'lPOB', ...
    'LABEL', 'parsorbitalis', ...
    'NOTES', 'notes5', ...
    'X', -41, ...
    'Y', 38.8, ...
    'Z', -11.1 ...
    );

ba = BrainAtlas( ...
    'ID', 'TestToSaveCoolID', ...
    'LABEL', 'Brain Atlas', ...
    'NOTES', 'Brain atlas notes', ...
    'BR_DICT', IndexedDictionary('IT_CLASS', 'BrainRegion', 'IT_KEY', 1, 'IT_LIST', {br1, br2, br3, br4, br5}) ...
    );

sub1 = SubjectST( ...
    'ID', 'SUB ST 1', ...
    'LABEL', 'Subejct ST 1', ...
    'NOTES', 'Notes on subject ST 1', ...
    'BA', ba, ...
    'age', 30, ...
    'sex', 'female', ...
    'ST', rand(ba.get('BR_DICT').length(), 1) ...
    );
sub2 = SubjectST( ...
    'ID', 'SUB ST 2', ...
    'LABEL', 'Subejct ST 2', ...
    'NOTES', 'Notes on subject ST 2', ...
    'BA', ba, ...
    'age', 50, ...
    'sex', 'male', ...
    'ST', rand(ba.get('BR_DICT').length(), 1) ...
    );
sub3 = SubjectST( ...
    'ID', 'SUB ST 3', ...
    'LABEL', 'Subejct ST 3', ...
    'NOTES', 'Notes on subject ST 3', ...
    'BA', ba, ...
    'age', 60, ...
    'sex', 'female', ...
    'ST', rand(ba.get('BR_DICT').length(), 1) ...
    );

gr = Group( ...
    'ID', 'GR ST', ...
    'LABEL', 'Group label', ...
    'NOTES', 'Group notes', ...
    'SUB_CLASS', 'SubjectST', ...
    'SUB_DICT', IndexedDictionary('IT_CLASS', 'SubjectST', 'IT_KEY', 1, 'IT_LIST', {sub1, sub2, sub3}) ...
    );

file = [fileparts(which('test_braph2')) filesep 'trial_group_subjects_ST_to_be_erased.txt'];

ex = ExporterGroupSubjectST_TXT( ...
    'FILE', file, ...
    'GR', gr ...
    );
ex.get('SAVE');

% import with same brain atlas
im1 = ImporterGroupSubjectST_TXT( ...
    'FILE', file, ...
    'BA', ba ...
    );
gr_loaded1 = im1.get('GR');

assert(gr.get('SUB_DICT').length() == gr_loaded1.get('SUB_DICT').length(), ...
	[BRAPH2.STR ':ExporterGroupSubjectST_TXT:' BRAPH2.BUG_IO], ...
    'Problems saving or loading a group.')
for i = 1:1:max(gr.get('SUB_DICT').length(), gr_loaded1.get('SUB_DICT').length())
    sub = gr.get('SUB_DICT').getItem(i);
    sub_loaded = gr_loaded1.get('SUB_DICT').getItem(i);    
    assert( ...
        isequal(sub.get('ID'), sub_loaded.get('ID')) & ...
        isequal(sub.get('LABEL'), sub_loaded.get('LABEL')) & ...
        isequal(sub.get('NOTES'), sub_loaded.get('NOTES')) & ...
        isequal(sub.get('BA'), sub_loaded.get('BA')) & ...
        isequal(sub.get('AGE'), sub_loaded.get('AGE')) & ...
        isequal(sub.get('SEX'), sub_loaded.get('SEX')) & ...
        isequal(round(sub.get('ST'), 10), round(sub_loaded.get('ST'), 10)), ...
        [BRAPH2.STR ':ExporterGroupSubjectST_TXT:' BRAPH2.BUG_IO], ...
        'Problems saving or loading a group.')    
end

% import with new brain atlas
im2 = ImporterGroupSubjectST_TXT( ...
    'FILE', file ...
    );
gr_loaded2 = im2.get('GR');

assert(gr.get('SUB_DICT').length() == gr_loaded2.get('SUB_DICT').length(), ...
	[BRAPH2.STR ':ExporterGroupSubjectST_TXT:' BRAPH2.BUG_IO], ...
    'Problems saving or loading a group.')
for i = 1:1:max(gr.get('SUB_DICT').length(), gr_loaded2.get('SUB_DICT').length())
    sub = gr.get('SUB_DICT').getItem(i);
    sub_loaded = gr_loaded2.get('SUB_DICT').getItem(i);    
    assert( ...
        isequal(sub.get('ID'), sub_loaded.get('ID')) & ...
        isequal(sub.get('LABEL'), sub_loaded.get('LABEL')) & ...
        isequal(sub.get('NOTES'), sub_loaded.get('NOTES')) & ...
        ~isequal(sub.get('BA').get('ID'), sub_loaded.get('BA').get('ID')) & ...
        isequal(sub.get('AGE'), sub_loaded.get('AGE')) & ...
        isequal(sub.get('SEX'), sub_loaded.get('SEX')) & ...
        isequal(round(sub.get('ST'), 10), round(sub_loaded.get('ST'), 10)), ...
        [BRAPH2.STR ':ExporterGroupSubjectST_TXT:' BRAPH2.BUG_IO], ...
        'Problems saving or loading a group.')    
end

delete(file)