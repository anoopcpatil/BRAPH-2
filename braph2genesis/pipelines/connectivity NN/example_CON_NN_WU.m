%EXAMPLE_CON_NN_WU
% Script example pipeline CON NN WU

clear variables %#ok<*NASGU>

%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS( ...
    'FILE', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'desikan_atlas.xlsx'], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%% Load Groups of SubjectCON
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_train = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_train = im_gr2.get('GR');

%% Construct the Dataset
nnd_train = NNClassifierData_CON_WU( ...
    'GR_1', gr1_train, ...
    'GR_2', gr2_train, ...
    'FEATURE_DENSITY', 0.05, ...
    'TRAIN_VAL_INDEX_GR_1', 0.2, ...
    'TRAIN_VAL_INDEX_GR_2', 0.2 ...
    );

%% Train the Neural Network
classifier = NNClassifierDNN( ...
    'NNClassifierData', nnd_train, ...
    'VERBOSE', true, ...
    'SHUFFLE', 'every-epoch' ...
    );
classifier.memorize('TRAINED_NN');

%% Evaluate the Neural Network
nne_train = NNClassifierEvaluator( ...
    'NN_DATA', nnd_train, ...
    'NN_MODEL', classifier ...
    );

prediction_train = nne_train.memorize('NN_PREDICTION');
auc_train = nne_train.get('AUC')
prediction_val = nne_train.memorize('NN_VAL_PREDICTION');
auc_val = nne_train.get('VAL_AUC')

%% Load Groups of SubjectCON as a Testing Set 
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_test = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_test = im_gr2.get('GR');

%% Evaluate the Trained Neural Network with the Testing Set
nnd_test = NNClassifierData_CON_WU( ...
    'GR_1', gr1_test, ...
    'GR_2', gr2_test, ....
    'GIVEN_FEATURE_MASK', nnd_train.get('CALCULATED_FEATURE_MASK') ...
    );

nne_test = NNClassifierEvaluator( ...
    'NN_DATA', nnd_test, ...
    'NN_MODEL', classifier ...
    );

prediction_test = nne_test.memorize('NN_PREDICTION')
auc_test = nne_test.get('AUC')