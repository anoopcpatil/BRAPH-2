%EXAMPLE_CON_NN_WU
% Script example pipeline CON NN WU

clear variables %#ok<*NASGU>

%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS( ...
    'FILE', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'desikan_atlas.xlsx'], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%% Load Groups of SubjectCON as Training set
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1 = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2 = im_gr2.get('GR');

% graph contruction
a_WU1 = AnalyzeEnsemble_CON_WU( ...
    'GR', gr1 ...
    );

a_WU2 = AnalyzeEnsemble_CON_WU( ...
    'GR', gr2 ...
    );

%% Neural Network Analysis - k-fold cross validation
nn_CON = ClassifierNN_CON( ...
    'A_1', a_WU1, ...
    'A_2', a_WU2, ...
    'KFOLD', 5, ...
    'REPETITION', 2, ...
    'DENSITY_OF_FEATURE_SELECTION', 0.05);

average_auc = nn_CON.performKFoldCrossValidation('AUC').get('AUC');
average_auc_cil = nn_CON.performKFoldCrossValidation('AUC').get('CIL');
average_auc_ciu = nn_CON.performKFoldCrossValidation('AUC').get('CIU');
nn_CON.performKFoldCrossValidation('HeatMap');
nn_CON.performKFoldCrossValidation('ConfusionMatrix');

%% Load Groups of SubjectCON as Test set 
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1 = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2 = im_gr2.get('GR');

% graph contruction
a_WU1_test = AnalyzeEnsemble_CON_WU( ...
    'GR', gr1 ...
    );

a_WU2_test = AnalyzeEnsemble_CON_WU( ...
    'GR', gr2 ...
    );

%% Test trained NN on test set
average_auc = nn_CON.performNeuralNetworkPrediction('AUC', a_WU1_test, a_WU2_test).get('AUC');
average_auc_cil = nn_CON.performNeuralNetworkPrediction('AUC', a_WU1_test, a_WU2_test).get('CIL');
average_auc_ciu = nn_CON.performNeuralNetworkPrediction('AUC', a_WU1_test, a_WU2_test).get('CIU');
nn_CON.performNeuralNetworkPrediction('ConfusionMatrix', a_WU1_test, a_WU2_test);