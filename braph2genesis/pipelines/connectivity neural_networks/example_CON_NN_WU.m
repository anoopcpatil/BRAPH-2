%EXAMPLE_CON_NN_WU
% Script example pipeline CON NN WU

clear variables %#ok<*NASGU>

%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS( ...
    'FILE', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'desikan_atlas.xlsx'], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%% Load Groups of SubjectCON as a Training Set
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_train = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_train = im_gr2.get('GR');

%% Train the Model with the Training Set
dp_train = DatasetProcessor_Classification_CON_WU( ...
    'GR1', gr1_train, ...
    'GR2', gr2_train, ...
    'DENSITY_OF_FEATURE_SELECTION', 0.05);

dp_train.memorize('FEATURE_SELECTION').memorize('FEATURE_SELECTION_MASK');
dp_train.memorize('CLASSIFIER_NN').memorize('TRAINED_NN');
fs = dp_train.get('FEATURE_SELECTION');
trained_classifier = dp_train.get('CLASSIFIER_NN');

%% Evaluate the Model with the Training Set
me_train = ModelEvaluator_Classification( ...
    'DATASET_PROCESSOR', dp_train, ...
    'TRAINED_MODEL', trained_classifier ...
    );

prediction_train = me_train.get('PREDICTION_NN');
auc_train = me_train.get('AUC')

%% Load Groups of SubjectCON as a Testing Set 
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName1'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_test = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('example_CON_WU')) filesep 'example data CON (DTI)' filesep 'xls' filesep 'GroupName2'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_test = im_gr2.get('GR');

%% Evaluate the Trained Model with the Testing dataset
dp_test = DatasetProcessor_Classification_CON_WU( ...
    'GR1', gr1_test, ...
    'GR2', gr2_test, ...
    'FEATURE_SELECTION_MASK', fs.get('FEATURE_SELECTION_MASK') ...
    );

me_test = ModelEvaluator_Classification( ...
    'DATASET_PROCESSOR', dp_test, ...
    'TRAINED_MODEL', trained_classifier ...
    );

prediction_test = me_test.get('PREDICTION_NN')
auc_test = me_test.get('AUC')