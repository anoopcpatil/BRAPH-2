%EXAMPLE_CON_FUN_MP_BUD
% Script example pipeline CON FUN MP BUD

clear variables %#ok<*NASGU>

%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS('FILE', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'atlas.xlsx'], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%% Load Groups of SubjectCON
im_gr1 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'CON_FUN_MP_Group_1_XLS.CON'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_CON = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectCON_XLS( ...
    'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'CON_FUN_MP_Group_2_XLS.CON'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_CON = im_gr2.get('GR');

%% Load Groups of SubjectFUN
im_gr1 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'CON_FUN_MP_Group_1_XLS.FUN'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1_FUN = im_gr1.get('GR');

im_gr2 = ImporterGroupSubjectFUN_XLS( ...
    'DIRECTORY', [fileparts(which('SubjectCON_FUN_MP')) filesep 'Example data CON_FUN_MP XLS' filesep 'CON_FUN_MP_Group_2_XLS.FUN'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2_FUN = im_gr2.get('GR');

%% Combine Groups of SubjectCON with Groups of SubjectFUN
co_gr1 = CombineGroups_CON_FUN( ...
    'GR1', gr1_CON, ...
    'GR2', gr1_FUN, ...
    'WAITBAR', true ...
    );

gr1 = co_gr1.get('GR');

co_gr2 = CombineGroups_CON_FUN( ...
    'GR1', gr2_CON, ...
    'GR2', gr2_FUN, ...
    'WAITBAR', true ...
    );

gr2 = co_gr2.get('GR');

%% Analysis CON FUN MP BUD
densities = 5:5:15;

a_BUD1 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
    'GR', gr1, ...
    'DENSITIES', densities ...
    );

a_BUD2 = AnalyzeEnsemble_CON_FUN_MP_BUD( ...
    'GR', gr2, ...
    'DENSITIES', densities ...
    );

% measure calculation
multiplexparticipation_BUD1 = a_BUD1.get('MEASUREENSEMBLE', 'MultiplexParticipation').get('M');
ovdegree_av_BUD1 = a_BUD1.get('MEASUREENSEMBLE', 'OverlappingDegreeAv').get('M');
edgeov_BUD1 = a_BUD1.get('MEASUREENSEMBLE', 'EdgeOverlap').get('M');

multiplexparticipation_BUD2 = a_BUD2.get('MEASUREENSEMBLE', 'MultiplexParticipation').get('M');
ovdegree_av_BUD2 = a_BUD2.get('MEASUREENSEMBLE', 'DegreeAv').get('M');
edgeov_BUD2 = a_BUD2.get('MEASUREENSEMBLE', 'EdgeOverlap').get('M');

% % % % comparison
% % % c_BUD = CompareEnsemble( ...
% % %     'P', 10, ...
% % %     'A1', a_BUD1, ...
% % %     'A2', a_BUD2, ...
% % %     'WAITBAR', true, ...
% % %     'VERBOSE', false, ...
% % %     'MEMORIZE', true ...
% % %     );
% % % 
% % % multiplexparticipation_BUD_diff = c_BUD.get('COMPARISON', 'MultiplexParticipation').get('DIFF');
% % % multiplexparticipation_BUD_p1 = c_BUD.get('COMPARISON', 'MultiplexParticipation').get('P1');
% % % multiplexparticipation_BUD_p2 = c_BUD.get('COMPARISON', 'MultiplexParticipation').get('P2');
% % % multiplexparticipation_BUD_cil = c_BUD.get('COMPARISON', 'MultiplexParticipation').get('CIL');
% % % multiplexparticipation_BUD_ciu = c_BUD.get('COMPARISON', 'MultiplexParticipation').get('CIU');
% % % 
% % % ovdegree_av_BUD_diff = c_BUD.get('COMPARISON', 'OverlappingDegreeAv').get('DIFF');
% % % ovdegree_av_BUD_p1 = c_BUD.get('COMPARISON', 'OverlappingDegreeAv').get('P1');
% % % ovdegree_av_BUD_p2 = c_BUD.get('COMPARISON', 'OverlappingDegreeAv').get('P2');
% % % ovdegree_av_BUD_cil = c_BUD.get('COMPARISON', 'OverlappingDegreeAv').get('CIL');
% % % ovdegree_av_BUD_ciu = c_BUD.get('COMPARISON', 'OverlappingDegreeAv').get('CIU');