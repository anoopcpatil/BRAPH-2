%% ¡header!
PPMeasureEnsembleM < PlotProp (pl, plot property of measure ensemble) is a plot of measure ensemble.

%%% ¡description!
PPMeasureEnsembleM plots a Measure Ensemble measures table.

%%% ¡seealso!
GUI, PlotElement, PlotProp, MeasureEnsemble.

%% ¡properties!
pp
measure_tbl
ui_sliding_panel
ui_slider
table_tag

%% ¡methods!
function h_panel = draw(pl, varargin)
    %DRAW draws the idict for group ensemble property graphical panel.
    %
    % DRAW(PL) draws the idict property graphical panel.
    %
    % H = DRAW(PL) returns a handle to the idict property graphical panel.
    %
    % DRAW(PL, 'Property', VALUE, ...) sets the properties of the graphical
    %  panel with custom property-value couples.
    %  All standard plot properties of uipanel can be used.
    %
    % It is possible to access the properties of the various graphical
    %  objects from the handle to the brain surface graphical panel H.
    %
    % see also update, redraw, refresh, settings, uipanel, isgraphics.

     pl.pp = draw@PlotProp(pl, varargin{:});

    % output
    if nargout > 0
        h_panel = pl.pp;
    end
end
function update(pl)
    %UPDATE updates the content of the property graphical panel.
    %
    % UPDATE(PL) updates the content of the property graphical panel.
    %
    % See also draw, redraw, refresh.

    update@PlotProp(pl)

    el = pl.get('EL');
    prop = pl.get('PROP');
    graph_dict = el.get('A').get('G_DICT');
    graph = graph_dict.getItem(1);
    value = el.getr(prop);
    node1_to_plot = 1;
    node2_to_plot = 1;
    node_labels = [];
    x_range = 1:10;
    m = el.get('MEASURE');
    
    if el.getPropCategory(prop) == Category.RESULT && isa(value, 'NoValue')
        % remove previous tables/textbox
        if ~isempty(pl.measure_tbl)
            if iscell(pl.measure_tbl)
                cellfun(@(x) set(x, 'Visible', 'off'), pl.measure_tbl, 'UniformOutput', false);
            else
                set(pl.measure_tbl, 'Visible', 'off')
            end
        end
        % delete brainview buttons
        childs = get(pl.pp, 'Child');
        for n = 1:length(childs)
            child = childs(n);
            if ~isgraphics(child, 'uitable') && isequal(child.String, 'Brain View')
                set(child, 'Visible', 'off')
            end
        end
    elseif isa(graph, 'MultigraphBUD') || isa(graph, 'MultigraphBUT')
        y_label = el.get('MEASURE');        
        node_labels_tmp = graph.get('BRAINATLAS').get('BR_DICT');
        node_labels = cellfun(@(x) x.get('ID') , node_dict.getItems(), 'UniformOutput', false);
        if isa(graph, 'MultigraphBUD')
            x_range = graph.get('DENSITIES');
        else
            x_range = graph.get('THRESHOLDS');
        end
        if isempty(node_labels)
            node_labels = cell(1, size(value, 1));
            for k = 1:length(node_labels)
                node_labels{k} = ['node_' num2str(k)];
            end
        end
        plot_title = [y_label ' vs ' x_label];
        value_cell = el.get(prop);
        % plot rules edit/tables
        if Measure.is_binodal(el)
            % create new panel with slider
            pl.ui_sliding_panel = uipanel( ...
                'Parent', pl.pp, ...
                'Units', 'characters', ...
                'BackgroundColor', [.62 .545 .439]);
            pl.ui_slider = uicontrol( ...
                'Parent', pl.pp, ...
                'Style', 'slider', ...
                'Units', 'characters', ...
                'Value', 1, ...
                'Callback', {@cb_slide} ...
                );
            
            pl.table_tag = uicontrol('Parent', pl.pp, ...
                'Style', 'text', ...
                'Units', 'normalized', ...
                'Position', [.01 .09 .3 .05], ...
                'BackgroundColor', [.62 .545 .439], ...
                'HorizontalAlignment', 'left', ...
                'String', '');
            
            delete(pl.measure_tbl)
            pl.measure_tbl = cell(size(value_cell));
            for i = 1:1:size(pl.measure_tbl, 1)
                for j = 1:1:size(pl.measure_tbl, 2)
                    if isempty(pl.measure_tbl{i, j}) || ~isgraphics(pl.measure_tbl{i, j}, 'uitable')
                        pl.measure_tbl{i, j} = uitable('Parent', pl.ui_sliding_panel, 'Visible', 'on');
                    end
                    set(pl.measure_tbl{i, j}, ...
                        'Data', value_cell{i, j}, ...
                        'Tooltip', [num2str(el.getPropProp(prop)) ' ' el.getPropDescription(prop)], ...
                        'CellEditCallback', {@cb_matrix_value, i, j} ...
                        )
                end
            end
        else
            if isempty(pl.measure_tbl) || ~isvalid(pl.measure_tbl)
                pl.measure_tbl = uitable('Parent', pl.pp);
            end
            value_double =  cell2mat(cellfun(@(x) x', value_cell, 'UniformOutput', false));
            set(pl.measure_tbl, ...
                'Data', value_double, ...
                'Tooltip', [num2str(el.getPropProp(prop)) ' ' el.getPropDescription(prop)], ...
                'Units', 'normalized', ...
                'Position', [.01 .1 .98 .8], ...
                'ColumnName', node_labels, ...
                'Visible', 'on', ...
                'RowName', row_names, ...
                'CellEditCallback', {@cb_matrix_value} ...
                )
        end
        
        ui_node1_popmenu  = uicontrol('Parent', pl.pp, 'Style', 'popupmenu');
        ui_node2_popmenu  = uicontrol('Parent', pl.pp, 'Style', 'popupmenu');
        ui_measure_plot = uicontrol('Parent', pl.pp, 'Style', 'pushbutton');
        ui_brain_view = uicontrol('Parent', pl.pp, ...
            'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [.74 .01 .25 .08]);
        
        init_measure_plot_area()
        init_brain_view_btn()
        
    else
        % paint a normal cell tables
        value_cell = el.get(prop);
        if Measure.is_binodal(el) % binodal
            pl.table_value_cell = cell(size(value_cell));
            for i = 1:1:size(pl.table_value_cell, 1)
                for j = 1:1:size(pl.table_value_cell, 2)
                    if isempty(pl.table_value_cell{i, j}) || ~isgraphics(pl.table_value_cell{i, j}, 'uitable')
                        pl.table_value_cell{i, j} = uitable('Parent', pl.pp, 'Visible', 'on');
                    end
                    set(pl.table_value_cell{i, j}, ...
                        'Data', value_cell{i, j}, ...
                        'Tooltip', [num2str(el.getPropProp(prop)) ' ' el.getPropDescription(prop)], ...
                        'CellEditCallback', {@cb_matrix_value, i, j} ...
                        )
                end
            end
        elseif Measure.is_global(el)
            node_labels = 'Global';
            value_double = cell2mat(cellfun(@(x) x', value_cell, 'UniformOutput', false));
            delete(pl.table_value_cell)
            pl.table_value_cell = uicontrol( ...
                'Parent', pl.pp, ...
                'Style', 'text', ...
                'Units', 'normalized', ...
                'Visible', 'on', ...
                'Position', [.01 .3 .5 .2], ...
                'BackgroundColor', [1 1 1], ...
                'String', num2str(value_double) ...
                );
        else % nodal
            if isempty(pl.table_value_cell) || ~isvalid(pl.table_value_cell)
                pl.table_value_cell = uitable('Parent', pl.pp);
            end
            value_double = cell2mat(cellfun(@(x) x', value_cell, 'UniformOutput', false));
            set(pl.table_value_cell, ...
                'Data', value_double, ...
                'Tooltip', [num2str(el.getPropProp(prop)) ' ' el.getPropDescription(prop)], ...
                'Units', 'normalized', ...
                'Visible', 'on', ...
                'Position', [.01 .25 .98 .55], ...
                'ColumnName', node_labels, ...
                'CellEditCallback', {@cb_matrix_value} ...
                )
        end
        ui_brain_view = uicontrol('Parent', pl.pp, ...
            'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [.74 .01 .25 .2]);
        init_brain_view_btn()
        rules_brain_view()
        x_label = 'Weighted';
    end
    
    function init_measure_plot_area()
        set(ui_node1_popmenu, ...
            'Units', 'normalized', ...
            'Tooltip', 'Select the Node to be Plotted.', ...
            'String', node_labels, ...
            'Position', [.01 .01 .2 .08], ...
            'Callback', {@cb_node_1} ...
            );
        set(ui_node2_popmenu, ...
            'Units', 'normalized', ...
            'Tooltip', 'Select the Node to be Plotted.', ...
            'String', node_labels, ...
            'Position', [.21 .01 .2 .08], ...
            'Callback', {@cb_node_2} ...
            );
        
        set(ui_measure_plot, ...
            'String', 'Measure Plot', ...
            'Tooltip', 'Plot the Measure. Will plot depending on the node selection.', ...
            'Units', 'normalized', ...
            'Position', [.49 .01 .25 .08], ...
            'Callback', {@cb_plot_m} ...
            );
        
        rules_node_popmenu_deactivation()
    end
    function init_brain_view_btn()
        set(ui_brain_view, ...
            'String', 'Brain View', ...
            'Tooltip', 'Plot the Measure Brain View. Will plot depending on the node selection.', ...
            'Callback', {@cb_brain_view} ...
            );
    end
    function rules_node_popmenu_deactivation()
        if Measure.is_global(m)
            set(ui_node1_popmenu, ...
                'Visible', 'off', ...
                'Enable', 'off' ...
                )
            set(ui_node2_popmenu, ...
                'Visible', 'off', ...
                'Enable', 'off' ...
                )
        elseif Measure.is_nodal(m)
            set(ui_node1_popmenu, ...
                'Visible', 'on', ...
                'Enable', 'on' ...
                )
            set(ui_node2_popmenu, ...
                'Visible', 'off', ...
                'Enable', 'off' ...
                )
        else
            set(ui_node1_popmenu, ...
                'Visible', 'on', ...
                'Enable', 'on' ...
                )
            set(ui_node2_popmenu, ...
                'Visible', 'on', ...
                'Enable', 'on' ...
                )
        end
    end
    function rules_brain_view()
        if Measure.is_global(el)
            set(ui_brain_view, ...
                'Visible', 'off', ...
                'Enable', 'off');
            
        elseif Measure.is_nodal(el)
            set(ui_brain_view, ...
                'Visible', 'on', ...
                'Enable', 'on');
        else
            set(ui_brain_view, ...
                'Visible', 'off', ...
                'Enable', 'off');
        end
    end
    function cb_node_1(source, ~)
        node1_to_plot = double(source.Value);
    end
    function cb_node_2(source, ~)
        node2_to_plot = double(source.Value);
    end
    function cb_plot_m(~, ~)
        plot_value = value;
        
        if Measure.is_global(m) % global
            is_inf_vector = cellfun(@(x) isinf(x), plot_value);
            if any(is_inf_vector)
                return;
            end
            y_ = [plot_value{:}];
        elseif Measure.is_nodal(m) % nodal
            for l = 1:length(plot_value)
                tmp = plot_value{l};
                tmp_y = tmp(node1_to_plot);
                if isinf(tmp_y)
                    return;
                end
                y_(l) = tmp_y; %#ok<AGROW>
            end
        else  % binodal
            for l = 1:length(plot_value)
                tmp = plot_value{l};
                tmp_y = tmp(node1_to_plot, node2_to_plot);
                if isinf(tmp_y)
                    return;
                end
                y_(l) = tmp_y; %#ok<AGROW>
            end
        end
        
        x_ = x_range;
        
        [~, normalized] = get_figure_position();
        x2 = normalized(1) + normalized(3);
        h2 = normalized(4);
        y2 = normalized(2);
        w2 = normalized(3) * 1.61;
        
        f = figure( ...
            'Visible', 'off', ...
            'NumberTitle', 'off', ...
            'Name', ['PlotGraph - ' BRAPH2.STR], ...
            'Units', 'normalized', ...
            'Position', [x2 y2 w2 h2], ...
            'Units', 'character', ...
            'MenuBar', 'none', ...
            'DockControls', 'off', ...
            'Color', [.94 .94 .94] ...
            );
        
        set_icon(f);
        
        ui_toolbar = findall(f, 'Tag', 'FigureToolBar');
        delete(findall(ui_toolbar, 'Tag', 'Standard.NewFigure'))
        delete(findall(ui_toolbar, 'Tag', 'Standard.FileOpen'))
        
        pg = PlotGraph( ...
            'bkgcolor', [1 1 1], ...
            'setname', ['Plot of Measure - ' BRAPH2.STR]);
        [h_figure, h_axes] = pg.draw('Parent', f);
        set(f, 'Visible', 'on')
        
        handle_plot = plot( ...
            h_axes, ...
            x_, ...
            y_, ...
            'Marker', 'o', ...
            'MarkerSize', 10, ...
            'MarkerEdgeColor', [0 0 1], ...
            'MarkerFaceColor', [.9 .4 .1], ...
            'LineStyle', '-', ...
            'LineWidth', 1, ...
            'Color', [0 0 1] ...
            );
        title(plot_title)
        xlabel(x_label)
        ylabel(y_label)
    end
    function [pixels, normalized] = get_figure_position()
        fig_h = getGUIFigureObj();
        set(fig_h, 'Units', 'normalized'); % set it to get position on normal units
        pixels = getpixelposition(fig_h);
        normalized = get(fig_h, 'Position');
        set(fig_h, 'Units', 'characters'); % go back
    end
    function obj = getGUIFigureObj()
        obj = ancestor(pl.pp, 'Figure');
    end
end
function redraw(pl, varargin)
    %REDRAW redraws the element graphical panel.
    %
    % REDRAW(PL) redraws the plot PL.
    %
    % REDRAW(PL, 'Height', HEIGHT) sets the height of PL (by default HEIGHT=3.3).
    %
    % See also draw, update, refresh.

    el = pl.get('EL');
    prop = pl.get('PROP');
    
    value = el.getr(prop);
    if el.getPropCategory(prop) == Category.RESULT && isa(value, 'NoValue')
        pl.redraw@PlotProp('Height', 1.8, varargin{:})
    else
        value_cell = el.get(prop);
        
        if isempty(value_cell)
            pl.redraw@PlotProp('Height', 1.8, varargin{:})
        else
            pl.redraw@PlotProp('Height', 30, varargin{:})
        end
        
        for i = 1:1:size(value_cell, 1)
            for j = 1:1:size(value_cell, 2)
                set(pl.measure_tbl{i, j}, ...
                    'Units', 'character', ...
                    'Position', ...
                    [ ...
                    (0.01 + (i - 1) * 0.98 / size(pl.measure_tbl, 1)) * Plot.w(pl.pp) ...
                    (0.2 + (j - 1) * 0.8 / size(pl.measure_tbl, 2)) * (Plot.h(pl.pp) - 1.8) ...
                    0.98 / size(pl.measure_tbl, 1) * Plot.w(pl.pp) ...
                    0.8 / size(pl.measure_tbl, 2) * (Plot.h(pl.pp) - 1.8) ...
                    ] ...
                    )
            end
        end
    end
end