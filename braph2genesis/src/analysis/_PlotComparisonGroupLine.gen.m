%% ¡header!
PlotComparisonGroupLine < Plot (pr, plot graph) is a line plot of the comparison values.

%%% ¡description!
Plot is the line plot of the comparison values.
It is a graphical figure with empty axes, which should be filled by derived element.
To generate the plot, call pr.draw().

%%% ¡seealso!
uipanel, ishandle, isgraphics, figure

%% ¡properties!
h_figure % panel graphical handle
h_axes % axes handle
h_plot % plot handle
pp
h_settings
cp % measure

%% ¡props!

%%% ¡prop!
PLOTTITLE(metadata, string) to set plot line title

%%% ¡prop!
X(data, rvector) to set plot line graph x range

%%% ¡prop!
XLABEL(metadata, string) to set plot line x label

%%% ¡prop!
YLABEL(metadata, string) to set plot line y label

%%% ¡prop!
PLOTVALUE(data, cell) to set plot line atlas

%%% ¡prop!
MEASURE(data, string) to set plot line measure

%%% ¡prop!
COMPARISON(data, IDICT) to set the comparison dictionary

%%% ¡prop!
CIL (metadata, CELL) to set plot line cil

%%% ¡prop!
CIU (metadata, CELL) to set plot line ciu

%%% ¡prop!
NODE1 (metadata, scalar) to set plot line node 1
%%%% ¡default!
1

%%% ¡prop!
NODE2 (metadata, scalar) to set plot line node 2
%%%% ¡default!
2

%%% ¡prop!
COLOR (metadata, rvector) to set plot line color
%%%% ¡default!
[0 0 0]

%%% ¡prop!
LINESTYLE (metadata, string) to set plot line style
%%%% ¡default!
'-'

%%% ¡prop!
LINEWIDTH (metadata, scalar) to set plot line width
%%%% ¡default!
0.5

%%% ¡prop!
MARKER (metadata, string) to set plot marker style
%%%% ¡default!
'none'

%%% ¡prop!
MARKERSIZE (metadata, scalar) to set plot marker size
%%%% ¡default!
6

%%% ¡prop!
MARKEREDGECOLOR (metadata, rvector) to set plot marker edge color
%%%% ¡default!
[0 0 0]

%%% ¡prop!
MARKERFACECOLOR (metadata, rvector) to set plot marker face color
%%%% ¡default!
[0 0 0]

%%% ¡prop!
FILLCOLOR (metadata, rvector) to set plot patch face color
%%%% ¡default!
[0 0 0]

%%% ¡prop!
FILLALPHA (metadata, scalar) to set plot patch face color alpha
%%%% ¡check_prop!
check = value >= 0 && value <= 1;
%%%% ¡default!
0

%% ¡methods!
function h_figure = draw(pr, varargin)
    %DRAW draws the plot line.
    %
    % DRAW(PR) draws the plot line.
    %
    % H = DRAW(PR) returns a handle to the plot line.
    %
    % DRAW(PR, 'Property', VALUE, ...) sets the properties of the plot line
    %  with custom property-value couples.
    %  All standard plot properties of plot line can be used.
    %
    % see also settings, uipanel, isgraphics, PlotGraph.    
        
    pr.pp = draw@Plot(pr, varargin{:});
    pr.h_figure = get(pr.pp, 'Parent');
    subpanel = uipanel(pr.h_figure, ...
        'BackGroundColor', 'w', ...
        'Units', 'normalized', ...
        'Position', [.0 .0 1 1] ...
        );
    
    pr.h_axes = axes(subpanel);
        
    if nargout > 0
        h_figure = pr.h_figure;
    end
end
function f_settings = settings(pr, varargin)
    %SETTINGS opens the property editor GUI.
    %
    % SETTINGS(PR) allows the user to specify the properties of the plot
    %  by opening a GUI property editor.
    %
    % F = SETTINGS(PR) returns a handle to the property editor GUI.
    %
    % SETTINGS(PR, 'Property', VALUE, ...) sets the properties of the
    %  property editor GUI with custom property-value couples.
    %  All standard plot properties of figure can be used.
    %
    % See also draw, figure, isgraphics.

    pr.h_settings = settings@Plot(pr, varargin{:});
    set_braph2_icon(pr.h_settings);

    % constants
    line_style = {'-', '--', ':', ':.', 'none'}; % TODO: move to BRAPH2
    marker_style = {'o', '+', '*', '.', 'x', ...
        '_', '|', 'square', 'diamond', '^', ...
        '>', '<', 'pentagram', 'hexagram', 'none'}; % TODO: move to BRAPH2
    cp_dict = pr.get('Comparison');
    pr.cp = cp_dict.getItem(1); % it has at least 1 measure
    measure_list = cellfun(@(x) x.get('MEASURE'), cp_dict.getItems(), 'UniformOutput', false);
    atlas = pr.cp.get('C').get('A1').get('G').get('BRAINATLAS');
    node_labels = cellfun(@(x) x.get('ID'), atlas.get('BR_DICT').getItems(), 'UniformOutput', false);

    h_p_min = [];
    h_fill_area = [];
    h_p_max = [];

    plot_properties_panel = uipanel(pr.h_settings, ...
        'Units', 'normalized', ...
        'BackgroundColor', [1 .9725 .929], ...
        'Position', [0 0 1 1]);

    % measures panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    measure_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.01 .9 .98 .09] ...
        );

    measure_list_id = uicontrol(measure_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Measure', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .01 .1 .9]);

    measure_list_popup = uicontrol(measure_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.11 .01 .1 .9], ...
        'String', measure_list, ...
        'TooltipString', 'Plot Line Style', ...
        'Callback', {@cb_measure_selection} ...
        );

        function cb_measure_selection(~,~)
            val = measure_list_popup.Value;
            str = measure_list_popup.String;
            pr.cp = cp_dict.getItem(val);
            pr.set('YLABEL', pr.cp.get('MEASURE'));
            pr.set('CIL', pr.cp.get('CIL'));
            pr.set('CIU', pr.cp.get('CIU'));
            rules_node_popmenu_deactivation()
            update()
        end

    node_1_id = uicontrol(measure_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Brain Region 1', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.22 .01 .1 .9]);
    node_2_id = uicontrol(measure_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Brain Region 2', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.44 .01 .1 .9]);
    node1_popmenu  = uicontrol('Parent', measure_panel, 'Style', 'popupmenu', 'String', node_labels);
    node2_popmenu  = uicontrol('Parent', measure_panel, 'Style', 'popupmenu', 'String', node_labels);

        function update()
            cla(pr.h_axes)
            if comp_plot_checkbox.Value
                pr.update_plot()
            else
                set(pr.h_plot, 'Visible', 'off');
            end
            if confidence_interval_min_checkbox.Value
                cb_show_confidence_interval_min()
            end
            if confidence_interval_max_checkbox.Value
                cb_show_confidence_interval_max()
            end
            if area_fill_checkbox.Value
                area_fill(h_p_min, h_p_max)
            else
                set(h_fill_area, 'Visible', 'off');
            end
        end
        function init_measure_plot_area()
            set(node1_popmenu, ...
                'Units', 'normalized', ...
                'Tooltip', 'Select the Node to be Plotted.', ...
                'String', node_labels, ...
                'Value', pr.get('NODE1'), ...
                'Position', [.33 .01 .1 .9], ...
                'Callback', {@cb_node_1} ...
                );
            set(node2_popmenu, ...
                'Units', 'normalized', ...
                'Tooltip', 'Select the Node to be Plotted.', ...
                'String', node_labels, ...
                'Value', pr.get('NODE2'), ...
                'Position', [.55 .01 .1 .9], ...
                'Callback', {@cb_node_2} ...
                );
            rules_node_popmenu_deactivation()
        end
        function rules_node_popmenu_deactivation()
            if Measure.is_global(pr.cp.get('MEASURE'))
                set(node1_popmenu, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node2_popmenu, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node_1_id, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node_2_id, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )

            elseif Measure.is_nodal(pr.cp.get('MEASURE'))
                set(node1_popmenu, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node2_popmenu, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node_1_id, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node_2_id, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                node_1_id.String = 'Brain Region';
            else
                set(node1_popmenu, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node2_popmenu, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node_1_id, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node_2_id, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                node_1_id.String = 'Brain Region 1';
            end
        end
        function cb_node_1(source, ~)
            node1_to_plot = double(source.Value);
            pr.set('NODE1', node1_to_plot)
            update();
        end
        function cb_node_2(source, ~)
            node2_to_plot = double(source.Value);
            pr.set('NODE2', node2_to_plot)
            update();
        end

    % plot lines checkbox panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    checkbox_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.01 .8 .98 .09] ...
        );

    comp_plot_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');
    confidence_interval_min_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');
    confidence_interval_max_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');
    area_fill_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');

    init_checkbox_panel()
        function init_checkbox_panel()
            set(comp_plot_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.01 .01 .2 .9], ...
                'String', 'Show Comparison Plot', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_show_comparison_plot});

            set(confidence_interval_min_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.21 .01 .2 .9], ...
                'String', 'Show Confidence Interval Min', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_show_confidence_interval_min});

            set(confidence_interval_max_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.42 .01 .2 .9], ...
                'String', 'Show Confidence Interval Max', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_show_confidence_interval_max});

            set(area_fill_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.63 .01 .2 .9], ...
                'String', 'Fill area', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_fill_area});
        end
        function cb_show_comparison_plot(~, ~)
            update();
            % enable/disable comp line panel
        end
        function cb_show_confidence_interval_min(src, ~)
            % enable/disable cil line panel

            % plot
            if confidence_interval_min_checkbox.Value
                cil = obtain_cil_ciu_value(pr.get('CIL'));
                x_ = pr.get('X');
                hold(pr.h_axes, 'on')
                h_p_min = plot(pr.h_axes, ...
                    x_, ...
                    cil, ...
                    'Marker', 'x', ...
                    'MarkerSize', 10, ...
                    'MarkerEdgeColor', [0 0 1], ...
                    'MarkerFaceColor', [.3 .4 .5], ...
                    'LineStyle', '-', ...
                    'LineWidth', 1, ...
                    'Color', [0 1 1]);
                h_p_min.Visible = true;
            else
                h_p_min.Visible = false;
            end
        end
        function cb_show_confidence_interval_max(src, ~)
            % enable/disable cil line panel

            % plot
            if confidence_interval_max_checkbox.Value
                hold(pr.h_axes, 'on')
                x_ = pr.get('X');
                ciu = obtain_cil_ciu_value(pr.get('CIU'));
                h_p_max = plot(pr.h_axes, ...
                    x_, ...
                    ciu, ...
                    'Marker', 'x', ...
                    'MarkerSize', 10, ...
                    'MarkerEdgeColor', [0 0 1], ...
                    'MarkerFaceColor', [.3 .4 .5], ...
                    'LineStyle', '-', ...
                    'LineWidth', 1, ...
                    'Color', [0 1 1]);
                h_p_max.Visible = true;
            else
                h_p_max.Visible = false;
            end
        end
        function limit = obtain_cil_ciu_value(array)
            node1_to_plot = pr.get('NODE1');
            node2_to_plot = pr.get('NODE2');

            if Measure.is_global(pr.cp.get('MEASURE')) % global
                is_inf_vector = cellfun(@(x) isinf(x), array);
                if any(is_inf_vector)
                    return;
                end
                limit = [array{:}];
            elseif Measure.is_nodal(pr.cp.get('MEASURE')) % nodal
                for l = 1:length(array)
                    tmp = array{l};
                    tmp_y = tmp(node1_to_plot);
                    if isinf(tmp_y)
                        return;
                    end
                    limit(l) = tmp_y; %#ok<AGROW>
                end
            else  % binodal
                for l = 1:length(array)
                    tmp = array{l};
                    tmp_y = tmp(node1_to_plot, node2_to_plot);
                    if isinf(tmp_y)
                        return;
                    end
                    limit(l) = tmp_y; %#ok<AGROW>
                end
            end
        end
        function cb_fill_area(~, ~)
            update()
            % disable enable
        end

    % id panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ids_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.01 .01 .23 .78] ...
        );

    line_style_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Line Style', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .84 .98 .1]);

    line_color_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Line Color', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .72 .98 .1]);

    line_width_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Line Width', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .6 .98 .1]);

    marker_style_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Style', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .48 .98 .1]);

    marker_edge_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Edge Color', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .36 .98 .1]);

    marker_width_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Width', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .24 .98 .1]);

    marker_face_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Face Color', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .12 .98 .1]);

    % comp line style panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    comparison_plot_style_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.25 .01 .24 .78] ...
        );

    ui_line_style = uicontrol(comparison_plot_style_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.01 .84 .98 .1], ...
        'String', line_style, ...
        'TooltipString', 'Plot Line Style', ...
        'Callback', {@cb_line_style});

        function cb_line_style(~, ~)  % (src, event)
            val = ui_line_style.Value;
            str = ui_line_style.String;
            pr.set('LINESTYLE', str{val})
            update()
        end

    ui_line_color = uicontrol(comparison_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .72 .98 .1], ...
        'String', 'Line Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Plot Line Color', ...
        'Callback', {@cb_line_color});

        function cb_line_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('COLOR', color)
                update()
            end
        end

    ui_line_width = uicontrol(comparison_plot_style_panel, ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [.01 .6 .98 .1], ...
        'String', '5', ...
        'TooltipString', 'Plot Line Width', ...
        'Callback', {@cb_line_width});

        function cb_line_width(~, ~)  % (src, event)
            value = str2num(ui_line_width.String);
            pr.set('LINEWIDTH', value)
            update()
        end

    ui_marker_style = uicontrol(comparison_plot_style_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.01 .48 .98 .1], ...
        'String', marker_style, ...
        'TooltipString', 'Plot Marker Style', ...
        'Callback', {@cb_marker_style});

        function cb_marker_style(~, ~)  % (src, event)
            val = ui_marker_style.Value;
            str = ui_marker_style.String;
            pr.set('MARKER', str{val})
            update()
        end

    ui_marker_edge_color = uicontrol(comparison_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .36 .98 .1], ...
        'String', 'Marker Edge Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Marker Edge Color', ...
        'Callback', {@cb_marker_edge_color});

        function cb_marker_edge_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('MARKEREDGECOLOR', color)
                update()
            end
        end

    ui_marker_size = uicontrol(comparison_plot_style_panel, ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [.01 .24 .98 .1], ...
        'String', '5', ...
        'TooltipString', 'Marker Line Width', ...
        'Callback', {@cb_marker_size});

        function cb_marker_size(~, ~)  % (src, event)
            value = str2num(ui_line_width.String);
            pr.set('MARKERSIZE', value)
            update()
        end

    ui_marker_face_color = uicontrol(comparison_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .12 .98 .1], ...
        'String', 'Marker Face Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Marker Face Color', ...
        'Callback', {@cb_marker_face_color});

        function cb_marker_face_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('MARKERFACECOLOR', color)
                update()
            end
        end

    % cil ciu panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    cil_ciu_plot_style_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.5 .01 .24 .78] ...
        );

    cil_ciu_style = uicontrol(cil_ciu_plot_style_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.01 .84 .98 .1], ...
        'String', line_style, ...
        'TooltipString', 'Plot CIL and CIU Style', ...
        'Callback', {@cb_minmax_line_style});

        function cb_minmax_line_style(src, ~)  % (src, event)
            val = src.Value;
            str = src.String;
            set(h_p_min, 'LineStyle', str{val})
            set(h_p_max, 'LineStyle', str{val})
        end

    cil_ciu_line_color = uicontrol(cil_ciu_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .72 .98 .1], ...
        'String', 'Line Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Plot CIL and CIU Color', ...
        'Callback', {@cb_minmax_color});

        function cb_minmax_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                set(h_p_min, 'COLOR', color)
                set(h_p_max, 'COLOR', color)
            end
        end

    cil_ciu_line_width = uicontrol(cil_ciu_plot_style_panel, ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [.01 .6 .98 .1], ...
        'String', '5', ...
        'TooltipString', 'Plot Line Width', ...
        'Callback', {@cb_minmax_line_width});

        function cb_minmax_line_width(~, ~)  % (src, event)
            value = str2num(cil_ciu_line_width.String);
            set(h_p_min, 'LINEWIDTH', value)
            set(h_p_max, 'LINEWIDTH', value)
        end

    % area fill %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    fill_plot_style_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.75 .01 .24 .78] ...
        );

    fill_area_alpha = uicontrol(fill_plot_style_panel, ...
        'Style', 'slider', ...
        'Units', 'normalized', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .84 .98 .1], ...
        'String', 'Area Alpha', ...
        'Min', 0, 'Max', 1, 'Value', pr.get('FILLALPHA'), ...
        'TooltipString', 'Plot Area Color Transparency', ...
        'Callback', {@cb_fill_alpha});

        function cb_fill_alpha(~, ~)  % (src, event)
            pr.set('FILLALPHA', get(fill_area_alpha, 'Value'))
            update()
        end

    fill_area_color = uicontrol(fill_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [.01 .72 .98 .1], ...
        'String', 'Area Color', ...
        'TooltipString', 'Plot Area Color', ...
        'Callback', {@cb_fill_color});

        function cb_fill_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('FILLCOLOR', color)
                update()
            end
        end

        function area_fill(X, Y)
            x_data = get(X, 'XData');
            y1_data = get(X, 'YData');
            y2_data = get(Y, 'YData');
            h_fill_area = fill(pr.h_axes, [x_data, fliplr(x_data)], [y1_data, fliplr(y2_data)], pr.get('FILLCOLOR'), 'FaceAlpha', pr.get('FILLALPHA'));

        end

    init_measure_plot_area()
    cb_measure_selection()

    if nargin > 0
        f_settings = pr.h_settings;
    end
end
function update_plot(pr)
    comparison = pr.cp;
    plot_value = comparison.get('DIFF');
    if Measure.is_global(pr.cp.get('MEASURE')) % global
        is_inf_vector = cellfun(@(x) isinf(x), plot_value);
        if any(is_inf_vector)
            return;
        end
        y_ = [plot_value{:}];
    elseif Measure.is_nodal(pr.cp.get('MEASURE')) % nodal
        for l = 1:length(plot_value)
            tmp = plot_value{l};
            tmp_y = tmp(pr.get('NODE1'));
            if isinf(tmp_y)
                return;
            end
            y_(l) = tmp_y; %#ok<AGROW>
        end
    else  % binodal
        for l = 1:length(plot_value)
            tmp = plot_value{l};
            tmp_y = tmp(pr.get('NODE1'), pr.get('NODE2'));
            if isinf(tmp_y)
                return;
            end
            y_(l) = tmp_y; %#ok<AGROW>
        end
    end
    pr.plotline(pr.get('X'), y_)
end
function f_settings = settings(pr, varargin)
    %SETTINGS opens the property editor GUI.
    %
    % SETTINGS(PR) allows the user to specify the properties of the plot
    %  by opening a GUI property editor.
    %
    % F = SETTINGS(PR) returns a handle to the property editor GUI.
    %
    % SETTINGS(PR, 'Property', VALUE, ...) sets the properties of the
    %  property editor GUI with custom property-value couples.
    %  All standard plot properties of figure can be used.
    %
    % See also draw, figure, isgraphics.

    pr.h_settings = settings@Plot(pr, varargin{:});
    set_braph2_icon(pr.h_settings);

    % constants
    line_style = {'-', '--', ':', ':.', 'none'}; % TODO: move to BRAPH2
    marker_style = {'o', '+', '*', '.', 'x', ...
        '_', '|', 'square', 'diamond', '^', ...
        '>', '<', 'pentagram', 'hexagram', 'none'}; % TODO: move to BRAPH2
    cp_dict = pr.get('Comparison');
    pr.cp = cp_dict.getItem(1); % it has at least 1 measure
    measure_list = cellfun(@(x) x.get('MEASURE'), cp_dict.getItems(), 'UniformOutput', false);
    atlas = pr.cp.get('C').get('A1').get('G').get('BRAINATLAS');
    node_labels = cellfun(@(x) x.get('ID'), atlas.get('BR_DICT').getItems(), 'UniformOutput', false);

    h_p_min = [];
    h_p_max = [];

    plot_properties_panel = uipanel(pr.h_settings, ...
        'Units', 'normalized', ...
        'BackgroundColor', [1 .9725 .929], ...
        'Position', [0 0 1 1]);

    % measures panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    measure_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.01 .9 .98 .09] ...
        );

    measure_list_id = uicontrol(measure_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Measure', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .01 .1 .9]);

    measure_list_popup = uicontrol(measure_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.11 .01 .1 .9], ...
        'String', measure_list, ...
        'TooltipString', 'Plot Line Style', ...
        'Callback', {@cb_measure_selection} ...
        );

        function cb_measure_selection(~,~)
            val = measure_list_popup.Value;
            str = measure_list_popup.String;
            pr.cp = cp_dict.getItem(val);
            pr.set('YLABEL', pr.cp.get('MEASURE'));
            pr.set('CIL', pr.cp.get('CIL'));
            pr.set('CIU', pr.cp.get('CIU'));
            rules_node_popmenu_deactivation()
            update()
        end

    node_1_id = uicontrol(measure_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Brain Region 1', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.22 .01 .1 .9]);
    node_2_id = uicontrol(measure_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Brain Region 2', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.44 .01 .1 .9]);
    node1_popmenu  = uicontrol('Parent', measure_panel, 'Style', 'popupmenu', 'String', node_labels);
    node2_popmenu  = uicontrol('Parent', measure_panel, 'Style', 'popupmenu', 'String', node_labels);

        function update()
            if comp_plot_checkbox.Value
                pr.update_plot()
            else
                set(pr.h_plot, 'Visible', 'off');
            end
            if confidence_interval_min_checkbox.Value
                cb_show_confidence_interval_min()
            end
            if confidence_interval_max_checkbox.Value
                cb_show_confidence_interval_max()
            end
            if area_fill_checkbox.Value
                area_fill(h_p_min, h_p_max)
            end
        end
        function init_measure_plot_area()
            set(node1_popmenu, ...
                'Units', 'normalized', ...
                'Tooltip', 'Select the Node to be Plotted.', ...
                'String', node_labels, ...
                'Value', pr.get('NODE1'), ...
                'Position', [.33 .01 .1 .9], ...
                'Callback', {@cb_node_1} ...
                );
            set(node2_popmenu, ...
                'Units', 'normalized', ...
                'Tooltip', 'Select the Node to be Plotted.', ...
                'String', node_labels, ...
                'Value', pr.get('NODE2'), ...
                'Position', [.55 .01 .1 .9], ...
                'Callback', {@cb_node_2} ...
                );
            rules_node_popmenu_deactivation()
        end
        function rules_node_popmenu_deactivation()
            if Measure.is_global(pr.cp.get('MEASURE'))
                set(node1_popmenu, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node2_popmenu, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node_1_id, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node_2_id, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )

            elseif Measure.is_nodal(pr.cp.get('MEASURE'))
                set(node1_popmenu, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node2_popmenu, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                set(node_1_id, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node_2_id, ...
                    'Visible', 'off', ...
                    'Enable', 'off' ...
                    )
                node_1_id.String = 'Brain Region';
            else
                set(node1_popmenu, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node2_popmenu, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node_1_id, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                set(node_2_id, ...
                    'Visible', 'on', ...
                    'Enable', 'on' ...
                    )
                node_1_id.String = 'Brain Region 1';
            end
        end
        function cb_node_1(source, ~)
            node1_to_plot = double(source.Value);
            pr.set('NODE1', node1_to_plot)
            update();
        end
        function cb_node_2(source, ~)
            node2_to_plot = double(source.Value);
            pr.set('NODE2', node2_to_plot)
            update();
        end

    % plot lines checkbox panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    checkbox_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.01 .8 .98 .09] ...
        );

    comp_plot_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');
    confidence_interval_min_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');
    confidence_interval_max_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');
    area_fill_checkbox = uicontrol('Parent', checkbox_panel, 'Style', 'checkbox');

    init_checkbox_panel()
        function init_checkbox_panel()
            set(comp_plot_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.01 .01 .2 .9], ...
                'String', 'Show Comparison Plot', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_show_comparison_plot});

            set(confidence_interval_min_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.21 .01 .2 .9], ...
                'String', 'Show Confidence Interval Min', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_show_confidence_interval_min});

            set(confidence_interval_max_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.42 .01 .2 .9], ...
                'String', 'Show Confidence Interval Max', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_show_confidence_interval_max});

            set(area_fill_checkbox, ...
                'Units', 'normalized', ...
                'Position', [.63 .01 .2 .9], ...
                'String', 'Fill area', ...
                'Value', false, ...
                'BackgroundColor', pr.h_settings.Color, ...
                'Callback', {@cb_fill_area});
        end
        function cb_show_comparison_plot(~, ~)
            update();
            % enable/disable comp line panel
        end
        function cb_show_confidence_interval_min(src, ~)
            % enable/disable cil line panel

            % plot
            if confidence_interval_min_checkbox.Value
                cil = obtain_cil_ciu_value(pr.get('CIL'));
                x_ = pr.get('X');
                hold(pr.h_axes, 'on')
                h_p_min = plot(pr.h_axes, ...
                    x_, ...
                    cil, ...
                    'Marker', 'x', ...
                    'MarkerSize', 10, ...
                    'MarkerEdgeColor', [0 0 1], ...
                    'MarkerFaceColor', [.3 .4 .5], ...
                    'LineStyle', '-', ...
                    'LineWidth', 1, ...
                    'Color', [0 1 1]);
                h_p_min.Visible = true;
            else
                h_p_min.Visible = false;
            end
        end
        function cb_show_confidence_interval_max(src, ~)
            % enable/disable cil line panel

            % plot
            if confidence_interval_max_checkbox.Value
                hold(pr.h_axes, 'on')
                x_ = pr.get('X');
                ciu = obtain_cil_ciu_value(pr.get('CIU'));
                h_p_max = plot(pr.h_axes, ...
                    x_, ...
                    ciu, ...
                    'Marker', 'x', ...
                    'MarkerSize', 10, ...
                    'MarkerEdgeColor', [0 0 1], ...
                    'MarkerFaceColor', [.3 .4 .5], ...
                    'LineStyle', '-', ...
                    'LineWidth', 1, ...
                    'Color', [0 1 1]);
                h_p_max.Visible = true;
            else
                h_p_max.Visible = false;
            end
        end
        function limit = obtain_cil_ciu_value(array)
            node1_to_plot = pr.get('NODE1');
            node2_to_plot = pr.get('NODE2');

            if Measure.is_global(pr.cp.get('MEASURE')) % global
                is_inf_vector = cellfun(@(x) isinf(x), array);
                if any(is_inf_vector)
                    return;
                end
                limit = [array{:}];
            elseif Measure.is_nodal(pr.cp.get('MEASURE')) % nodal
                for l = 1:length(array)
                    tmp = array{l};
                    tmp_y = tmp(node1_to_plot);
                    if isinf(tmp_y)
                        return;
                    end
                    limit(l) = tmp_y; %#ok<AGROW>
                end
            else  % binodal
                for l = 1:length(array)
                    tmp = array{l};
                    tmp_y = tmp(node1_to_plot, node2_to_plot);
                    if isinf(tmp_y)
                        return;
                    end
                    limit(l) = tmp_y; %#ok<AGROW>
                end
            end
        end
        function cb_fill_area(~, ~)
            update()
            % disable enable
        end

    % id panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ids_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.01 .01 .23 .78] ...
        );

    line_style_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Line Style', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .84 .98 .1]);

    line_color_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Line Color', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .72 .98 .1]);

    line_width_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Line Width', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .6 .98 .1]);

    marker_style_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Style', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .48 .98 .1]);

    marker_edge_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Edge Color', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .36 .98 .1]);

    marker_width_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Width', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .24 .98 .1]);

    marker_face_id = uicontrol(ids_panel, ...
        'Style', 'text', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', ...
        'String', 'Marker Face Color', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .12 .98 .1]);

    % comp line style panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    comparison_plot_style_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.25 .01 .24 .78] ...
        );

    ui_line_style = uicontrol(comparison_plot_style_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.01 .84 .98 .1], ...
        'String', line_style, ...
        'TooltipString', 'Plot Line Style', ...
        'Callback', {@cb_line_style});

        function cb_line_style(~, ~)  % (src, event)
            val = ui_line_style.Value;
            str = ui_line_style.String;
            pr.set('LINESTYLE', str{val})
            update()
        end

    ui_line_color = uicontrol(comparison_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .72 .98 .1], ...
        'String', 'Line Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Plot Line Color', ...
        'Callback', {@cb_line_color});

        function cb_line_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('COLOR', color)
                update()
            end
        end

    ui_line_width = uicontrol(comparison_plot_style_panel, ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [.01 .6 .98 .1], ...
        'String', '5', ...
        'TooltipString', 'Plot Line Width', ...
        'Callback', {@cb_line_width});

        function cb_line_width(~, ~)  % (src, event)
            value = str2num(ui_line_width.String);
            pr.set('LINEWIDTH', value)
            update()
        end

    ui_marker_style = uicontrol(comparison_plot_style_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.01 .48 .98 .1], ...
        'String', marker_style, ...
        'TooltipString', 'Plot Marker Style', ...
        'Callback', {@cb_marker_style});

        function cb_marker_style(~, ~)  % (src, event)
            val = ui_marker_style.Value;
            str = ui_marker_style.String;
            pr.set('MARKER', str{val})
            update()
        end

    ui_marker_edge_color = uicontrol(comparison_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .36 .98 .1], ...
        'String', 'Marker Edge Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Marker Edge Color', ...
        'Callback', {@cb_marker_edge_color});

        function cb_marker_edge_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('MARKEREDGECOLOR', color)
                update()
            end
        end

    ui_marker_size = uicontrol(comparison_plot_style_panel, ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [.01 .24 .98 .1], ...
        'String', '5', ...
        'TooltipString', 'Marker Line Width', ...
        'Callback', {@cb_marker_size});

        function cb_marker_size(~, ~)  % (src, event)
            value = str2num(ui_line_width.String);
            pr.set('MARKERSIZE', value)
            update()
        end

    ui_marker_face_color = uicontrol(comparison_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .12 .98 .1], ...
        'String', 'Marker Face Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Marker Face Color', ...
        'Callback', {@cb_marker_face_color});

        function cb_marker_face_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('MARKERFACECOLOR', color)
                update()
            end
        end

    % cil ciu panel %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    cil_ciu_plot_style_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.5 .01 .24 .78] ...
        );

    cil_ciu_style = uicontrol(cil_ciu_plot_style_panel, ...
        'Style', 'popupmenu', ...
        'Units','normalized', ...
        'Position', [.01 .84 .98 .1], ...
        'String', line_style, ...
        'TooltipString', 'Plot CIL and CIU Style', ...
        'Callback', {@cb_minmax_line_style});

        function cb_minmax_line_style(src, ~)  % (src, event)
            val = src.Value;
            str = src.String;
            set(h_p_min, 'LineStyle', str{val})
            set(h_p_max, 'LineStyle', str{val})
        end

    cil_ciu_line_color = uicontrol(cil_ciu_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units','normalized', ...
        'Position', [.01 .72 .98 .1], ...
        'String', 'Line Color', ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', 'Plot CIL and CIU Color', ...
        'Callback', {@cb_minmax_color});

        function cb_minmax_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                set(h_p_min, 'COLOR', color)
                set(h_p_max, 'COLOR', color)
            end
        end

    cil_ciu_line_width = uicontrol(cil_ciu_plot_style_panel, ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [.01 .6 .98 .1], ...
        'String', '5', ...
        'TooltipString', 'Plot Line Width', ...
        'Callback', {@cb_minmax_line_width});

        function cb_minmax_line_width(~, ~)  % (src, event)
            value = str2num(cil_ciu_line_width.String);
            set(h_p_min, 'LINEWIDTH', value)
            set(h_p_max, 'LINEWIDTH', value)
        end

    % area fill %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    fill_plot_style_panel = uipanel(plot_properties_panel, ...
        'Units', 'normalized', ...
        'BackgroundColor',  pr.h_settings.Color, ...
        'Position', [.75 .01 .24 .78] ...
        );

    fill_area_alpha = uicontrol(fill_plot_style_panel, ...
        'Style', 'slider', ...
        'Units', 'normalized', ...
        'BackgroundColor', pr.h_settings.Color, ...
        'Position', [.01 .84 .98 .1], ...
        'String', 'Area Alpha', ...
        'Min', 0, 'Max', 1, 'Value', pr.get('FILLALPHA'), ...
        'TooltipString', 'Plot Area Color Transparency', ...
        'Callback', {@cb_fill_alpha});

        function cb_fill_alpha(~, ~)  % (src, event)
            pr.set('FILLALPHA', get(fill_area_alpha, 'Value'))
            update()
        end

    fill_area_color = uicontrol(fill_plot_style_panel, ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [.01 .72 .98 .1], ...
        'String', 'Area Color', ...
        'TooltipString', 'Plot Area Color', ...
        'Callback', {@cb_fill_color});

        function cb_fill_color(~, ~) % (src, event)
            color = uisetcolor;
            if length(color) == 3
                pr.set('FILLCOLOR', color)
                update()
            end
        end

        function area_fill(X, Y)
            x_data = get(X, 'XData');
            y1_data = get(X, 'YData');
            y2_data = get(Y, 'YData');
            fill(pr.h_axes, [x_data, fliplr(x_data)], [y1_data, fliplr(y2_data)], 'FaceColor', pr.get('FILLCOLOR'), 'FaceAlpha', pr.get('FILLALPHA'))
        end

    init_measure_plot_area()
    cb_measure_selection()

    if nargin > 0
        f_settings = pr.h_settings;
    end
end