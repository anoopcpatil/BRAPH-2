%% ¡header!
PPComparisonGroup_Diff < PlotPropMatrix (pr, plot property of comparison group difference) is a plot of comparison group difference.

%%% ¡description!
PPComparisonGroupDiff plots a Comparison Group Difference.

%%% ¡seealso!
GUI, PlotElement, PlotProp, PlotPropMatrix, ComparisonGroup.

%% ¡properties!
p
comparison_tbl
slider
second_slider
slider_text
second_slider_text

%% ¡methods!
function h_panel = draw(pr, varargin)
    %DRAW draws the idict for group ensemble property graphical panel.
    %
    % DRAW(PR) draws the idict property graphical panel.
    %
    % H = DRAW(PR) returns a handle to the idict property graphical panel.
    %
    % DRAW(PR, 'Property', VALUE, ...) sets the properties of the graphical
    %  panel with custom property-value couples.
    %  All standard plot properties of uipanel can be used.
    %
    % It is possible to access the properties of the various graphical
    %  objects from the handle to the brain surface graphical panel H.
    %
    % see also update, redraw, refresh, settings, uipanel, isgraphics.

    pr.p = draw@PlotPropMatrix(pr, varargin{:});
    
    % retrieves the handle of the table
    children = get(pr.p, 'Children');
    for i = 1:1:length(children)
        if check_graphics(children(i), 'uitable')
            pr.comparison_tbl = children(i);
        end
    end
    
    % create panel with slider
    el = pr.get('EL');
    prop = pr.get('PROP');
    value = el.get(prop);
    L = size(value, 1);
    L2 = size(value, 2);
    label = el.get('C').get('A1').getPropTag(9);
    
    if L > 1
        % set on first layer
        pr.slider = uicontrol( ...
            'Parent', pr.p, ...
            'Style', 'slider', ...
            'Units', 'characters', ...
            'Visible', 'off', ...
            'Value', 1, ...
            'Min', 1, ...
            'Max', L, ...
            'SliderStep', [1 1], ...
            'Callback', {@cb_slider} ...
            );    
        pr.slider_text = uicontrol(...
            'Parent', pr.p, ...
            'Style', 'text', ...
            'Units', 'characters', ...
            'HorizontalAlignment', 'center', ...
            'Visible', 'off', ...
            'FontUnits', BRAPH2.FONTUNITS, ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'FontWeight', 'bold', ...
            'String', [label ' ' num2str(round(get(pr.slider, 'Value')))], ...
            'BackgroundColor', pr.get('BKGCOLOR') ...
            );
    end
    
    function cb_slider(~, ~)
        pr.update()
    end
    
    if L2 > 1
        pr.second_slider = uicontrol( ...
            'Parent', pr.p, ...
            'Style', 'slider', ...
            'Units', 'characters', ...
            'Value', 1, ...
            'Min', 1, ...
            'Max', L2, ...
            'SliderStep', [1 1], ...
            'Callback', {@cb_slider_2} ...
            );    
        pr.second_slider_text = uicontrol(...
            'Parent', pr.p, ...
            'Style', 'text', ...
            'Units', 'characters', ...
            'HorizontalAlignment', 'center', ...
            'FontUnits', BRAPH2.FONTUNITS, ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'FontWeight', 'bold', ...
            'String', [label ' ' num2str(round(get(pr.second_slider, 'Value')))], ...
            'BackgroundColor', pr.get('BKGCOLOR') ...
            );
    end
    
    function cb_slider_2(~, ~)
        pr.update()
    end

    % output
    if nargout > 0
        h_panel = pr.p;
    end
end
function update(pr)
    %UPDATE updates the content of the property graphical panel.
    %
    % UPDATE(PR) updates the content of the property graphical panel.
    %
    % See also draw, redraw, refresh.

    update@PlotProp(pr)

    el = pr.get('EL');
    prop = pr.get('PROP');
    value = el.getr(prop);  
    label = el.get('C').get('A1').getPropTag(9);
   
    if el.isLocked(prop)
        set(pr.comparison_tbl, ...
            'Enable', pr.get('ENABLE'), ...
            'ColumnEditable', false ...
            )
    end
    
    if  size(value, 2) > 2
        set(pr.slider_text, ...
            'String', [label ' ' num2str(round(get(pr.slider, 'Value')))]);
        set(pr.second_slider_text, ...
            'String', [label ' ' num2str(round(get(pr.second_slider, 'Value')))]);
        set(pr.comparison_tbl, ...
            'Data', value{round(get(pr.slider, 'Value')), round(get(pr.second_slider, 'Value'))}, ...
            'ColumnFormat', repmat({'long'}, 1, size(el.get(prop), 2)), ...
            'ColumnEditable', false)        
    else        
        set(pr.slider_text, ...
            'String', [label ' ' num2str(round(get(pr.slider, 'Value')))]);
        set(pr.comparison_tbl, ...
            'Data', value{round(get(pr.slider, 'Value'))}, ...
            'ColumnFormat', repmat({'long'}, 1, size(el.get(prop), 2)), ...
            'ColumnEditable', false)
    end

    value = el.getr(prop);
    if isa(value, 'Callback')
        set(pr.comparison_tbl, ...
            'Enable', pr.get('ENABLE'), ...
            'ColumnEditable', false ...
            )
    end
    
end
function redraw(pr, varargin)
    %REDRAW redraws the element graphical panel.
    %
    % REDRAW(PR) redraws the plot PR.
    %
    % REDRAW(PR, 'Height', HEIGHT) sets the height of PR (by default HEIGHT=3.3).
    %
    % See also draw, update, refresh.
    
    [h, varargin] = get_and_remove_from_varargin(1.8, 'Height', varargin);
    [Sh, varargin] = get_and_remove_from_varargin(2.0, 'SHeight', varargin);
    [Th, varargin] = get_and_remove_from_varargin(2.0, 'THeight', varargin);
    [Dh, varargin] = get_and_remove_from_varargin(20, 'DHeight', varargin);
    
    
    el = pr.get('EL');
    prop = pr.get('PROP');
    value = el.get(prop);
    L = size(value, 1);
    L2 = size(value, 2);
    
    if L2 > 1
        pr.redraw@PlotProp('Height', h + Sh + Sh + Th + Th + Dh, varargin{:})
        set(pr.slider, ...
            'Units', 'normalized', ...
            'Visible', 'on', ...
            'Position', [.01 (Sh+Th+Dh)/(h+Sh+Sh+Th+Th+Dh) .97 (Th/(h+Sh+Sh+Th+Th+Dh)-.02)] ...
            );
        
        set(pr.slider_text, ...
            'Units', 'normalized', ...
            'Visible', 'on', ...
            'Position', [.01 (Sh+Th+Th+Dh)/(h+Sh+Sh+Th+Th+Dh) .97 (Th/(h+Sh+Sh+Th+Th+Dh)-.02)] ...
            );
        
        set(pr.second_slider, ...
            'Units', 'normalized', ...
            'Position', [.01 (Dh)/(h+Sh+Sh+Th+Th+Dh) .97 (Th/(h+Sh+Sh+Th+Th+Dh)-.02)] ...
            );
        
        set(pr.second_slider_text, ...
            'Units', 'normalized', ...
            'Position', [.01 (Dh+Th)/(h+Sh+Sh+Th+Th+Dh) .97 (Th/(h+Sh+Sh+Th+Th+Dh)-.02)] ...
            );
        
        set(pr.comparison_tbl, ...
            'Visible', 'on', ...
            'Units', 'normalized', ...
            'Position', [.01 .02 .97 (Dh/(h+Sh+Sh+Th+Th+Dh)-.02)] ...
            )
    else
        pr.redraw@PlotProp('Height', h + Sh + Th + Dh, varargin{:})
        set(pr.slider, ...
            'Units', 'normalized', ...
            'Visible', 'on', ...
            'Position', [.01 Dh/(h+Sh+Th+Dh) .97 (Th/(h+Sh+Th+Dh)-.02)] ...
            );
        
        set(pr.slider_text, ...
            'Units', 'normalized', ...
            'Visible', 'on', ...
            'Position', [.01 (Th+Dh)/(h+Sh+Th+Dh) .97 (Th/(h+Sh+Th+Dh)-.02)] ...
            );
        
        set(pr.comparison_tbl, ...
            'Visible', 'on', ...
            'Units', 'normalized', ...
            'Position', [.01 .02 .97 (Dh/(h+Sh+Th+Dh)-.02)] ...
            )
    end
end