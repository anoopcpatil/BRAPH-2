%% ¡header!
SettingsPositionPP < PanelProp (pr, settings position panel) is the panel with position settings.

%%% ¡description!
SettingsPositionPP plots the panel for position settings including 
a checkbox for autopositioning and numeric edit fields for x0, y0, height and width.
It works for all categories.

%%% ¡seealso!
SettingsPosition, uicheckbox, uieditfield

%% ¡properties!
p
checkbox_autopos
label_x0
editfield_x0
label_y0
editfield_y0
label_w
editfield_w
label_h
editfield_h

%% ¡methods!
function p_out = draw(pr, varargin)
    %DRAW draws the panel of position settings.
    %
    % DRAW(PR) draws the panel of position settings.
    %
    % P = DRAW(PR) returns a handle to the property panel.
    %
    % DRAW(PR, 'Property', VALUE, ...) sets the properties of the graphical
    %  panel with custom Name-Value pairs.
    %  All standard panel properties of uipanel can be used.
    %
    % It is possible to access the properties of the various graphical
    %  objects from the handle P of the panel.
    %
    % See also update, redraw, uipanel.

    el = pr.get('EL');
    prop = pr.get('PROP');
    
    pr.p = draw@PanelProp(pr, varargin{:});
    
    if ~check_graphics(pr.checkbox_autopos, 'uicheckbox') 
        pr.checkbox_autopos = uicheckbox( ...
            'Parent', pr.p, ...
            'Tag', 'checkbox_autopos', ...
            'Text', 'auto', ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('AUTOPOS')) ' ' el.get(prop).getPropDescription('AUTOPOS')], ...
            'ValueChangedFcn', {@cb_checkbox_autopos} ...
            );
    end
    function cb_checkbox_autopos(~, ~) % (src, event)
        pr.cb_position()
    end
    
    if ~check_graphics(pr.label_x0, 'uilabel')
        pr.label_x0 =  uilabel( ...
            'Parent', pr.p, ...
            'Tag', 'label_x0', ...
            'Text', 'x<sub>0</sub>', ...
            'Interpreter', 'html', ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'HorizontalAlignment', 'right', ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('X0')) ' ' el.get(prop).getPropDescription('X0')], ...
            'BackgroundColor', pr.get('BKGCOLOR') ...
            );
    end
    if ~check_graphics(pr.editfield_x0, 'uieditfield')
        pr.editfield_x0 = uieditfield('numeric', ...
            'Parent', pr.p, ...
            'Tag', 'editfield_x0', ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('X0')) ' ' el.get(prop).getPropDescription('X0')], ...
            'ValueChangedFcn', {@cb_editfield_x0} ...
            );
    end
    function cb_editfield_x0(~, ~) % (src, event)
        pr.cb_position()
    end

    if ~check_graphics(pr.label_y0, 'uilabel')
        pr.label_y0 =  uilabel( ...
            'Parent', pr.p, ...
            'Tag', 'label_y0', ...
            'Text', 'y<sub>0</sub>', ...
            'Interpreter', 'html', ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'HorizontalAlignment', 'right', ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('Y0')) ' ' el.get(prop).getPropDescription('Y0')], ...
            'BackgroundColor', pr.get('BKGCOLOR') ...
            );
    end
    if ~check_graphics(pr.editfield_y0, 'uieditfield')
        pr.editfield_y0 = uieditfield('numeric', ...
            'Parent', pr.p, ...
            'Tag', 'editfield_y0', ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('Y0')) ' ' el.get(prop).getPropDescription('Y0')], ...
            'ValueChangedFcn', {@cb_editfield_y0} ...
            );
    end
    function cb_editfield_y0(~, ~) % (src, event)
        pr.cb_position()
    end

    if ~check_graphics(pr.label_w, 'uilabel')
        pr.label_w =  uilabel( ...
            'Parent', pr.p, ...
            'Tag', 'label_w', ...
            'Text', 'w', ...
            'Interpreter', 'html', ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'HorizontalAlignment', 'right', ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('WIDTH')) ' ' el.get(prop).getPropDescription('WIDTH')], ...
            'BackgroundColor', pr.get('BKGCOLOR') ...
            );
    end
    if ~check_graphics(pr.editfield_w, 'uieditfield')
        pr.editfield_w = uieditfield('numeric', ...
            'Parent', pr.p, ...
            'Tag', 'editfield_w', ...
            'Limits', [0 +Inf], ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('WIDTH')) ' ' el.get(prop).getPropDescription('WIDTH')], ...
            'ValueChangedFcn', {@cb_editfield_w} ...
            );
    end
    function cb_editfield_w(~, ~) % (src, event)
        pr.cb_position()
    end

    if ~check_graphics(pr.label_h, 'uilabel')
        pr.label_h =  uilabel( ...
            'Parent', pr.p, ...
            'Tag', 'label_h', ...
            'Text', 'h', ...
            'Interpreter', 'html', ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'HorizontalAlignment', 'right', ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('HEIGHT')) ' ' el.get(prop).getPropDescription('HEIGHT')], ...
            'BackgroundColor', pr.get('BKGCOLOR') ...
            );
    end
    if ~check_graphics(pr.editfield_h, 'uieditfield')
        pr.editfield_h = uieditfield('numeric', ...
            'Parent', pr.p, ...
            'Tag', 'editfield_h', ...
            'Limits', [0 +Inf], ...
            'FontSize', BRAPH2.FONTSIZE, ...
            'Tooltip', [num2str(prop) ' ' upper(el.getPropTag(prop)) '>' num2str(el.get(prop).getPropProp('HEIGHT')) ' ' el.get(prop).getPropDescription('HEIGHT')], ...
            'ValueChangedFcn', {@cb_editfield_h} ...
            );
    end
    function cb_editfield_h(~, ~) % (src, event)
        pr.cb_position()
    end

    % output
    if nargout > 0
        p_out = pr.p;
    end
end
function update(pr)
    %UPDATE updates the content and permissions of the position settings.
    %
    % UPDATE(PR) updates the content and permissions of the position settings.
    %
    % See also draw, redraw, PanelElement.

    update@PanelProp(pr)
    
    el = pr.get('EL');
    prop = pr.get('PROP');
    
    if el.isLocked(prop)
        set(pr.checkbox_autopos, 'Enable', pr.get('ENABLE'))
        set(pr.editfield_x0, ...
            'Editable', 'off', ...
            'Enable', pr.get('ENABLE') ...
            )
        set(pr.editfield_y0, ...
            'Editable', 'off', ...
            'Enable', pr.get('ENABLE') ...
            )
        set(pr.editfield_w, ...
            'Editable', 'off', ...
            'Enable', pr.get('ENABLE') ...
            )
        set(pr.editfield_h, ...
            'Editable', 'off', ...
            'Enable', pr.get('ENABLE') ...
            )
    end

    switch el.getPropCategory(prop)
        case Category.METADATA
            set(pr.checkbox_autopos, 'Value', el.get(prop).get('AUTOPOS'))
            set(pr.editfield_x0, 'Value', el.get(prop).get('X0'))
            set(pr.editfield_y0, 'Value', el.get(prop).get('Y0'))
            set(pr.editfield_w, 'Value', el.get(prop).get('WIDTH'))
            set(pr.editfield_h, 'Value', el.get(prop).get('HEIGHT'))

        case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
            set(pr.checkbox_autopos, 'Value', el.get(prop).get('AUTOPOS'))
            set(pr.editfield_x0, 'Value', el.get(prop).get('X0'))
            set(pr.editfield_y0, 'Value', el.get(prop).get('Y0'))
            set(pr.editfield_w, 'Value', el.get(prop).get('WIDTH'))
            set(pr.editfield_h, 'Value', el.get(prop).get('HEIGHT'))

            if isa(el.getr(prop), 'Callback') || isa(el.get(prop).get('AUTOPOS'), 'Callback')
                set(pr.checkbox_autopos, 'Enable', pr.get('ENABLE'))
            end
            if isa(el.getr(prop), 'Callback') || isa(el.get(prop).get('X0'), 'Callback')
                set(pr.editfield_x0, ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
            end
            if isa(el.getr(prop), 'Callback') || isa(el.get(prop).get('Y0'), 'Callback')
                set(pr.editfield_y0, ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
            end
            if isa(el.getr(prop), 'Callback') || isa(el.get(prop).get('WIDTH'), 'Callback')
                set(pr.editfield_w, ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
            end
            if isa(el.getr(prop), 'Callback') || isa(el.get(prop).get('HEIGHT'), 'Callback')
                set(pr.editfield_h, ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
            end
            
        case Category.RESULT
            value = el.getr(prop);

            if isa(value, 'NoValue')
                set(pr.checkbox_autopos, ...
                    'Value', el.getPropDefault(prop).getPropDefault('AUTOPOS'), ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_x0, ...
                    'Value', el.getPropDefault(prop).getPropDefault('X0'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_y0, ...
                    'Value', el.getPropDefault(prop).getPropDefault('Y0'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_w, ...
                    'Value', el.getPropDefault(prop).getPropDefault('WIDTH'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_h, ...
                    'Value', el.getPropDefault(prop).getPropDefault('HEIGHT'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
            else
                set(pr.checkbox_autopos, ...
                    'Value', el.get(prop).get('AUTOPOS'), ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_x0, ...
                    'Value', el.get(prop).get('X0'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_y0, ...
                    'Value', el.get(prop).get('Y0'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_w, ...
                    'Value', el.get(prop).get('HEIGHT'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
                set(pr.editfield_h, ...
                    'Value', el.get(prop).get('WIDTH'), ...
                    'Editable', 'off', ...
                    'Enable', pr.get('ENABLE') ...
                    )
            end
    end
end
function redraw(pr, varargin)
    %REDRAW resizes the property panel and repositions its graphical objects.
    %
    % REDRAW(PR) resizes the property panel and repositions its graphical objects. 
    % 
    % Important notes:
    % 1. REDRAW() sets the units 'pixels' for panel. 
    % 2. REDRAW() is typically called internally by PanelElement and does not need 
    %  to be explicitly called in children of PanelProp.
    %
    % REDRAW(PR, 'X0', X0, 'Y0', Y0, 'Width', WIDTH, 'Height', HEIGHT)
    %  repositions the property panel. It is possible to use a
    %  subset of the Name-Value pairs.
    %  By default:
    %  - X0 does not change
    %  - Y0 does not change
    %  - WIDTH does not change
    %  - HEIGHT = s(3.5)
    %
    % See also draw, update, PanelElement, s.

    [h_p, varargin] = get_and_remove_from_varargin(s(3.5), 'Height', varargin);
    
    pr.redraw@PanelProp('Height', h_p, varargin{:})
    
    set(pr.checkbox_autopos, 'Position', [s(.3) s(.3) .15*w(pr.p, 'pixels') s(1.7)])

    set(pr.label_x0, 'Position', [.20*w(pr.p, 'pixels') s(.3) .04*w(pr.p, 'pixels') s(1.7)])
    set(pr.editfield_x0, 'Position', [.25*w(pr.p, 'pixels') s(.3) .12*w(pr.p, 'pixels') s(1.7)])
    
    set(pr.label_y0, 'Position', [.40*w(pr.p, 'pixels') s(.3) .04*w(pr.p, 'pixels') s(1.7)])
    set(pr.editfield_y0, 'Position', [.45*w(pr.p, 'pixels') s(.3) .12*w(pr.p, 'pixels') s(1.7)])

    set(pr.label_w, 'Position', [.60*w(pr.p, 'pixels') s(.3) .04*w(pr.p, 'pixels') s(1.7)])
    set(pr.editfield_w, 'Position', [.65*w(pr.p, 'pixels') s(.3) .12*w(pr.p, 'pixels') s(1.7)])

    set(pr.label_h, 'Position', [.80*w(pr.p, 'pixels') s(.3) .04*w(pr.p, 'pixels') s(1.7)])
    set(pr.editfield_h, 'Position', [.85*w(pr.p, 'pixels') s(.3) .12*w(pr.p, 'pixels') s(1.7)])

end
function cb_position(pr)
    %CB_POSITION executes callback for all fields.
    %
    % CB_POSITION(PR) executes callback for all fields.

    el = pr.get('EL');
    prop = pr.get('PROP');
    
    el.get(prop).set( ...
        'AUTOPOS', get(pr.checkbox_autopos, 'Value'), ...
        'X0', get(pr.editfield_x0, 'Value'), ...
        'Y0', get(pr.editfield_y0, 'Value'), ...
        'WIDTH', get(pr.editfield_w, 'Value'), ...
        'HEIGHT', get(pr.editfield_h, 'Value') ...
        )

% % %     pr.update()
end